<?xml version="1.0"?>
<doc>
    <assembly>
        <name>React.NET</name>
    </assembly>
    <members>
        <member name="T:React.DeferredDataCallback">
            <summary>
            Callback used to retrieve event data on a deferred (delayed) basis.
            </summary>
            <remarks>
            <para>
            When an <see cref="T:React.ActivationEvent"/>'s
            <see cref="P:React.ActivationEvent.Data"/> property is set to a
            <see cref="T:React.DeferredDataCallback"/>, the delegate will be
            called at the time the event is fired by the
            <see cref="T:React.Simulation"/>.  The object returned by the delegate will
            then serve as the new value for the <see cref="P:React.ActivationEvent.Data"/>
            property.
            </para>
            <para>
            The callback should always check the
            <see cref="P:React.ActivationEvent.IsPending"/> property before it allocates
            any data to the <see cref="T:React.ActivationEvent"/>.  If
            <see cref="P:React.ActivationEvent.IsPending"/> is <b>true</b>, then the data
            should be allocated; otherwise it should not be allocated, and any
            steps needed to un-reserve or deallocate data already allocated on
            behalf of the requesting <see cref="T:React.ActivationEvent"/> should be taken.
            </para>
            </remarks>
            <param name="evt">
            The <see cref="T:React.ActivationEvent"/> that is requesting the data.
            </param>
            <returns>
            The event data object or <see langword="null"/> if no data is available
            for the event.
            </returns>
        </member>
        <member name="T:React.ActivationEvent">
            <summary>
            Object used by a <see cref="T:React.Simulation"/> to schedule and run
            <see cref="P:React.ActivationEvent.Task"/> instances.
            </summary>
            <remarks>
            <para>
            <see cref="T:React.ActivationEvent"/> is part of the React.NET tasking system.  Each
            <see cref="T:React.ActivationEvent"/> specifies <em>when</em> a particular
            <see cref="P:React.ActivationEvent.Task"/> should be executed.  Each <see cref="P:React.ActivationEvent.Task"/>, on
            the other hand, describes <em>what</em> happens.
            </para>
            <para>
            Normally <see cref="P:React.ActivationEvent.Task"/> and <see cref="T:React.Process"/> implementors will
            not need to work directly with <see cref="T:React.ActivationEvent"/>s. Instead,
            they can simply use the various <b>Activate</b> methods of the
            <see cref="P:React.ActivationEvent.Task"/> class, which will create and schedule an
            <see cref="T:React.ActivationEvent"/> on behalf of the <see cref="P:React.ActivationEvent.Task"/>.
            </para>
            </remarks>
        </member>
        <member name="F:React.ActivationEvent.NotScheduled">
            <summary>
            Time which indicates the event is not scheduled.
            </summary>
        </member>
        <member name="F:React.ActivationEvent._evtTime">
            <summary>
            The time the event is scheduled to occur.
            </summary>
        </member>
        <member name="F:React.ActivationEvent._evtData">
            <summary>
            Client-specific event data.
            </summary>
        </member>
        <member name="F:React.ActivationEvent._cancelFlag">
            <summary>
            Flag indicating whether or not the event is canceled.
            </summary>
        </member>
        <member name="F:React.ActivationEvent._task">
            <summary>The <see cref="P:React.ActivationEvent.Task"/> to execute.</summary>
        </member>
        <member name="F:React.ActivationEvent._priority">
            <summary>
            The priority of <see cref="F:React.ActivationEvent._task"/> at the time this event was created.
            </summary>
        </member>
        <member name="F:React.ActivationEvent._activator">
            <summary>The object that activated <see cref="F:React.ActivationEvent._task"/>.</summary>
        </member>
        <member name="M:React.ActivationEvent.#ctor(React.Task,System.Int64)">
            <summary>
            Creates a new <see cref="T:React.ActivationEvent"/> that will run the specified
            <see cref="P:React.ActivationEvent.Task"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="task"/> is <see langword="null"/>.
            </exception>
            <param name="task">
            The <see cref="P:React.ActivationEvent.Task"/> this <see cref="T:React.ActivationEvent"/> will run
            when it is fired.
            </param>
            <param name="relTime">
            The time relative to the current simulation time when the
            <see cref="T:React.ActivationEvent"/> should be fired.
            </param>
        </member>
        <member name="M:React.ActivationEvent.#ctor(React.Task,System.Object,System.Int64)">
            <summary>
            Create a new <see cref="T:React.ActivationEvent"/> that will run the
            specified <see cref="P:React.ActivationEvent.Task"/> on behalf of the given activator.
            </summary>
            <param name="task">
            The <see cref="P:React.ActivationEvent.Task"/> this <see cref="T:React.ActivationEvent"/> will run
            when it is fired.
            </param>
            <param name="activator">
            The object which is activating <paramref name="task"/>.
            </param>
            <param name="relTime">
            The relative time when <paramref name="task"/> should be executed.
            </param>
        </member>
        <member name="M:React.ActivationEvent.Cancel">
            <summary>
            Cancels the <see cref="T:React.ActivationEvent"/>.
            </summary>
            <remarks>
            <para>
            After cancelling the <see cref="T:React.ActivationEvent"/>,
            <see cref="P:React.ActivationEvent.IsPending"/> will be <b>false</b> and the event will
            not be executed (fired) by the <see cref="T:React.Simulation"/>.
            </para>
            <para>
            Note that cancelling an <see cref="T:React.ActivationEvent"/> does not cancel
            its associated <see cref="P:React.ActivationEvent.Task"/>.
            </para>
            </remarks>
        </member>
        <member name="M:React.ActivationEvent.Fire(React.Simulation)">
            <summary>
            Invoked by the <see cref="T:React.Simulation"/> to fire the
            <see cref="T:React.ActivationEvent"/>.
            </summary>
            <remarks>
            Only a <see cref="T:React.Simulation"/> should invoke this method and then
            only after scheduling the <see cref="T:React.ActivationEvent"/>.
            </remarks>
            <param name="sim">
            The <see cref="T:React.Simulation"/> firing the
            <see cref="T:React.ActivationEvent"/>.
            </param>
        </member>
        <member name="M:React.ActivationEvent.PrepareDeferredData">
            <summary>
            Obtains the deferred activation data if any.
            </summary>
            <remarks>
            After this method is invoked, the <see cref="P:React.ActivationEvent.Data"/> property
            will reflect the data obtained from the
            <see cref="T:React.DeferredDataCallback"/> delegate.
            </remarks>
        </member>
        <member name="P:React.ActivationEvent.Task">
            <summary>
            Gets the <see cref="P:React.ActivationEvent.Task"/> this event will execute.
            </summary>
            <value>
            The <see cref="P:React.ActivationEvent.Task"/> to execute.
            </value>
        </member>
        <member name="P:React.ActivationEvent.Activator">
            <summary>
            Gets the object that is activating the <see cref="P:React.ActivationEvent.Task"/>
            associated with this <see cref="T:React.ActivationEvent"/>.
            </summary>
            <value>
            The task activator as an <see cref="T:System.Object"/> or
            <see langword="null"/> if the activation is anonymous (i.e. it
            did not specify an activator).
            </value>
        </member>
        <member name="P:React.ActivationEvent.Time">
            <summary>
            Gets the simulation time the event should occur.
            </summary>
            <remarks>
            <para>
            Note that the event will not actually occur unless it is first
            scheduled with the simulation using the
            <see cref="M:React.Simulation.ScheduleEvent(React.ActivationEvent)"/> method.
            </para>
            <para>
            <see cref="T:React.ActivationEvent"/>s with lower <see cref="P:React.ActivationEvent.Time"/> values
            always get fired before those with greater <see cref="P:React.ActivationEvent.Time"/>s.
            For <see cref="T:React.ActivationEvent"/> occurring at the same
            <see cref="P:React.ActivationEvent.Time"/>, their <see cref="P:React.ActivationEvent.Priority"/> values are used to
            determine which <see cref="T:React.ActivationEvent"/> should be fired
            first.
            </para>
            </remarks>
            <value>
            The simulation time the event should occur as an
            <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="P:React.ActivationEvent.Priority">
            <summary>
            Gets the <see cref="T:React.ActivationEvent"/>'s priority.
            </summary>
            <remarks>
            <para>
            For <see cref="T:React.ActivationEvent"/>s scheduled to occur at the same
            <see cref="P:React.ActivationEvent.Time"/>, the <see cref="P:React.ActivationEvent.Priority"/> can be used as a
            tie-breaker with those <see cref="T:React.ActivationEvent"/>s having higher
            priorities getting fired before those of lower priorities.
            </para>
            <para>
            <see cref="P:React.ActivationEvent.Priority"/> is not used to compare
            <see cref="T:React.ActivationEvent"/>s occurring at different times.  In
            those cases, the earlier <see cref="T:React.ActivationEvent"/> always takes
            place before the later <see cref="T:React.ActivationEvent"/>.
            </para>
            </remarks>
            <value>
            The priority as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.ActivationEvent.IsPending">
            <summary>
            Gets whether the <see cref="T:React.ActivationEvent"/> is pending.
            </summary>
            <remarks>
            This property will be <b>true</b> if the event is currently
            pending (waiting to be fired).  It is false if:
            <list type="bullet">
                <item><description>
                    The <see cref="T:React.ActivationEvent"/> was never scheduled with
                    a <see cref="T:React.Simulation"/>; or
                </description></item>
                <item><description>
                    It was cancelled via the <see cref="M:React.ActivationEvent.Cancel"/> method; or
                </description></item>
                <item><description>
                    Its associated <see cref="P:React.ActivationEvent.Task"/> was cancelled; or
                </description></item>
                <item><description>
                    It has already been fired.
                </description></item>
            </list>
            </remarks>
            <value>
            <b>true</b> if the <see cref="T:React.ActivationEvent"/> is pending.
            </value>
        </member>
        <member name="P:React.ActivationEvent.Data">
            <summary>
            Gets any optional data associated with this
            <see cref="T:React.ActivationEvent"/>.
            </summary>
            <value>
            The event data or <see langword="null"/> if there is no optional
            data.
            </value>
        </member>
        <member name="T:React.AnonymousResource">
            <summary>
            A <see cref="T:React.Resource"/> that does not track its resource items as
            actual objects.
            <seealso cref="T:React.TrackedResource"/>
            </summary>
            <remarks>
            <para>
            An <see cref="T:React.AnonymousResource"/> can be created directly or via
            the <see cref="M:React.Resource.Create(System.Int32)"/> factory method.
            </para>
            <para>
            <see cref="T:React.AnonymousResource"/>s are used when there is no need to
            track individual resource items using references to actual objects.
            In other words, an <see cref="T:React.AnonymousResource"/> represents a pool
            of "things" that are tracked solely by the number of such things in
            the pool.
            </para>
            <para>
            Items acquired from an <see cref="T:React.AnonymousResource"/> will never
            provide a reference through task activation data (the <c>data</c>
            parameter of the <see cref="M:React.Task.ExecuteTask(System.Object,System.Object)"/> mehtod) or the
            <see cref="P:React.Process.ActivationData"/> property.  When an
            <see cref="T:React.AnonymousResource"/> is acquired, these will always be
            <see langword="null"/>.
            </para>
            </remarks>
        </member>
        <member name="T:React.Resource">
            <summary>
            Abstract class used as a base for creating <see cref="T:React.IResource"/>
            implementations.
            </summary>
            <remarks>
            In most cases, <see cref="T:React.IResource"/> implementators should use this
            class as a base.  There are already two concrete <see cref="T:React.Resource"/>
            subclasses available: <see cref="T:React.AnonymousResource"/> and
            <see cref="T:React.TrackedResource"/>.  In addition, <see cref="T:React.Resource"/>
            offers several factory methods that can be used to instantiate
            <see cref="T:React.IResource"/> objects.
            </remarks>
        </member>
        <member name="T:React.Blocking`1">
            <summary>
            Base class for most objects that can block <see cref="T:React.Task"/>
            instances.
            </summary>
            <remarks>
            <para>
            <see cref="T:React.Blocking`1"/> is used to enforce a common idiom for
            all blocking objects without allowing substantially different types of
            blocking objects too much visibility into each other's inner-working.
            For example, both <see cref="T:React.Task"/> and <see cref="T:React.Resource"/> are
            derivatives of <see cref="T:React.Blocking`1"/>.  Because of this, each
            implements a common method for creating their blocking (wait) queues,
            getting a count of the number of blocked <see cref="T:React.Task"/>s on the
            wait queues, etc.  However, neither <see cref="T:React.Task"/> nor
            <see cref="T:React.Resource"/> directly exposes the underlying wait queues
            to each other.  This helps ensure that dissimilar blocking objects
            can't intentionally or unintentionally affect each other.
            </para>
            <para>
            Of course, by not exposing the wait queue even to sub-classes, it may
            make it difficult for certain functions to be carried out.  As a brief
            aside, the <see cref="T:React.Task"/> class actually does expose its wait queue
            to sub-classes through the <see cref="P:React.Task.WaitQueue"/> property, but
            this is not the norm for the other blocking objects.
            </para>
            <para>
            If you absolutely, positively need access to a blocking object's wait
            queue (or queues), it can be easily accomplished by overriding the
            <see cref="M:React.Blocking`1.CreateBlockingQueue(System.Int32)"/> method and simply hanging onto the
            returned <see cref="T:React.Queue.IQueue`1"/> reference that you return to
            the caller.  One thing to bear in mind, however, is that most of the
            React.NET blocking objects create their wait queue(s) on demand, so
            you're not immediately guaranteed access to the wait queue using these
            steps.
            </para>
            <para>
            Another consideration when sub-classing <see cref="T:React.Blocking`1"/>
            is the types of wait queues the <see cref="M:React.Blocking`1.CreateBlockingQueue(System.Int32)"/>
            will return.  This is not an issue for a blocking object that has only
            one wait queue, but if multiple wait queues are required, they must be
            of the same type.  The primary reason for this restriction is that
            C# generics do not allow downcasting of generic types whose type
            parameters differ.  For example, you can't create an
            <see cref="T:React.Queue.IQueue`1"/> and return it as an
            <see cref="T:React.Queue.IQueue`1"/>
            </para>
            </remarks>
            <typeparam name="T">
            The type of <see cref="T:React.Task"/> which can be blocked.
            </typeparam>
        </member>
        <member name="F:React.Blocking`1.AllQueues">
            <summary>
            Queue identifer for retrieving information about all queues.
            </summary>
        </member>
        <member name="F:React.Blocking`1.DefaultQueue">
            <summary>
            Queue identifier for the default wait queue.
            </summary>
        </member>
        <member name="F:React.Blocking`1._name">
            <summary>
            The name of the <see cref="T:React.Blocking`1"/> object.
            </summary>
        </member>
        <member name="M:React.Blocking`1.#ctor">
            <summary>
            Create a new, unnamed <see cref="T:React.Blocking`1"/> instance.
            </summary>
        </member>
        <member name="M:React.Blocking`1.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:React.Blocking`1"/> instance having the
            specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:React.Blocking`1.GetBlockCount(System.Int32)">
            <summary>
            Get the number of <see cref="T:React.Task"/> instances blocked on the
            specified wait queue.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            The number of <see cref="T:React.Task"/> instances blocked on the
            queue identified by <paramref name="queueId"/>.
            </returns>
        </member>
        <member name="M:React.Blocking`1.GetBlockedTasks(System.Int32)">
            <summary>
            Gets the <see cref="T:React.Task"/> instances blocking on the
            wait queue identified by a queue id.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            An array of <see cref="T:React.Task"/> instances that are currently
            contained in the wait queue identified by
            <paramref name="queueId"/>.  The returned array will never
            by <see langword="null"/>.
            </returns>
        </member>
        <member name="M:React.Blocking`1.GetBlockedTasks(React.Queue.IQueue{`0})">
            <summary>
            Extract the <see cref="T:React.Task"/> instances contained in the specified
            wait queue.
            </summary>
            <param name="waitQueue">The wait queue.</param>
            <returns>
            An array of <see cref="T:React.Task"/>s contained in
            <paramref name="waitQueue"/>.
            </returns>
        </member>
        <member name="M:React.Blocking`1.GetBlockedTasks(React.Queue.IQueue{`0}[])">
            <summary>
            Extract a consolidated array of <see cref="T:React.Task"/> instances
            contained in each of the given wait queues.
            </summary>
            <param name="waitQueues">
            An array of <see cref="T:React.Queue.IQueue`1"/> instances being used as
            wait queues.
            </param>
            <returns>
            An array of <see cref="T:React.Task"/>s contained in each
            <see cref="T:React.Queue.IQueue`1"/> in <paramref name="waitQueues"/>
            </returns>
        </member>
        <member name="M:React.Blocking`1.CreateBlockingQueue(System.Int32)">
            <summary>
            Create the specified wait queue.
            </summary>
            <remarks>
            This method allows a <see cref="T:React.Blocking`1"/> object to
            support one or more wait queues with the creation of each queue
            taking place in a centralized location.  By default, this method
            supports only the <see cref="F:React.Blocking`1.DefaultQueue"/>
            queue identifier.  The default queue is created as a
            <see cref="T:React.Queue.FifoQueue`1"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">
            The queue identifier.  Must not be <see cref="F:React.Blocking`1.AllQueues"/>.
            </param>
            <returns>
            The wait queue identified by <paramref name="queueId"/>.
            </returns>
        </member>
        <member name="P:React.Blocking`1.Name">
            <summary>
            Gets or sets the <see cref="T:React.Blocking`1"/> object's name.
            </summary>
            <value>
            The name as a <see cref="T:System.String"/>.
            </value>
        </member>
        <member name="P:React.Blocking`1.BlockCount">
            <summary>
            Gets the number of <see cref="T:React.Task"/>s blocking on this
            <see cref="T:React.Blocking`1"/> instance.
            </summary>
            <remarks>
            <para>
            This property returns the count of all blocked
            <see cref="T:React.Task"/>s without regard for which wait queue they
            might actually be blocking upon.  In most cases, there is only
            a single wait queue and therefore <see cref="P:React.Blocking`1.BlockCount"/>
            provides adequate insight into the number of waiting tasks.
            When a <see cref="T:React.Blocking`1"/> object has multiple wait
            queues, it may be necessary to query the per-queue count using the
            <see cref="M:React.Blocking`1.GetBlockCount(System.Int32)"/> method rather than this property.
            </para>
            <para>
            This property simply calls <c>GetBlockCount(AllQueues)</c>.
            </para>
            </remarks>
            <value>
            The number of blocked <see cref="T:React.Task"/>s as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="T:React.IResource">
            <summary>
            An object that can be used as a resource in the simulation.
            <seealso cref="T:React.Resource"/>
            </summary>
            <remarks>
            <para>
            In reality, an <see cref="T:React.IResource"/> represents a <em>set</em> or
            <em>pool</em> of resources that may be acquired and released by
            <see cref="T:React.Task"/>s during the course of a simulation run.  Each time
            a resource is acquired, there is one less resource available to
            dispense to other <see cref="T:React.Task"/>s.  Each time a resource is
            released by a <see cref="T:React.Task"/>, there is one more resource available
            to dispense.  When all resources have been acquired, the next
            <see cref="T:React.Task"/> to call <see cref="M:React.IResource.Acquire(React.Task)"/> will be blocked until
            such time as another <see cref="T:React.Task"/> puts a resource back into the
            available pool by calling <see cref="M:React.IResource.Release(React.Task)"/> or
            <see cref="M:React.IResource.Transfer(React.Task,React.Task)"/>.
            </para>
            <para>
            This interface represents the minimum functionality required to act as
            a resource pool in a React.NET simulation.  Most applications can use
            one of the <b>Create</b> methods on the <see cref="T:React.Resource"/> class to
            create a resource pool.
            </para>
            </remarks>
        </member>
        <member name="M:React.IResource.Acquire(React.Task)">
            <summary>
            Attempt to acquire a resource from the pool.
            </summary>
            <param name="requestor">
            The <see cref="T:React.Task"/> that is requesting to acquire a resource
            from the pool.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will acquire a resource from the pool
            on behalf of <paramref name="requestor"/>.
            </returns>
        </member>
        <member name="M:React.IResource.Release(React.Task)">
            <summary>
            Releases a previously acquired resource back to the pool.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="owner"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="owner"/> is not an owner of one of the
            resources in this pool.
            </exception>
            <param name="owner">
            The <see cref="T:React.Task"/> that is releasing a resource.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will release the resource on behalf
            of <paramref name="owner"/>.
            </returns>
        </member>
        <member name="M:React.IResource.Transfer(React.Task,React.Task)">
            <summary>
            Transfer ownership of a previously acquired resource from one
            <see cref="T:React.Task"/> to another.
            </summary>
            <remarks>
            <para>
            Ownership of a resource must be transferred from one
            <see cref="T:React.Task"/> to another if one task is supposed to acquire
            the resource, but another task will release it.
            </para>
            <para>
            It is important to note that <paramref name="receiver"/> is
            <b>not</b> resumed if it was waiting to acquire the resource.
            In the case where <paramref name="receiver"/> is blocking on
            the resource, <paramref name="owner"/> should interrupt
            <paramref name="receiver"/> after making the transfer.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="owner"/> is the same as
            <paramref name="receiver"/> or if <paramref name="owner"/> is not
            an owner of one of the resources in this pool.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="owner"/> or <paramref name="receiver"/> is
            <see langword="null"/>.
            </exception>
            <param name="owner">
            The <see cref="T:React.Task"/> that owns the resource.
            </param>
            <param name="receiver">
            The <see cref="T:React.Task"/> which will receive the resource from
            <paramref name="owner"/>.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will transfer the resource to
            <paramref name="receiver"/> on behalf of <paramref name="owner"/>.
            </returns>
        </member>
        <member name="P:React.IResource.Count">
            <summary>
            Gets the total number of resources in the pool.
            </summary>
            <remarks>
            <para>
            The total number of resources in the pool is defined as
            </para>
            <code>Count = Free + InUse + OutOfService</code>
            </remarks>
            <value>
            The total number of resources in the pool as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.IResource.Free">
            <summary>
            Gets the number of resources that are not currently in use.
            </summary>
            <remarks>
            <para>
            The number of free resources available in the pool is defined as
            </para>
            <code>Free = Count - (InUse + OutOfService)</code>
            </remarks>
            <value>
            The number of resources that are not currently in use as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.IResource.InUse">
            <summary>
            Gets the number of resources that are currently in use.
            </summary>
            <value>
            The number of resources that are currently in use as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.IResource.OutOfService">
            <summary>
            Gets or sets the number of resources that are out of service.
            </summary>
            <remarks>
            <para>
            Out-of-service resources may not be acquired from the pool.  If
            <b>OutOfService</b> is set to a value greater or equal to
            <see cref="P:React.IResource.Count"/>, then all resources are out of service and
            all subsequent calls to <see cref="M:React.IResource.Acquire(React.Task)"/> will block.
            </para>
            <para>
            Decreasing the number of out-of-service resources has the potential
            side-effect of resuming one or more waiting <see cref="T:React.Task"/>s.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than
            zero (0).
            </exception>
            <value>
            The number of resources currently out of service as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="F:React.Resource._ownMany">
            <summary>
            Whether or not a <see cref="T:React.Task"/> may own more than one resource
            item.
            </summary>
        </member>
        <member name="F:React.Resource._owners">
            <summary>
            An <see cref="T:System.Collections.IDictionary"/> used to track resource item owners.
            </summary>
        </member>
        <member name="F:React.Resource._waitQ">
            <summary>
            The wait queue used to block <see cref="T:React.Tasking.AcquireResource"/> tasks.
            </summary>
        </member>
        <member name="F:React.Resource._nReserved">
            <summary>
            The number of reserved resources.
            </summary>
        </member>
        <member name="M:React.Resource.#ctor">
            <overloads>
            Create and initialize a new Resource instance.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Resource"/> instance that has no name.
            </summary>
        </member>
        <member name="M:React.Resource.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:React.Resource"/> instance with the specified
            name.
            </summary>
            <param name="name">The name of the <see cref="T:React.Resource"/>.</param>
        </member>
        <member name="M:React.Resource.Acquire(React.Task)">
            <summary>
            Attempt to acquire a resource from the pool.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="requestor"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If <paramref name="requestor"/> is already an owner of a resource
            from this pool and <see cref="P:React.Resource.AllowOwnMany"/> is <b>false</b>.
            </exception>
            <param name="requestor">
            The <see cref="T:React.Task"/> that is requesting to acquire a resource
            from the pool.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will acquire a resource from the pool
            on behalf of <paramref name="requestor"/>.
            </returns>
        </member>
        <member name="M:React.Resource.Release(React.Task)">
            <summary>
            Releases a previously acquired resource back to the pool.
            </summary>
            <remarks>
            This method invokes <see cref="M:React.Resource.SelectItemToRelease(React.Task,System.Collections.IList)"/> to
            select a resource item to release.  For
            <see cref="T:React.AnonymousResource"/> instances, the item will be
            <see langword="null"/>.  For <see cref="T:React.TrackedResource"/>
            instances, <see cref="M:React.Resource.SelectItemToRelease(React.Task,System.Collections.IList)"/> <b>may</b>
            return a <see langword="null"/> or a reference to a resource
            item owned by <paramref name="owner"/> that should be released.
            This allows <see cref="M:React.Resource.Release(React.Task)"/> to be used to release a
            <see cref="T:React.TrackedResource"/> item without requiring the calling
            program to explicitly specify the item to release.  This
            behavior can be disabled on <see cref="T:React.TrackedResource"/>
            instance through the <see cref="P:React.TrackedResource.AutoSelect"/>
            property.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="owner"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If <paramref name="owner"/> is not an owner of one of the
            resources in this pool.
            </exception>
            <param name="owner">
            The <see cref="T:React.Task"/> that is releasing a resource.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will release the resource on behalf
            of <paramref name="owner"/>.
            </returns>
        </member>
        <member name="M:React.Resource.Transfer(React.Task,React.Task)">
            <summary>
            Transfer ownership of a previously acquired resource from one
            <see cref="T:React.Task"/> to another.
            </summary>
            <remarks>
            <para>
            Ownership of a resource must be transferred from one
            <see cref="T:React.Task"/> to another if one task is supposed to acquire
            the resource, but another task will release it.
            </para>
            <para>
            It is important to note that <paramref name="receiver"/> is
            <b>not</b> resumed if it was waiting to acquire the resource.
            In the case where <paramref name="receiver"/> is blocking on
            the resource, <paramref name="owner"/> should interrupt
            <paramref name="receiver"/> after making the transfer.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="owner"/> is the same as
            <paramref name="receiver"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="owner"/> or <paramref name="receiver"/> is
            <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If <paramref name="owner"/> does not own a resource from this
            pool; or <paramref name="receiver"/> already owns a resource from
            this pool and <see cref="P:React.Resource.AllowOwnMany"/> is <b>false</b>.
            </exception>
            <param name="owner">
            The <see cref="T:React.Task"/> that owns the resource.
            </param>
            <param name="receiver">
            The <see cref="T:React.Task"/> which will receive the resource from
            <paramref name="owner"/>.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will transfer the resource to
            <paramref name="receiver"/> on behalf of <paramref name="owner"/>.
            </returns>
        </member>
        <member name="M:React.Resource.IsOwner(React.Task)">
            <summary>
            Checks if the given <see cref="T:React.Task"/> owns any resources in the
            pool.
            </summary>
            <param name="task">
            The <see cref="T:React.Task"/> which may own one or more resources in the
            resource pool.
            </param>
            <returns>
            <b>true</b> if <paramref name="task"/> owns at least one resource
            from this resource pool.
            </returns>
        </member>
        <member name="M:React.Resource.OwnershipCount(React.Task)">
            <summary>
            Gets the number of resources owned by the specified
            <see cref="T:React.Task"/> (if any).
            </summary>
            <param name="task">
            The <see cref="T:React.Task"/> whose resource ownership count will be
            computed.
            </param>
            <returns>
            The number of resource from the pool owned by
            <paramref name="task"/>.  If <paramref name="task"/> does not
            own any resources from the pool, the returned value will be zero
            (0).
            </returns>
        </member>
        <member name="M:React.Resource.GetBlockCount(System.Int32)">
            <summary>
            Get the number of <see cref="T:React.Task"/> instances blocked on the
            specified wait queue.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            The number of <see cref="T:React.Task"/> instances blocked on the
            queue identified by <paramref name="queueId"/>.
            </returns>
        </member>
        <member name="M:React.Resource.GetBlockedTasks(System.Int32)">
            <summary>
            Gets the <see cref="T:React.Task"/> instances blocking on the
            wait queue identified by a queue id.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            An array of <see cref="T:React.Task"/> instances that are currently
            contained in the wait queue identified by
            <paramref name="queueId"/>.  The returned array will never
            by <see langword="null"/>.
            </returns>
        </member>
        <member name="M:React.Resource.AllocateResource">
            <summary>
            Immediately allocate a resource from the pool and return the
            associated resource item.
            </summary>
            <remarks>
            Anonymous <see cref="T:React.Resource"/> implementations will always
            return <see langword="null"/>.  Tracked <see cref="T:React.Resource"/>
            implementation must return a valid, non-null <see cref="T:System.Object"/>.
            </remarks>
            <returns>
            The resource item associated with the allocated resource or
            <see langword="null"/> if resources are not assocatiated with
            arbitrary objects.
            </returns>
        </member>
        <member name="M:React.Resource.DeallocateResource(System.Object)">
            <summary>
            Immediately free (deallocate) a resource and return it to the
            pool.
            </summary>
            <param name="item">
            The resource item being freed.  This will be <see langword="null"/>
            for anonymous <see cref="T:React.Resource"/> implementations.
            </param>
        </member>
        <member name="M:React.Resource.ResumeWaiting">
            <summary>
            Resume as many blocked <see cref="T:React.Task"/>s as there are free
            resource items.
            </summary>
        </member>
        <member name="M:React.Resource.SelectItemToRelease(React.Task,System.Collections.IList)">
            <summary>
            Select and return a particular resource item to release.
            </summary>
            <remarks>
            This method may simply return <see langword="null"/> if the
            <see cref="T:React.Resource"/> implementation does not track individual
            resource items; otherwise it should select an item from the
            <see cref="T:System.Collections.IList"/> to release.
            </remarks>
            <param name="owner">
            The <see cref="T:React.Task"/> that is the actual resource owner.
            </param>
            <param name="items">
            An immutable <see cref="T:System.Collections.IList"/> of resource items owned by
            <paramref name="owner"/>.  This will be <see langword="null"/>
            if the <see cref="T:React.Resource"/> is not tracking individual items.
            </param>
            <returns>A resource item to release.</returns>
        </member>
        <member name="M:React.Resource.Create(System.Int32)">
            <summary>
            Create an anonymous <see cref="T:React.Resource"/> containing the given
            number of in-service resources.
            </summary>
            <param name="count">
            The total number of resources in the pool, all of which are 
            in-service.
            </param>
            <returns>
            An anonymous <see cref="T:React.Resource"/> containing
            <paramref name="count"/> resources, all of which are in-service.
            </returns>
        </member>
        <member name="M:React.Resource.Create(System.Int32,System.Int32)">
            <summary>
            Create an anonymous <see cref="T:React.Resource"/> containing the
            specified number of in-service and out-of-service resources.
            </summary>
            <remarks>
            The total number of resources in the pool is given by
            <c>inService + outOfService</c>.
            </remarks>
            <param name="inService">
            The number of resources in the pool that are in-service.
            </param>
            <param name="outOfService">
            The number of resources in the pool that are out-of-service.
            </param>
            <returns>
            An anonymous <see cref="T:React.Resource"/> containing
            <paramref name="inService"/> in-service resources and
            <paramref name="outOfService"/> out-of-service resources.
            </returns>
        </member>
        <member name="M:React.Resource.Create(System.Collections.IEnumerable)">
            <summary>
            Create a tracked <see cref="T:React.Resource"/> containing the given
            objects.
            </summary>
            <remarks>
            Each object in <paramref name="items"/> must be of the same
            type.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="items"/> contains objects having differing
            types or is empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="items"/> is <see langword="null"/>.
            </exception>
            <param name="items">
            An <see cref="T:System.Collections.IEnumerable"/> that contains one or more objects
            that will be dispensed as resources.
            </param>
            <returns>
            A tracked <see cref="T:React.Resource"/> containing the given items.
            </returns>
        </member>
        <member name="M:React.Resource.GetOrFreeReserved(React.ActivationEvent)">
            <summary>
            Gets or frees a reserved resource item.
            </summary>
            <remarks>
            This method decrements the reserve count and, if 
            <paramref name="evt"/> is pending it will actually allocate a
            resource item to the <see cref="T:React.Task"/> which will be run by
            <paramref name="evt"/>.
            </remarks>
            <param name="evt">
            The <see cref="T:React.ActivationEvent"/> making the data request.
            </param>
            <returns>
            The resource item associated with the allocated resource or
            <see langword="null"/> if resources are not assocatiated with
            arbitrary objects.  Also returns <see langword="null"/> if
            <paramref name="evt"/> is not pending (i.e. the
            <see cref="P:React.ActivationEvent.IsPending"/> method is <b>false</b>).
            </returns>
        </member>
        <member name="M:React.Resource.RequestResource(React.Tasking.AcquireResource)">
            <summary>
            Invoked by a <see cref="T:React.Tasking.AcquireResource"/> task to request
            allocation of a resource.
            </summary>
            <remarks>
            If there are no free resources, <paramref name="task"/> will be
            placed on the wait queue.
            </remarks>
            <param name="task">
            The <see cref="T:React.Tasking.AcquireResource"/> task making the request.
            </param>
            <returns>
            <b>true</b> if a resource was allocated; or <b>false</b> if no
            resource was available and <paramref name="task"/> was blocked.
            </returns>
        </member>
        <member name="M:React.Resource.ReturnResource(React.Task,System.Object)">
            <summary>
            Invoked by a <see cref="T:React.Tasking.ReleaseResource"/> task to return a
            resource to the pool.
            </summary>
            <param name="owner">
            The <see cref="T:React.Task"/> that is the actual resource owner.  This
            is <b>not</b> the <see cref="T:React.Tasking.ReleaseResource"/> task.
            </param>
            <param name="item">
            The resource item.  This will be <see langword="null"/> for
            anonymous resources.
            </param>
        </member>
        <member name="M:React.Resource.TransferResource(React.Task,React.Task,System.Object)">
            <summary>
            Invoked by a <see cref="M:React.Resource.TransferResource(React.Task,React.Task,System.Object)"/> task to transfer
            ownership of a resource from one <see cref="T:React.Task"/> to another.
            </summary>
            <param name="owner">
            The <see cref="T:React.Task"/> that is the actual resource owner.  This
            is <b>not</b> the <see cref="M:React.Resource.TransferResource(React.Task,React.Task,System.Object)"/> task.
            </param>
            <param name="receiver">
            The <see cref="T:React.Task"/> that will be granted ownership of the
            resource.
            </param>
            <param name="item">
            The resource item.  This will be <see langword="null"/> for
            anonymous resources.
            </param>
        </member>
        <member name="M:React.Resource.SetOwner(React.Task,System.Object)">
            <summary>
            Record the given <see cref="T:React.Task"/> as a resource item owner.
            </summary>
            <param name="task">
            The <see cref="T:React.Task"/> that owns <paramref name="item"/>.
            </param>
            <param name="item">
            The reference to a resource item for tracked resources; or
            <see langword="null"/> for anonymous resources.
            </param>
        </member>
        <member name="M:React.Resource.ClearOwner(React.Task,System.Object)">
            <summary>
            Removes the specified <see cref="T:React.Task"/> as a resource item owner.
            </summary>
            <param name="owner">
            The <see cref="T:React.Task"/> that owns <paramref name="item"/>.
            </param>
            <param name="item">
            A reference to the resource item previously obtained via a call to
            <see cref="M:React.Resource.AllocateResource"/> (for tracked resources); or
            <see langword="null"/> (for anonymous resources).
            </param>
        </member>
        <member name="P:React.Resource.AllowOwnMany">
            <summary>
            Gets or sets whether multiple resources from the pool may be
            owned by the same <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            If a <see cref="T:React.Resource"/> does not allow ownership of multiple
            resources by a single <see cref="T:React.Task"/>, an exception will be
            thrown if an owning <see cref="T:React.Task"/> calls <see cref="M:React.Resource.Acquire(React.Task)"/>
            before first calling <see cref="M:React.Resource.Release(React.Task)"/>.
            </remarks>
            <value>
            <b>true</b> if the same <see cref="T:React.Task"/> may own multiple
            resource from the pool; or <b>false</b> if at most one resource
            from the pool may be owned by each <see cref="T:React.Task"/>. 
            </value>
        </member>
        <member name="P:React.Resource.Reserved">
            <summary>
            Gets the number of resources that have been reserved for use by
            requesting <see cref="T:React.Task"/>s but not yet actually allocated to
            those <see cref="T:React.Task"/>s.
            </summary>
            <value>
            The number of reserved resources as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Resource.Count">
            <summary>
            Gets the total number of resources in the pool.
            </summary>
            <remarks>
            <para>
            The total number of resources in the pool is defined as
            </para>
            <code>Count = Free + InUse + OutOfService</code>
            </remarks>
            <value>
            The total number of resources in the pool as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Resource.Free">
            <summary>
            Gets the number of resources that are not currently in use.
            </summary>
            <value>
            The number of resources that are not currently in use as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Resource.InUse">
            <summary>
            Gets the number of resources that are currently in use.
            </summary>
            <value>
            The number of resources that are currently in use as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Resource.OutOfService">
            <summary>
            Gets or sets the number of resources that are out of service.
            </summary>
            <remarks>
            <para>
            Out-of-service resources may not be acquired from the pool.  If
            <b>OutOfService</b> is set to a value greater or equal to
            <see cref="P:React.Resource.Count"/>, then all resources are out of service and
            all subsequent calls to <see cref="M:React.Resource.Acquire(React.Task)"/> will block.
            </para>
            <para>
            Decreasing the number of out-of-service resources has the potential
            side-effect of resuming one or more waiting <see cref="T:React.Task"/>s.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than
            zero (0).
            </exception>
            <value>
            The number of resources currently out of service as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="F:React.AnonymousResource._count">
            <summary>
            The total number of items in the pool.
            </summary>
        </member>
        <member name="F:React.AnonymousResource._inUse">
            <summary>
            The number of items currently in use.
            </summary>
        </member>
        <member name="F:React.AnonymousResource._outOfService">
            <summary>
            The number of items that are not in service.
            </summary>
        </member>
        <member name="M:React.AnonymousResource.#ctor">
            <overloads>
            Create and initialize a new AnonymousResource.
            </overloads>
            <summary>
            Create a new, unnamed <see cref="T:React.AnonymousResource"/> that contains
            one (1) item.
            </summary>
        </member>
        <member name="M:React.AnonymousResource.#ctor(System.Int32)">
            <summary>
            Create a new, unnamed <see cref="T:React.AnonymousResource"/> that contains
            the specified number of items.
            </summary>
            <param name="count">
            The number of items in the <see cref="T:React.AnonymousResource"/>.
            </param>
        </member>
        <member name="M:React.AnonymousResource.#ctor(System.String,System.Int32)">
            <summary>
            Create a new <see cref="T:React.AnonymousResource"/> having the specified
            name and containing the given number of items.
            </summary>
            <param name="name">The resource name.</param>
            <param name="count">
            The number of items in the <see cref="T:React.AnonymousResource"/>.
            </param>
        </member>
        <member name="M:React.AnonymousResource.AllocateResource">
            <summary>
            Allocate a resource item.
            </summary>
            <remarks>
            Calling this method will increment the in-use count by one.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If there are no free resources (i.e. <see cref="P:React.AnonymousResource.Free"/> is less
            than one).
            </exception>
            <returns>
            Always returns <see langword="null"/>.
            </returns>
        </member>
        <member name="M:React.AnonymousResource.DeallocateResource(System.Object)">
            <summary>
            Deallocate a resource item.
            </summary>
            <remarks>
            Calling this method will decrement the in-use count by one.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If there are no resource in use (i.e. <see cref="P:React.AnonymousResource.InUse"/> is less
            than one).
            </exception>
            <param name="item">Not used.</param>
        </member>
        <member name="M:React.AnonymousResource.SelectItemToRelease(React.Task,System.Collections.IList)">
            <summary>
            Select and return a particular resource item to release.
            </summary>
            <remarks>
            This method always returns <see langword="null"/> as an
            <see cref="T:React.AnonymousResource"/> does not keep track of
            individual resource items.
            </remarks>
            <param name="owner">
            The <see cref="T:React.Task"/> that is the actual resource owner.
            </param>
            <param name="items">
            An immutable <see cref="T:System.Collections.IList"/> of resource items owned by
            <paramref name="owner"/>.  This will be <see langword="null"/>
            if the <see cref="T:React.Resource"/> is not tracking individual items.
            </param>
            <returns>Always returns <see langword="null"/>.</returns>
        </member>
        <member name="P:React.AnonymousResource.Count">
            <summary>
            Gets the total number of resources in the pool.
            </summary>
            <value>
            The total number of resources in the pool as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.AnonymousResource.Free">
            <summary>
            Gets the number of resources that are not currently in use.
            </summary>
            <value>
            The number of resources that are not currently in use as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.AnonymousResource.InUse">
            <summary>
            Gets the number of resources that are currently in use.
            </summary>
            <value>
            The number of resources that are currently in use as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.AnonymousResource.OutOfService">
            <summary>
            Gets or sets the number of resources that are out of service.
            </summary>
            <remarks>
            <para>
            Out-of-service resources may not be acquired from the pool.  If
            <b>OutOfService</b> is set to a value greater or equal to
            <see cref="P:React.AnonymousResource.Count"/>, then all resources are out of service and
            all subsequent calls to <see cref="M:React.Resource.Acquire(React.Task)"/> will block.
            </para>
            <para>
            Decreasing the number of out-of-service resources has the potential
            side-effect of resuming one or more waiting <see cref="T:React.Task"/>s.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than
            zero (0).
            </exception>
            <value>
            The number of resources currently out of service as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="T:React.BackClockingException">
            <summary>
            The exception that is thrown when an attempt is made to schedule an
            <see cref="T:React.ActivationEvent"/> earlier than the current simulation time.
            </summary>
        </member>
        <member name="T:React.SchedulingException">
            <summary>
            An exception that signifies an error occurred while trying to
            schedule an <see cref="T:React.ActivationEvent"/>.
            </summary>
        </member>
        <member name="T:React.SimulationException">
            <summary>
            Exception that signifies a simulation error.
            </summary>
        </member>
        <member name="F:React.SimulationException._sim">
            <summary>
            The <see cref="P:React.SimulationException.Simulation"/> where the error occured.
            </summary>
        </member>
        <member name="M:React.SimulationException.#ctor">
            <overloads>Create and initialize a SimulationException.</overloads>
            <summary>
            Create a <see cref="T:React.SimulationException"/> having no simulation
            context or message.
            </summary>
        </member>
        <member name="M:React.SimulationException.#ctor(System.String)">
            <summary>
            Create a <see cref="T:React.SimulationException"/> with the specified
            error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:React.SimulationException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:React.SimulationException"/> with a specified
            error message and a reference to the inner exception that is the
            cause of this exception. 
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the
            <paramref name="innerException"/> parameter is not
            <see langword="null"/>, the current exception is raised in a
            <b>catch</b> block that handles the inner exception.
            </param>
        </member>
        <member name="M:React.SimulationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:React.SimulationException"/>
            class with serialized data. 
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
            information about the source or destination.
            </param>
        </member>
        <member name="M:React.SimulationException.#ctor(React.Simulation)">
            <summary>
            Create a <see cref="T:React.SimulationException"/> having the given
            simulation context.
            </summary>
            <param name="sim">The simulation context.</param>
        </member>
        <member name="M:React.SimulationException.#ctor(React.Simulation,System.String)">
            <summary>
            Create a <see cref="T:React.SimulationException"/> having the given
            simulation context and error message.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="M:React.SimulationException.#ctor(React.Simulation,System.String,System.Exception)">
            <summary>
            Create a <see cref="T:React.SimulationException"/> having the given
            simulation context, error message, and cause.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="message">The error message.</param>
            <param name="innerException">The cause.</param>
        </member>
        <member name="P:React.SimulationException.Simulation">
            <summary>
            Gets the simulation context where the error occurred.
            </summary>
            <value>
            The simulation context as a <see cref="T:React.Simulation"/>.
            </value>
        </member>
        <member name="P:React.SimulationException.Time">
            <summary>
            Gets the simulation time when the exception was thrown.
            </summary>
            <value>
            The simulation time as an <see cref="T:System.Int64"/>.  If the simulation
            is not running, <see cref="P:React.SimulationException.Time"/> will be -1L.
            </value>
        </member>
        <member name="M:React.SchedulingException.#ctor">
            <overloads>
            Create and initialize a new SchedulingException.
            </overloads>
            <summary>
            Create a new <see cref="T:React.SchedulingException"/> with no message.
            </summary>
        </member>
        <member name="M:React.SchedulingException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:React.SchedulingException"/> with the given
            message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:React.SchedulingException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:React.SchedulingException"/> with a specified
            error message and a reference to the inner exception that is the
            cause of this exception. 
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the
            <paramref name="innerException"/> parameter is not
            <see langword="null"/>, the current exception is raised in a
            <b>catch</b> block that handles the inner exception.
            </param>
        </member>
        <member name="M:React.SchedulingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:React.SchedulingException"/>
            class with serialized data. 
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
            information about the source or destination.
            </param>
        </member>
        <member name="M:React.SchedulingException.#ctor(React.Simulation)">
            <summary>
            Create a new <see cref="T:React.SchedulingException"/> with no message, but
            that has the given simulation context.
            </summary>
            <param name="sim">The simulation context.</param>
        </member>
        <member name="M:React.SchedulingException.#ctor(React.Simulation,System.String)">
            <summary>
            Create a new <see cref="T:React.SchedulingException"/> having the given
            simulation context and error message.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="message">The error message.</param>
        </member>
        <member name="F:React.BackClockingException._schdTime">
            <summary>
            The time the back-clocking attempt occurred.
            </summary>
        </member>
        <member name="M:React.BackClockingException.#ctor">
            <overloads>
            Create and initialize a BackClockingException.
            </overloads>
            <summary>
            Create a <see cref="T:React.BackClockingException"/> having no simulation
            context or message.
            </summary>
        </member>
        <member name="M:React.BackClockingException.#ctor(System.String)">
            <summary>
            Create a <see cref="T:React.BackClockingException"/> with the specified
            error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:React.BackClockingException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:React.BackClockingException"/> with a specified
            error message and a reference to the inner exception that is the
            cause of this exception. 
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">
            The exception that is the cause of the current exception. If the
            <paramref name="innerException"/> parameter is not
            <see langword="null"/>, the current exception is raised in a
            <b>catch</b> block that handles the inner exception.
            </param>
        </member>
        <member name="M:React.BackClockingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:React.BackClockingException"/>
            class with serialized data. 
            </summary>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized
            object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual
            information about the source or destination.
            </param>
        </member>
        <member name="M:React.BackClockingException.#ctor(React.Simulation)">
            <overloads>
            Create and initialize a new BackClockingException.
            </overloads>
            <summary>
            Create a new <see cref="T:React.BackClockingException"/>
            </summary>
            <remarks>
            The time the attempted back-clocking occurred is not set.
            </remarks>
            <param name="sim">The simulation context.</param>
        </member>
        <member name="M:React.BackClockingException.#ctor(React.Simulation,System.Int64)">
            <summary>
            Create a new <see cref="T:React.BackClockingException"/> which
            indicates the time of the back-clocking attempt.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="time">
            The simulation time when the back-clocking attempt occurred.
            </param>
        </member>
        <member name="M:React.BackClockingException.#ctor(React.Simulation,System.String)">
            <summary>
            Create a new <see cref="T:React.BackClockingException"/> with the
            specified error message.
            </summary>
            <remarks>
            The time the attempted back-clocking occurred is not set.
            </remarks>
            <param name="sim">The simulation context.</param>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:React.BackClockingException.#ctor(React.Simulation,System.Int64,System.String)">
            <summary>
            Create a new <see cref="T:React.BackClockingException"/> with the
            specified error message and indicating the time when the
            back-clocking attempt occurred.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="time">
            The simulation time when the back-clocking attempt occurred.
            </param>
            <param name="message">
            The message that describes the error.
            </param>
        </member>
        <member name="M:React.BackClockingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the given <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the
            data needed to serialize the <see cref="T:React.BackClockingException"/>. 
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="info"/> is <see langword="null"/>.
            </exception>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.
            </param>
            <param name="context">
            The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this
            serialization.
            </param>
        </member>
        <member name="P:React.BackClockingException.AttemptedTime">
            <summary>
            Gets the simulation time when the back-clocking attempt was made.
            </summary>
            <value>
            The simulation time when the back-clocking attempt was made as an
            <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="P:React.BackClockingException.Message">
            <summary>
            Gets the error message that explains the reason the
            <see cref="T:React.BackClockingException"/> occurred.
            </summary>
            <remarks>
            If no message text was given in the constructor, default message
            indicating the simulation time and requested time is used.
            </remarks>
            <value>
            The error message that explains the reason for the
            <see cref="T:React.BackClockingException"/>.
            </value>
        </member>
        <member name="T:React.BlockingMethodAttribute">
            <summary>
            Attribute used to flag a method that has blocking semantics.
            </summary>
            <remarks>
            <para>
            Methods that have this attribute must return a <see cref="T:React.Task"/>
            instance.  This attribute is used solely to document methods that
            return a <see cref="T:React.Task"/> that must be blocked upon.  The returned
            <see cref="T:React.Task"/> will perform some action on behalf of another
            <see cref="T:React.Task"/>.
            </para>
            <para>
            This attribute can only be applied to methods.
            </para>
            <example>
            <para>
            A typical use of a blocking method from a <see cref="T:React.Process"/>
            (specifically from the <see cref="M:React.Process.GetProcessSteps"/> method)
            might look something like this:
            </para>
            <para>
            <code>
            IResource resource = /* get a resource */
            yield return resource.Acquire(this);</code>
            </para>
            <para>
            In the above case, the <see cref="M:React.IResource.Acquire(React.Task)"/> method is
            a blocking method.  The <see cref="T:React.Task"/> it returns is blocked upon
            by the <see cref="T:React.Process"/> (by virtue of the <c>yield return</c>
            statement).
            </para>
            </example>
            </remarks>
        </member>
        <member name="M:React.BlockingMethodAttribute.#ctor">
            <summary>
            Create a new <see cref="T:React.BlockingMethodAttribute"/> instance.
            </summary>
        </member>
        <member name="T:React.BoundedBuffer">
            <summary>
            A concrete implementation of <see cref="T:React.IBoundedBuffer"/>.
            </summary>
        </member>
        <member name="T:React.IBoundedBuffer">
            <summary>
            An object which can serve as a <em>bounded buffer</em>.
            <seealso cref="T:React.BoundedBuffer"/>
            </summary>
            <remarks>
            <para>
            A <em>bounded buffer</em> is a blocking object that has a pre-defined
            capacity.  <see cref="T:React.Task"/>s that use the <see cref="T:React.IBoundedBuffer"/>
            attempt to put items into the buffer (they are the <em>producers</em>)
            or take items from the buffer (they are the <em>consumers</em>).
            </para>
            <para>
            <see cref="T:React.Task"/>s that are acting as producers use <see cref="M:React.IBoundedBuffer.Put(React.Task,System.Object)"/>
            to attempt to add an item to the buffer.  If the buffer has not yet
            reached its capacity the item can be added immediately; otherwise
            the <see cref="T:React.Task"/> returned by <see cref="M:React.IBoundedBuffer.Put(React.Task,System.Object)"/> will block until
            such time as the buffer has room for another item.
            </para>
            <para>
            <see cref="T:React.Task"/>s that are acting as consumers use <see cref="M:React.IBoundedBuffer.Get(React.Task)"/>
            to attempt to remove an item from the buffer.  If the buffer is not
            empty an item is immediately removed; otherwise the <see cref="T:React.Task"/>
            returned by <see cref="M:React.IBoundedBuffer.Get(React.Task)"/> will block until such time as a
            producer adds an item.
            </para>
            </remarks>
        </member>
        <member name="M:React.IBoundedBuffer.Get(React.Task)">
            <summary>
            Attempt to remove an item from the <see cref="T:React.IBoundedBuffer"/>.
            </summary>
            <remarks>
            <paramref name="consumer"/> must block on the returned
            <see cref="T:React.Task"/> in order for an item to be removed from the
            <see cref="T:React.IBoundedBuffer"/>.  The removed item will be passed
            to <paramref name="consumer"/> as the activation data.
            </remarks>
            <param name="consumer">
            The consumer <see cref="T:React.Task"/>.
            </param>
            <returns>
            A <see cref="T:React.Task"/> which will remove an item from the
            <see cref="T:React.IBoundedBuffer"/> on behalf of
            <paramref name="consumer"/>.
            </returns>
        </member>
        <member name="M:React.IBoundedBuffer.Put(React.Task,System.Object)">
            <summary>
            Attempt to add an item to the <see cref="T:React.IBoundedBuffer"/>.
            </summary>
            <remarks>
            <paramref name="producer"/> must block on the returned
            <see cref="T:React.Task"/> in order for <paramref name="item"/> to be
            added to the <see cref="T:React.IBoundedBuffer"/>.
            </remarks>
            <param name="producer">
            The producer <see cref="T:React.Task"/>.
            </param>
            <param name="item">
            The object to place into the <see cref="T:React.IBoundedBuffer"/>.
            </param>
            <returns>
            A <see cref="T:React.Task"/> which will add an item to the
            <see cref="T:React.IBoundedBuffer"/> on behalf of
            <paramref name="producer"/>.
            </returns>
        </member>
        <member name="P:React.IBoundedBuffer.Count">
            <summary>
            Gets the number of items in the <see cref="T:React.IBoundedBuffer"/>.
            </summary>
            <remarks>
            When <see cref="P:React.IBoundedBuffer.Count"/> is zero (0), <see cref="T:React.Task"/>s
            returned by <see cref="M:React.IBoundedBuffer.Get(React.Task)"/> will block.  When
            <see cref="P:React.IBoundedBuffer.Count"/> is equal or greater than <see cref="P:React.IBoundedBuffer.Capacity"/>,
            <see cref="T:React.Task"/>s returned by <see cref="M:React.IBoundedBuffer.Put(React.Task,System.Object)"/> will block.
            </remarks>
            <value>
            The number of items in the <see cref="T:React.IBoundedBuffer"/> as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.IBoundedBuffer.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:React.IBoundedBuffer"/>.
            </summary>
            <remarks>
            If the <see cref="P:React.IBoundedBuffer.Capacity"/> is set to zero (0), then items may
            neither be added nor removed from the buffer.  This is one way of
            temporarily disabling the buffer.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set the property to a value less than
            zero (0).
            </exception>
            <value>
            The capacity of the <see cref="T:React.IBoundedBuffer"/> as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="F:React.BoundedBuffer.Infinite">
            <summary>
            Constant used to indicate the <see cref="T:React.BoundedBuffer"/> has no
            limit on its capacity.
            </summary>
            <remarks>
            This value is defined as <see cref="F:System.Int32.MaxValue"/>.
            </remarks>
        </member>
        <member name="F:React.BoundedBuffer.ConsumerQueueId">
            <summary>
            Queue identifier for the <em>consumer</em> wait queue.
            </summary>
        </member>
        <member name="F:React.BoundedBuffer.ProducerQueueId">
            <summary>
            Queue identifier for the <em>producer</em> wait queue.
            </summary>
        </member>
        <member name="F:React.BoundedBuffer._capacity">
            <summary>The buffer capacity (max size).</summary>
        </member>
        <member name="F:React.BoundedBuffer._count">
            <summary>The number of items in the buffer.</summary>
            <remarks>
            Used only when <see cref="F:React.BoundedBuffer._items"/> is <see langword="null"/>;
            otherwise the count is obtained from <see cref="F:React.BoundedBuffer._items"/>.
            </remarks>
        </member>
        <member name="F:React.BoundedBuffer._items">
            <summary>The items added to the buffer.</summary>
        </member>
        <member name="F:React.BoundedBuffer._consumerQ">
            <summary>
            The wait queue for consumer tasks.
            </summary>
        </member>
        <member name="F:React.BoundedBuffer._producerQ">
            <summary>
            The wait queue for producere tasks.
            </summary>
        </member>
        <member name="F:React.BoundedBuffer._nConsumerReserved">
            <summary>
            The number of items reserved by consumer tasks.
            </summary>
        </member>
        <member name="M:React.BoundedBuffer.#ctor">
            <overloads>Create and initialize a BoundedBuffer.</overloads>
            <summary>
            Create an empty, unnamed <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <remarks>
            The <see cref="T:React.BoundedBuffer"/> will have a capacity of
            zero (0) items.
            </remarks>
        </member>
        <member name="M:React.BoundedBuffer.#ctor(System.String)">
            <summary>
            Create an empty <see cref="T:React.BoundedBuffer"/> having the specified
            name.
            </summary>
            <remarks>
            The <see cref="T:React.BoundedBuffer"/> will have a capacity of
            zero (0) items.
            </remarks>
            <param name="name">The name.</param>
        </member>
        <member name="M:React.BoundedBuffer.#ctor(System.Int32)">
            <summary>
            Create an empty, unnamed <see cref="T:React.BoundedBuffer"/> having
            the specified capacity.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="maxSize"/> is less than zero.
            </exception>
            <param name="maxSize">The buffer capacity.</param>
        </member>
        <member name="M:React.BoundedBuffer.#ctor(System.String,System.Int32)">
            <summary>
            Create an empty <see cref="T:React.BoundedBuffer"/> having the specified
            name and capacity.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="maxSize"/> is less than zero.
            </exception>
            <param name="name">The name.</param>
            <param name="maxSize">The buffer capacity.</param>
        </member>
        <member name="M:React.BoundedBuffer.Get(React.Task)">
            <summary>
            Attempt to remove an item from the <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <remarks>
            <paramref name="consumer"/> must block on the returned
            <see cref="T:React.Task"/> in order for an item to be removed from the
            <see cref="T:React.BoundedBuffer"/>.  The removed item will be passed
            to <paramref name="consumer"/> as the activation data.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="consumer"/> is <see langword="null"/>.
            </exception>
            <param name="consumer">
            The consumer <see cref="T:React.Task"/>.
            </param>
            <returns>
            A <see cref="T:React.Task"/> which will remove an item from the
            <see cref="T:React.BoundedBuffer"/> on behalf of
            <paramref name="consumer"/>.
            </returns>
        </member>
        <member name="M:React.BoundedBuffer.Put(React.Task,System.Object)">
            <summary>
            Attempt to add an item to the <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <remarks>
            <paramref name="producer"/> must block on the returned
            <see cref="T:React.Task"/> in order for <paramref name="item"/> to be
            added to the <see cref="T:React.BoundedBuffer"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="producer"/> is <see langword="null"/>.
            </exception>
            <param name="producer">
            The producer <see cref="T:React.Task"/>.
            </param>
            <param name="item">
            The object to place into the <see cref="T:React.BoundedBuffer"/>.
            </param>
            <returns>
            A <see cref="T:React.Task"/> which will add an item to the
            <see cref="T:React.BoundedBuffer"/> on behalf of
            <paramref name="producer"/>.
            </returns>
        </member>
        <member name="M:React.BoundedBuffer.GetBlockCount(System.Int32)">
            <summary>
            Get the number of <see cref="T:React.Task"/> instances blocked on the
            specified wait queue.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            The number of <see cref="T:React.Task"/> instances blocked on the
            queue identified by <paramref name="queueId"/>.
            </returns>
        </member>
        <member name="M:React.BoundedBuffer.GetBlockedTasks(System.Int32)">
            <summary>
            Gets the <see cref="T:React.Task"/> instances blocking on the
            wait queue identified by a queue id.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            An array of <see cref="T:React.Task"/> instances that are currently
            contained in the wait queue identified by
            <paramref name="queueId"/>.  The returned array will never
            by <see langword="null"/>.
            </returns>
        </member>
        <member name="M:React.BoundedBuffer.CreateBlockingQueue(System.Int32)">
            <summary>
            Create the specified wait queue.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not one of
            <see cref="F:React.BoundedBuffer.ConsumerQueueId"/> or <see cref="F:React.BoundedBuffer.ProducerQueueId"/>.
            </exception>
            <param name="queueId">
            The queue identifier.  Must be one of <see cref="F:React.BoundedBuffer.ConsumerQueueId"/>
            or <see cref="F:React.BoundedBuffer.ProducerQueueId"/>.
            </param>
            <returns>
            The wait queue identified by <paramref name="queueId"/>.
            </returns>
        </member>
        <member name="M:React.BoundedBuffer.ResumeWaitingConsumers">
            <summary>
            Attempt to resume as many waiting consumer <see cref="T:React.Task"/>s as
            possible.
            </summary>
        </member>
        <member name="M:React.BoundedBuffer.ResumeWaitingProducers">
            <summary>
            Attempt to resume as many waiting producer <see cref="T:React.Task"/>s as
            possible.
            </summary>
        </member>
        <member name="M:React.BoundedBuffer.GetObject(React.Task)">
            <summary>
            Called by the <see cref="T:React.Tasking.BufferGet"/> task as well as the
            <see cref="M:React.BoundedBuffer.ResumeWaitingConsumers"/> method to attempt to
            get an item from the <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <param name="consumer">The <see cref="T:React.Tasking.BufferGet"/> task.</param>
            <returns>
            <b>true</b> if <paramref name="consumer"/> was blocked.
            </returns>
        </member>
        <member name="M:React.BoundedBuffer.ConsumerGetOrFree(React.ActivationEvent)">
            <summary>
            Method used as a <see cref="T:React.DeferredDataCallback"/> delegate.
            </summary>
            <remarks>
            This method will decrement the number of consumer reservations.
            It will also either: (1) remove an object from the
            <see cref="F:React.BoundedBuffer._items"/> queue; or (2) decrement <see cref="F:React.BoundedBuffer._count"/>.
            If actual CLR objects are not being put into the
            <see cref="T:React.BoundedBuffer"/>, the <see cref="F:React.BoundedBuffer._items"/> queue should
            be <see langword="null"/> and <see cref="F:React.BoundedBuffer._count"/> is decremented.
            </remarks>
            <param name="evt">
            The <see cref="T:React.ActivationEvent"/> requesting data.
            </param>
            <returns>
            An item removed from the <see cref="F:React.BoundedBuffer._items"/> queue or
            <see langword="null"/> if actual CLR objects are not being stored
            in the <see cref="T:React.BoundedBuffer"/>.
            </returns>
        </member>
        <member name="M:React.BoundedBuffer.PutObject(React.Tasking.BufferPut)">
            <summary>
            Called by the <see cref="T:React.Tasking.BufferPut"/> task and the
            <see cref="M:React.BoundedBuffer.ResumeWaitingProducers"/> method to put a
            counted item into the buffer.
            </summary>
            <param name="producer">
            The <see cref="T:React.Tasking.BufferPut"/> task.
            </param>
            <returns>
            <b>true</b> if <paramref name="producer"/> was blocked.
            </returns>
        </member>
        <member name="M:React.BoundedBuffer.PutObject(React.Tasking.BufferPut,System.Object)">
            <summary>
            Called by the <see cref="T:React.Tasking.BufferPut"/> task and the
            <see cref="M:React.BoundedBuffer.ResumeWaitingProducers"/> method to put an
            object into the buffer.
            </summary>
            <param name="producer">
            The <see cref="T:React.Tasking.BufferPut"/> task.
            </param>
            <param name="item">
            The object to put into the <see cref="T:React.BoundedBuffer"/>.
            </param>
            <returns>
            <b>true</b> if <paramref name="producer"/> was blocked.
            </returns>
        </member>
        <member name="M:React.BoundedBuffer.PutObject(React.Tasking.BufferPut,System.Object,System.Boolean)">
            <summary>
            Attempt to put an item (either a real CLR objecr or a "virtual"
            item) into the <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <param name="producer">
            The <see cref="T:React.Tasking.BufferPut"/> task.
            </param>
            <param name="item">
            The object to put into the <see cref="T:React.BoundedBuffer"/>.
            </param>
            <param name="useItem">
            <b>true</b> if the <paramref name="item"/> parameter should be used.
            </param>
            <returns>
            <b>true</b> if <paramref name="producer"/> was blocked.
            </returns>
        </member>
        <member name="P:React.BoundedBuffer.Count">
            <summary>
            Gets the number of items in the <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <remarks>
            When <see cref="P:React.BoundedBuffer.Count"/> is zero (0), <see cref="T:React.Task"/>s
            returned by <see cref="M:React.BoundedBuffer.Get(React.Task)"/> will block.  When
            <see cref="P:React.BoundedBuffer.Count"/> is equal or greater than <see cref="P:React.BoundedBuffer.Capacity"/>,
            <see cref="T:React.Task"/>s returned by <see cref="M:React.BoundedBuffer.Put(React.Task,System.Object)"/> will block.
            </remarks>
            <value>
            The number of items in the <see cref="T:React.BoundedBuffer"/> as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.BoundedBuffer.Capacity">
            <summary>
            Gets or sets the capacity of the <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <remarks>
            If the <see cref="P:React.BoundedBuffer.Capacity"/> is set to zero (0), then items may
            neither be added nor removed from the buffer.  This is one way of
            temporarily disabling the buffer.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set the property to a value less than
            zero (0).
            </exception>
            <value>
            The capacity of the <see cref="T:React.BoundedBuffer"/> as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="T:React.Condition">
            <summary>
            A general-purpose blocking condition that can represent true/false
            situations.
            </summary>
            <remarks>
            <para>
            The <see cref="T:React.Condition"/> blocks <see cref="T:React.Task"/>s while it is in
            its false, or <em>reset</em> state.  When the <see cref="T:React.Condition"/>
            becomes true, or <em>signalled</em>, via a call to the
            <see cref="M:React.Condition.Signal"/> method, one or all blocked <see cref="T:React.Task"/>s are
            resumed.
            </para>
            <para>
            The <see cref="T:React.Condition"/> can be configured to automatically reset to
            the false state or remain true (signalled) using the
            <see cref="P:React.Condition.AutoReset"/> property.  In addition the
            <see cref="T:React.Condition"/> is configurable as to whether it will resume
            a single waiting <see cref="T:React.Task"/> or all waiting <see cref="T:React.Task"/>s
            when it is signalled via <see cref="P:React.Condition.ResumeAllOnSignal"/>.
            </para>
            <para>
            By default when resuming single <see cref="T:React.Task"/>s, the
            <see cref="T:React.Task"/>s are resumed in the order they blocked on the
            <see cref="T:React.Condition"/> (i.e. FIFO order).
            </para>
            </remarks>
        </member>
        <member name="T:React.ICondition">
            <summary>
            A general condition upon which <see cref="T:React.Task"/>s may block.
            <seealso cref="T:React.Condition"/>
            </summary>
        </member>
        <member name="M:React.ICondition.Block(React.Task)">
            <summary>
            Block (wait) on the <see cref="T:React.ICondition"/> until it becomes
            signalled.
            </summary>
            <param name="task">
            The <see cref="T:React.Task"/> that will block on this
            <see cref="T:React.ICondition"/> until it is signalled.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will waits on the condition on
            behalf of <paramref name="task"/>.
            </returns>
        </member>
        <member name="M:React.ICondition.Signal">
            <summary>
            Place the <see cref="T:React.ICondition"/> into a <em>signalled</em> state.
            </summary>
            <remarks>
            <para>
            One or more of the <see cref="T:React.Task"/>s blocking on the
            <see cref="T:React.ICondition"/> are activated.  It is up to the actual
            implementation to decide how many of the blocked
            <see cref="T:React.Task"/>s to activate.
            </para>
            <para>
            If there are no <see cref="T:React.Task"/>s blocking on this
            <see cref="T:React.ICondition"/> calling this method does nothing
            except set <see cref="P:React.ICondition.Signalled"/> to <b>true</b>.  Even that
            change will be short-lived if <see cref="P:React.ICondition.AutoReset"/> is
            <b>true</b>.
            </para>
            </remarks>
        </member>
        <member name="M:React.ICondition.Reset">
            <summary>
            Place the <see cref="T:React.ICondition"/> into a <em>reset</em> state.
            </summary>
            <remarks>
            Subsequent calls to <see cref="M:React.ICondition.Block(React.Task)"/> will block the
            <see cref="T:React.Task"/>.  Also, <see cref="P:React.ICondition.Signalled"/> will be
            set to <b>false</b>.
            </remarks>
        </member>
        <member name="P:React.ICondition.AutoReset">
            <summary>
            Gets whether or not the <see cref="T:React.ICondition"/> automatically
            resets to an unsignalled state after invoking <see cref="M:React.ICondition.Signal"/>.
            </summary>
            <remarks>
            <see cref="T:React.ICondition"/> instances that do not auto-reset, will
            remain in the signalled state until the <see cref="M:React.ICondition.Reset"/> method
            is invoked.  While signalled, the <see cref="T:React.ICondition"/> will not
            block any <see cref="T:React.Task"/>s.
            </remarks>
            <value>
            <b>true</b> if the <see cref="T:React.ICondition"/> automatically resets;
            or <b>false</b> if it must be manually reset by calling the
            <see cref="M:React.ICondition.Reset"/> method.
            </value>
        </member>
        <member name="P:React.ICondition.Signalled">
            <summary>
            Gets whether or not the <see cref="T:React.ICondition"/> is signalled.
            </summary>
            <remarks>
            When this property is <b>true</b>, the <see cref="T:React.ICondition"/>
            will not block an <see cref="T:React.Task"/> during a call to
            <see cref="M:React.ICondition.Block(React.Task)"/>.
            </remarks>
            <value>
            <b>true</b> if the <see cref="T:React.ICondition"/> is signalled; or
            <b>false</b> if it is reset.
            </value>
        </member>
        <member name="F:React.Condition._autoReset">
            <summary>
            Flag indicating whether or not the <see cref="T:React.Condition"/>
            should automatically be reset after signalling.
            </summary>
        </member>
        <member name="F:React.Condition._signalled">
            <summary>
            Flag indicating if the <see cref="T:React.Condition"/> is signalled.
            </summary>
        </member>
        <member name="F:React.Condition._resumeAll">
            <summary>
            Flag indicating whether all or just one <see cref="T:React.Task"/> will
            be resumed when the <see cref="T:React.Condition"/> is signalled.
            </summary>
        </member>
        <member name="F:React.Condition._waitQ">
            <summary>
            The wait queue used to block <see cref="T:React.Task"/> instances.
            </summary>
        </member>
        <member name="M:React.Condition.#ctor">
            <overloads>Create and initialize a Condition.</overloads>
            <summary>
            Create a new, unnamed <see cref="T:React.Condition"/>.
            </summary>
            <remarks>
            The <see cref="T:React.Condition"/> is created in the reset state, the
            <see cref="P:React.Condition.AutoReset"/> and <see cref="P:React.Condition.ResumeAllOnSignal"/>
            properties are both <b>true</b>.
            </remarks>
        </member>
        <member name="M:React.Condition.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:React.Condition"/> having the given name.
            </summary>
            <remarks>
            The <see cref="T:React.Condition"/> is created in the reset state, the
            <see cref="P:React.Condition.AutoReset"/> and <see cref="P:React.Condition.ResumeAllOnSignal"/>
            properties are both <b>true</b>.
            </remarks>
            <param name="name">The name.</param>
        </member>
        <member name="M:React.Condition.#ctor(System.Boolean)">
            <summary>
            Create an unnamed <see cref="T:React.Condition"/> specifying whether or not
            one or all blocked <see cref="T:React.Task"/>s should be resumed when
            signalled.
            </summary>
            <remarks>
            The <see cref="T:React.Condition"/> is created in the reset state and the
            <see cref="P:React.Condition.AutoReset"/> property is both <b>true</b>.
            </remarks>
            <param name="resumeAll">
            <b>true</b> if all blocked <see cref="T:React.Task"/>s are resumed; or
            <b>false</b> if the next blocked <see cref="T:React.Task"/> is resumed.
            </param>
        </member>
        <member name="M:React.Condition.#ctor(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:React.Condition"/> having the given name and
            specifying whether or not one or all blocked <see cref="T:React.Task"/>s
            should be resumed when signalled.
            </summary>
            <remarks>
            The <see cref="T:React.Condition"/> is created in the reset state and the
            <see cref="P:React.Condition.AutoReset"/> property is both <b>true</b>.
            </remarks>
            <param name="name">The name.</param>
            <param name="resumeAll">
            <b>true</b> if all blocked <see cref="T:React.Task"/>s are resumed; or
            <b>false</b> if the next blocked <see cref="T:React.Task"/> is resumed.
            </param>
        </member>
        <member name="M:React.Condition.GetBlockCount(System.Int32)">
            <summary>
            Get the number of <see cref="T:React.Task"/> instances blocked on the
            specified wait queue.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            The number of <see cref="T:React.Task"/> instances blocked on the
            queue identified by <paramref name="queueId"/>.
            </returns>
        </member>
        <member name="M:React.Condition.GetBlockedTasks(System.Int32)">
            <summary>
            Gets the <see cref="T:React.Task"/> instances blocking on the
            wait queue identified by a queue id.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            An array of <see cref="T:React.Task"/> instances that are currently
            contained in the wait queue identified by
            <paramref name="queueId"/>.  The returned array will never
            by <see langword="null"/>.
            </returns>
        </member>
        <member name="M:React.Condition.Block(React.Task)">
            <summary>
            Block (wait) on the <see cref="T:React.Condition"/> until it becomes
            signalled.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="task"/> is <see langword="null"/>.
            </exception>
            <param name="task">
            The <see cref="T:React.Task"/> that will block on this
            <see cref="T:React.Condition"/> until it is signalled.  Note that
            <paramref name="task"/> does not <em>directly</em> block on
            the <see cref="T:React.Condition"/>, rather it should block on the
            <see cref="T:React.Task"/> returned by this method (which will actually
            block on the <see cref="T:React.Condition"/>).
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will wait on this
            <see cref="T:React.Condition"/> on behalf of <paramref name="task"/>.
            </returns>
        </member>
        <member name="M:React.Condition.Signal">
            <summary>
            Place the <see cref="T:React.Condition"/> into a <em>signalled</em> state.
            </summary>
            <remarks>
            <para>
            One or more of the <see cref="T:React.Task"/>s blocking on the
            <see cref="T:React.Condition"/> are activated.  It is up to the actual
            implementation to decide how many of the blocked
            <see cref="T:React.Task"/>s to activate.
            </para>
            <para>
            If there are no <see cref="T:React.Task"/>s blocking on this
            <see cref="T:React.Condition"/> calling this method does nothing
            except set <see cref="P:React.Condition.Signalled"/> to <b>true</b>.  Even that
            change will be short-lived if <see cref="P:React.Condition.AutoReset"/> is
            <b>true</b>.
            </para>
            </remarks>
        </member>
        <member name="M:React.Condition.Reset">
            <summary>
            Place the <see cref="T:React.Condition"/> into a <em>reset</em> state.
            </summary>
            <remarks>
            Subsequent calls to <see cref="M:React.Condition.Block(React.Task)"/> will block the
            <see cref="T:React.Task"/>.  Also, <see cref="P:React.Condition.Signalled"/> will be
            set to <b>false</b>.
            </remarks>
        </member>
        <member name="M:React.Condition.ResumeNext">
            <summary>
            Invoked by the <see cref="M:React.Condition.Signal"/> method to resume the next
            waiting <see cref="T:React.Task"/>.
            </summary>
        </member>
        <member name="M:React.Condition.ResumeAll">
            <summary>
            Invoked by the <see cref="M:React.Condition.Signal"/> method to resume all
            waiting <see cref="T:React.Task"/>s.
            </summary>
        </member>
        <member name="M:React.Condition.BlockTask(React.Task)">
            <summary>
            Called by a <see cref="T:React.Tasking.WaitForCondition"/> task to block on the
            <see cref="T:React.Condition"/>.
            </summary>
            <remarks>
            This method must be called only if the <see cref="T:React.Condition"/> is
            not signalled (e.g. <see cref="P:React.Condition.Signalled"/> is <b>false</b>).
            </remarks>
            <param name="task">
            The <see cref="T:React.Tasking.WaitForCondition"/> task to block.
            </param>
        </member>
        <member name="P:React.Condition.ResumeAllOnSignal">
            <summary>
            Gets or sets whether all blocked <see cref="T:React.Task"/>s are resumed
            when the <see cref="T:React.Condition"/> is signalled.
            </summary>
            <value>
            <b>true</b> if all blocked <see cref="T:React.Task"/>s are resumed; or
            <b>false</b> if the next blocked <see cref="T:React.Task"/> is resumed.
            </value>
        </member>
        <member name="P:React.Condition.AutoReset">
            <summary>
            Gets whether or not the <see cref="T:React.Condition"/> automatically
            resets to an unsignalled state after invoking <see cref="M:React.Condition.Signal"/>.
            </summary>
            <remarks>
            <see cref="T:React.Condition"/> instances that do not auto-reset, will
            remain in the signalled state until the <see cref="M:React.Condition.Reset"/> method
            is invoked.  While signalled, the <see cref="T:React.Condition"/> will not
            block any <see cref="T:React.Task"/>s.
            </remarks>
            <value>
            <b>true</b> if the <see cref="T:React.Condition"/> automatically resets;
            or <b>false</b> if it must be manually reset by calling the
            <see cref="M:React.Condition.Reset"/> method.
            </value>
        </member>
        <member name="P:React.Condition.Signalled">
            <summary>
            Gets whether or not the <see cref="T:React.Condition"/> is signalled.
            </summary>
            <remarks>
            When this property is <b>true</b>, the <see cref="T:React.Condition"/>
            will not block an <see cref="T:React.Task"/> during a call to
            <see cref="M:React.Condition.Block(React.Task)"/>.
            </remarks>
            <value>
            <b>true</b> if the <see cref="T:React.Condition"/> is signalled; or
            <b>false</b> if it is reset.
            </value>
        </member>
        <member name="T:React.Consumable">
            <summary>
            A concrete implementation of <see cref="T:React.IConsumable"/>.
            </summary>
        </member>
        <member name="T:React.IConsumable">
            <summary>
            An object that can be used as a consumable in the simulation.
            <seealso cref="T:React.Resource"/>
            </summary>
            <remarks>
            <para>
            In reality, an <see cref="T:React.IConsumable"/> represents a <em>set</em> or
            <em>pool</em> of consumables that may be acquired by <see cref="T:React.Task"/>s
            during the course of a simulation run.  Each time a consumable unit is
            acquired, there is one less available to dispense to other
            <see cref="T:React.Task"/>s.  When all consumable units have been dispensed,
            the next <see cref="T:React.Task"/> to call one of the <b>Acquire</b> methods
            will be blocked until such time as the <see cref="T:React.IConsumable"/> has
            been <em>re-supplied</em>.  This is the primary difference between
            <see cref="T:React.IConsumable"/> and <see cref="T:React.IResource"/>:
            <see cref="T:React.IConsumable"/> instances are never released, rather at
            some point during the simulation it may become necessary to
            add units to the <see cref="T:React.IConsumable"/> so that it may continue
            to serve <see cref="T:React.Task"/> requests.
            </para>
            <para>
            This interface represents the minimum functionality required to act as
            a consumable pool in a React.NET simulation.  Most applications can use
            the <see cref="T:React.Consumable"/> class rather than implementing this
            interface.
            </para>
            </remarks>
        </member>
        <member name="M:React.IConsumable.Acquire(React.Task)">
            <overloads>
            Attempt to acquire one or more consumable units from the pool.
            </overloads>
            <summary>
            Attempt to acquire a single consumable unit from the pool.
            </summary>
            <param name="requestor">
            The <see cref="T:React.Task"/> that is requesting to acquire a consumable
            unit from the pool.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will acquire a consumable unit from
            the pool on behalf of <paramref name="requestor"/>.
            </returns>
        </member>
        <member name="M:React.IConsumable.Acquire(React.Task,System.Int32)">
            <summary>
            Attempts to acquire the specified number of consumable units from
            the pool.
            </summary>
            <param name="requestor">
            The <see cref="T:React.Task"/> that is requesting one or more consumable
            units  from the pool.
            </param>
            <param name="quantity">
            The number of units requested.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will acquire the given number of
            consumable units from the pool on behalf of
            <paramref name="requestor"/>.
            </returns>
        </member>
        <member name="M:React.IConsumable.Resupply(React.Task,System.Int32)">
            <summary>
            Adds consumable units to the <see cref="T:React.IConsumable"/>.
            </summary>
            <param name="task">
            The <see cref="T:React.Task"/> requesting the <see cref="T:React.IConsumable"/>
            be re-supplied.
            </param>
            <param name="quantity">
            The number of units to add to the <see cref="T:React.IConsumable"/>.
            </param>
            <returns>
            The <see cref="T:React.Task"/> that will re-supply the
            <see cref="T:React.IConsumable"/> on behalf of <paramref name="task"/>.
            </returns>
        </member>
        <member name="P:React.IConsumable.Count">
            <summary>
            Gets the number of consumable units currently available.
            </summary>
            <value>
            The number of unit available as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="F:React.Consumable._count">
            <summary>
            The number of available consumable units.
            </summary>
        </member>
        <member name="F:React.Consumable._waitQ">
            <summary>
            The wait queue used to block <see cref="T:React.Tasking.AcquireConsumable"/> tasks.
            </summary>
        </member>
        <member name="M:React.Consumable.#ctor">
            <overloads>Create and initialize a new Consumable.</overloads>
            <summary>
            Create an unnamed <see cref="T:React.Consumable"/> which contains
            no consumable units.
            </summary>
        </member>
        <member name="M:React.Consumable.#ctor(System.String)">
            <summary>
            Create a <see cref="T:React.Consumable"/> having the given name and
            containing no consumable units.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:React.Consumable.#ctor(System.Int32)">
            <summary>
            Create an unnamed <see cref="T:React.Consumable"/> that contains the
            specified number of consumable units.
            </summary>
            <param name="quantity">The number of consumable units.</param>
        </member>
        <member name="M:React.Consumable.#ctor(System.String,System.Int32)">
            <summary>
            Create a <see cref="T:React.Consumable"/> having the given name
            and containing the specified number of consumable units.
            </summary>
            <param name="name">The name.</param>
            <param name="quantity">The number of consumable units.</param>
        </member>
        <member name="M:React.Consumable.Acquire(React.Task)">
            <overloads>
            Attempt to acquire one or more consumable units from the pool.
            </overloads>
            <summary>
            Attempt to acquire a single consumable unit from the pool.
            </summary>
            <param name="requestor">
            The <see cref="T:React.Task"/> that is requesting to acquire a consumable
            unit from the pool.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will acquire a consumable unit from
            the pool on behalf of <paramref name="requestor"/>.
            </returns>
        </member>
        <member name="M:React.Consumable.Acquire(React.Task,System.Int32)">
            <summary>
            Attempts to acquire the specified number of consumable units from
            the pool.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="requestor"/> is <see langword="null"/>.
            </exception>
            <param name="requestor">
            The <see cref="T:React.Task"/> that is requesting one or more consumable
            units  from the pool.
            </param>
            <param name="quantity">
            The number of units requested.
            </param>
            <returns>
            The <see cref="T:React.Task"/> which will acquire the given number of
            consumable units from the pool on behalf of
            <paramref name="requestor"/>.
            </returns>
        </member>
        <member name="M:React.Consumable.Resupply(React.Task,System.Int32)">
            <summary>
            Adds consumable units to the <see cref="T:React.IConsumable"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="task"/> is <see langword="null"/>.
            </exception>
            <param name="task">
            The <see cref="T:React.Task"/> requesting the <see cref="T:React.IConsumable"/>
            be re-supplied.
            </param>
            <param name="quantity">
            The number of units to add to the <see cref="T:React.IConsumable"/>.
            </param>
            <returns>
            The <see cref="T:React.Task"/> that will re-supply the
            <see cref="T:React.IConsumable"/> on behalf of <paramref name="task"/>.
            </returns>
        </member>
        <member name="M:React.Consumable.GetBlockCount(System.Int32)">
            <summary>
            Get the number of <see cref="T:React.Task"/> instances blocked on the
            specified wait queue.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            The number of <see cref="T:React.Task"/> instances blocked on the
            queue identified by <paramref name="queueId"/>.
            </returns>
        </member>
        <member name="M:React.Consumable.GetBlockedTasks(System.Int32)">
            <summary>
            Gets the <see cref="T:React.Task"/> instances blocking on the
            wait queue identified by a queue id.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            An array of <see cref="T:React.Task"/> instances that are currently
            contained in the wait queue identified by
            <paramref name="queueId"/>.  The returned array will never
            by <see langword="null"/>.
            </returns>
        </member>
        <member name="M:React.Consumable.ResumeWaiting">
            <summary>
            Resume as many blocked <see cref="T:React.Task"/>s as there are available
            consumable items to satisfy requests.
            </summary>
        </member>
        <member name="M:React.Consumable.RemoveUnits(React.Tasking.AcquireConsumable)">
            <summary>
            Removes consumable units from the <see cref="T:React.Consumable"/>.
            </summary>
            <param name="task">
            The <see cref="T:React.Tasking.AcquireConsumable"/> task that has requested one
            or more consumable units.
            </param>
            <returns>
            <b>true</b> if the requested number of units were available; or
            <b>false</b> if the request could not be immediately satisfied and
            <paramref name="task"/> was blocked.
            </returns>
        </member>
        <member name="M:React.Consumable.AddUnits(System.Int32)">
            <summary>
            Adds consumable units to the <see cref="T:React.Consumable"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="quantity"/> is negative.
            </exception>
            <param name="quantity">
            The number of units to add to the <see cref="T:React.Consumable"/>.
            </param>
        </member>
        <member name="P:React.Consumable.Count">
            <summary>
            Gets the number of consumable units currently available.
            </summary>
            <value>
            The number of unit available as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="T:React.ProcessSteps">
             <summary>
             Delegate for the generator method that yields one or more
             <see cref="T:React.Task"/>s that make up a process's sequence of steps.
             </summary>
             <remarks>
             A <see cref="T:React.ProcessSteps"/> delegate may be passed to the
             <see cref="M:React.Process.#ctor(React.Simulation,React.ProcessSteps)"/> or
             <see cref="M:React.Process.#ctor(React.Simulation,React.ProcessSteps,System.Object)"/> constructor to
             create a <see cref="T:React.Process"/> via <em>delegation</em> rather than
             through <em>derivation</em> (i.e. sub-classing and overriding the
             <see cref="M:React.Process.GetProcessSteps"/> method).
             </remarks>
             <example>
             <para>
             This example shows how to create two <see cref="T:React.Process"/> instances
             using delegation via a <see cref="T:React.ProcessSteps"/> delegate.  It also
             shows how client data can be passed into the delegate.
             </para>
             <para><code><![CDATA[
             public void CreateAProcess(Simulation sim)
             {
                 Process pa = new Process(sim, StepsMethod, 1000L);
                 pa.Name = "A";
                 pa.Activate(null);
            
                 Process pb = new Process(sim, StepsMethod, 500L);
                 pb.Name = "B";
                 pb.Activate(null, 1L);
             
                 sim.Run();
             }
             
             private IEnumerator<Task> StepsMethod(Process p, object data)
             {
                 long delayTime = (long)data;
                 Console.WriteLine("{0}: Hello, the time is {1}", p.Name, p.Now);
                 yield return p.Delay(delayTime);
                 Console.WriteLine("{0}: And now the time is {1}", p.Name, p.Now);
                 yield break;
             }]]></code></para>
             <para>
             The output should look something like what is shown below.
             </para>
             <para><code>
             A: Hello, the time is 0
             B: Hello, the time is 1
             B: And now the time is 501
             A: And now the time is 1000</code></para>
             </example>
             <param name="process">
             The <see cref="T:React.Process"/> the <see cref="T:React.ProcessSteps"/> is working
             on behalf of.
             </param>
             <param name="data">
             User defined data for <see cref="T:React.ProcessSteps"/> method.  May be
             <see langword="null"/>.
             </param>
        </member>
        <member name="T:React.Process">
            <summary>
            A <see cref="T:React.Task"/> implementation that uses an iterator method to
            support simulating complex or long-running processes.
            </summary>
        </member>
        <member name="T:React.Task">
            <summary>
            An object that carries out some processing during the course of
            running a <see cref="P:React.Task.Simulation"/>.
            <seealso cref="T:React.Process"/>
            </summary>
        </member>
        <member name="F:React.Task.NotScheduled">
            <summary>
            Schedule time returned when the <see cref="T:React.Task"/> is not
            scheduled to execute.
            </summary>
            <remarks>
            This value is identical to
            <see cref="F:React.ActivationEvent.NotScheduled"/>.
            </remarks>
        </member>
        <member name="F:React.Task._sim">
            <summary>
            The simulation context under which the <see cref="T:React.Task"/> runs.
            </summary>
        </member>
        <member name="F:React.Task._waitQ">
            <summary>
            The wait queue used to block <see cref="T:React.Task"/>s.
            </summary>
        </member>
        <member name="F:React.Task._blockedOn">
            <summary>
            The Task instances upon which this task is blocked.
            </summary>
        </member>
        <member name="F:React.Task._priority">
            <summary>
            The task priority.
            </summary>
        </member>
        <member name="F:React.Task._elevated">
            <summary>
            The temporary elevated task priority.
            </summary>
        </member>
        <member name="F:React.Task._cancelFlag">
            <summary>
            Flag indicating the task has been canceled.
            </summary>
        </member>
        <member name="F:React.Task._intFlag">
            <summary>
            Flag indicating the task has been interrupted.
            </summary>
        </member>
        <member name="F:React.Task._actevt">
            <summary>
            The <see cref="T:React.ActivationEvent"/> which invoked the task.
            </summary>
        </member>
        <member name="M:React.Task.#ctor(React.Simulation)">
            <summary>
            Create a new <see cref="T:React.Task"/> instance that will run under under
            the given simulation context.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="sim"/> is <see langword="null"/>.
            </exception>
            <param name="sim">The simulation context.</param>
        </member>
        <member name="M:React.Task.GetBlockCount(System.Int32)">
            <summary>
            Get the number of <see cref="T:React.Task"/> instances blocked on the
            specified wait queue.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            The number of <see cref="T:React.Task"/> instances blocked on the
            queue identified by <paramref name="queueId"/>.
            </returns>
        </member>
        <member name="M:React.Task.GetBlockedTasks(System.Int32)">
            <summary>
            Gets the <see cref="T:React.Task"/> instances blocking on the
            wait queue identified by a queue id.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="queueId"/> is not a valid queue identifier.
            </exception>
            <param name="queueId">The queue identifier.</param>
            <returns>
            An array of <see cref="T:React.Task"/> instances that are currently
            contained in the wait queue identified by
            <paramref name="queueId"/>.  The returned array will never
            by <see langword="null"/>.
            </returns>
        </member>
        <member name="M:React.Task.ClearInterrupt">
            <summary>
            Clear the interrupt state.
            </summary>
            <remarks>
            The <see cref="T:React.Task"/> will automatically invoke this method after
            it's <see cref="M:React.Task.ExecuteTask(System.Object,System.Object)"/> method runs.
            </remarks>
        </member>
        <member name="M:React.Task.ElevatePriority(System.Int32)">
            <summary>
            Temporarily elevate the <see cref="T:React.Task"/>'s priority.
            </summary>
            <remarks>
            This method can both elevate (raise) the priority or reduce (lower)
            the priority.  If <paramref name="newPriority"/> is greater than
            <see cref="P:React.Task.Priority"/>, the task prioritiy is raised; if
            <paramref name="newPriority"/> is lower than
            <see cref="P:React.Task.Priority"/>, the task prioritiy is lowered.
            </remarks>
            <param name="newPriority">
            The new task priority.
            </param>
        </member>
        <member name="M:React.Task.RestorePriority">
            <summary>
            Restores the <see cref="T:React.Task"/>'s priority to its non-elevated
            level.
            </summary>
            <returns>
            The non-elevated task priority.
            </returns>
        </member>
        <member name="M:React.Task.WaitOnTask(React.Task)">
            <summary>
            Wait the given <see cref="T:React.Task"/> while it executes.
            </summary>
            <remarks>
            <para>
            <paramref name="task"/> must not already be scheduled because this
            method will invoke its <see cref="M:React.Task.Activate(System.Object,System.Int64)"/>
            method.
            </para>
            <para>
            The method is simply shorthand for
            <code>
            task.Activate(this, 0L);
            task.Block(this);</code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="task"/> is <see langword="null"/>.
            </exception>
            <param name="task">
            The <see cref="T:React.Task"/> to wait upon while it runs.
            </param>
        </member>
        <member name="M:React.Task.WaitOnTask(React.Task,System.Int32)">
            <summary>
            Wait the given <see cref="T:React.Task"/> while it executes at the
            specified priority.
            </summary>
            <remarks>
            <para>
            <paramref name="task"/> must not already be scheduled because this
            method will invoke its <see cref="M:React.Task.Activate(System.Object,System.Int64,System.Int32)"/>
            method.
            </para>
            <para>
            The method is simply shorthand for
            <code>
            task.Activate(this, 0L, priority);
            task.Block(this);</code>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="task"/> is <see langword="null"/>.
            </exception>
            <param name="task">
            The <see cref="T:React.Task"/> to wait upon while it runs.
            </param>
            <param name="priority">
            The priority to activate <paramref name="task"/>.
            </param>
        </member>
        <member name="M:React.Task.Activate(System.Object)">
            <overloads>Activates (schedules) the Task to run.</overloads>
            <summary>
            Activates the <see cref="T:React.Task"/> at the current simulation time.
            </summary>
            <param name="activator">
            The object that is activating the <see cref="T:React.Task"/>.  May be
            <see langword="null"/>
            </param>
        </member>
        <member name="M:React.Task.Activate(System.Object,System.Int64)">
            <summary>
            Activates the <see cref="T:React.Task"/> at some time in the future.
            </summary>
            <param name="activator">
            The object that is activating the <see cref="T:React.Task"/>.  May be
            <see langword="null"/>
            </param>
            <param name="relTime">
            The time relative to the current time when the <see cref="T:React.Task"/>
            should be scheduled to run.  If this value is zero (0), this
            method is the same as <see cref="M:React.Task.Activate(System.Object)"/>.
            </param>
        </member>
        <member name="M:React.Task.Activate(System.Object,System.Int64,System.Int32)">
            <summary>
            Activates the <see cref="T:React.Task"/> at some time in the future and
            with the given priority.
            </summary>
            <param name="activator">
            The object that is activating the <see cref="T:React.Task"/>.  May be
            <see langword="null"/>.
            </param>
            <param name="relTime">
            The time relative to the current time when the <see cref="T:React.Task"/>
            should be scheduled to run. 
            </param>
            <param name="priority">
            The task priority.  Higher values indicate higher priorities.
            </param>
        </member>
        <member name="M:React.Task.Activate(System.Object,System.Int64,System.Object)">
            <summary>
            Activates the <see cref="T:React.Task"/> at some time in the future and
            with the given client-specific data.
            </summary>
            <param name="activator">
            The object that is activating the <see cref="T:React.Task"/>.  May be
            <see langword="null"/>
            </param>
            <param name="relTime">
            The time relative to the current time when the <see cref="T:React.Task"/>
            should be scheduled to run.
            </param>
            <param name="data">
            An object containing client-specific data for the
            <see cref="T:React.Task"/>.
            </param>
        </member>
        <member name="M:React.Task.Activate(System.Object,System.Int64,System.Object,System.Int32)">
            <summary>
            Activates the <see cref="T:React.Task"/> at some time in the future and
            specifying the task priority and client-specific task data.
            </summary>
            <remarks>
            <see cref="T:React.Task"/> implementations can normally treat this method
            as the "designated" version of the <b>Activate</b> method, which
            all other versions of <b>Activate</b> invoke.  That, in fact, is
            how the <see cref="T:React.Task"/> class implements <b>Activate</b>.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If <see cref="P:React.Task.Interrupted"/> is <b>true</b>.  Before calling
            this method, ensure that the <see cref="T:React.Task"/> is no longer
            in an interrupted state.
            </exception>
            <param name="activator">
            The object that is activating the <see cref="T:React.Task"/>.  May be
            <see langword="null"/>.
            </param>
            <param name="relTime">
            The time relative to the current time when the <see cref="T:React.Task"/>
            should be scheduled to run.
            </param>
            <param name="data">
            An object containing client-specific data for the
            <see cref="T:React.Task"/>.
            </param>
            <param name="priority">
            The task priority.  Higher values indicate higher priorities.
            </param>
        </member>
        <member name="M:React.Task.ResumeNext">
            <summary>
            Resume the next waiting <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            <para>
            The next waiting <see cref="T:React.Task"/> is resumed with <c>this</c>
            as the activator and <see langword="null"/> for the activation
            data.
            </para>
            <para>
            Calling this method is identical to calling
            <code>ResumeNext(this, null);</code>
            </para>
            </remarks>
        </member>
        <member name="M:React.Task.ResumeNext(System.Object)">
            <summary>
            Resume the next waiting <see cref="T:React.Task"/> with the specified
            activation data.
            </summary>
            <remarks>
            <para>
            The next waiting <see cref="T:React.Task"/> is resume with <c>this</c>
            as the activator.
            </para>
            <para>
            Calling this method is identical to calling
            <code>ResumeNext(this, data);</code>
            </para>
            </remarks>
            <param name="data">The activation data.</param>
        </member>
        <member name="M:React.Task.ResumeNext(System.Object,System.Object)">
            <summary>
            Resume the next waiting <see cref="T:React.Task"/> specifying the
            activator and activation data.
            </summary>
            <param name="activator">The activator.</param>
            <param name="data">The activation data.</param>
        </member>
        <member name="M:React.Task.ResumeAll">
            <summary>
            Resume all waiting <see cref="T:React.Task"/>s.
            </summary>
            <remarks>
            <para>
            All waiting <see cref="T:React.Task"/>s are resumed with <c>this</c> as the
            activator and <see langword="null"/>as the activation data.
            </para>
            <para>
            Calling this method is identical to calling
            <code>ResumeAll(this, null);</code>
            </para>
            </remarks>
        </member>
        <member name="M:React.Task.ResumeAll(System.Object)">
            <summary>
            Resume all waiting <see cref="T:React.Task"/>s passing each the specified
            activation data.
            </summary>
            <remarks>
            <para>
            All waiting <see cref="T:React.Task"/>s are resumed with <c>this</c> as the
            activator.
            </para>
            <para>
            Calling this method is identical to calling
            <code>ResumeAll(this, data);</code>
            </para>
            </remarks>
            <param name="data">The activation data.</param>
        </member>
        <member name="M:React.Task.ResumeAll(System.Object,System.Object)">
            <summary>
            Resume all waiting <see cref="T:React.Task"/>s specifying the activator and
            the activation data.
            </summary>
            <param name="activator">The activator.</param>
            <param name="data">The activation data.</param>
        </member>
        <member name="M:React.Task.ResumeTask(React.Task,System.Object,System.Object)">
            <summary>
            Resume the specified <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            <para>
            This method is invoked for each blocked <see cref="T:React.Task"/> that is
            to be resumed by calling one of the <b>ResumeNext</b> or
            <b>ResumeAll</b> methods.  Subclasses may override this method to
            alter the way <paramref name="task"/> is activated.
            </para>
            <para>
            The default implementation simply performs
            </para>
            <para><code>task.Activate(activator, 0L, data);</code></para>
            <para>
            Client code should normally never need to invoke this method
            directly.
            </para>
            <para>
            <b>By the time this method is called, <paramref name="task"/> has
            already been removed from <see cref="P:React.Task.WaitQueue"/>.</b>
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="task"/> is <see langword="null"/>.
            </exception>
            <param name="task">
            The <see cref="T:React.Task"/> to resume (activate).
            </param>
            <param name="activator">
            The activator that will be passed to <paramref name="task"/> upon
            its activation.
            </param>
            <param name="data">
            Optional activation data passed to <paramref name="task"/>.
            </param>
        </member>
        <member name="M:React.Task.Block(React.Task)">
            <summary>
            Block the specified <see cref="T:React.Task"/> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="task"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="task"/> attempts to block itself.  For
            example, if code like <c>this.Block(this);</c> is executed.
            </exception>
            <param name="task">
            The <see cref="T:React.Task"/> to block.
            </param>
        </member>
        <member name="M:React.Task.Unblock(React.Task)">
            <summary>
            Unblock, but do not resume, the specified <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            <para>
            This method is used to remove <paramref name="task"/> from the
            <see cref="T:React.Task"/> instance's wait list without resuming the
            execution of <paramref name="task"/>.  The most common use for
            invoking <see cref="M:React.Task.Unblock(React.Task)"/> is to stop a <see cref="T:React.Task"/>
            from waiting after it has been resumed by another means (e.g. a
            different simulation object has resumed <paramref name="task"/>).
            </para>
            <para>
            Again, it's very important to realize that <see cref="M:React.Task.Unblock(React.Task)"/>
            does <b>not</b> activate <paramref name="task"/>.
            </para>
            <para>
            This method does nothing if <paramref name="task"/> equals
            <c>this</c> or is <see langword="null"/>.
            </para>
            </remarks>
            <param name="task">
            The <see cref="T:React.Task"/> which will stop blocking on this
            <see cref="T:React.Task"/> instance.
            </param>
        </member>
        <member name="M:React.Task.ClearBlocks">
            <summary>
            Stop blocking on all <see cref="T:React.Task"/>s currently being blocked
            upon.
            </summary>
        </member>
        <member name="M:React.Task.UpdateBlockingLinks(React.Task,System.Boolean)">
            <summary>
            Update the association between this <see cref="T:React.Task"/> and the
            <see cref="T:React.Task"/> upon which it is blocking.
            </summary>
            <param name="blocker">
            The <see cref="T:React.Task"/> upon which this <see cref="T:React.Task"/> is
            blocking.
            </param>
            <param name="blocked">
            <b>true</b> if <paramref name="blocker"/> is blocking this
            <see cref="T:React.Task"/>; or <b>false</b> if <paramref name="blocker"/>
            is unblocking this <see cref="T:React.Task"/>.
            </param>
        </member>
        <member name="M:React.Task.Cancel">
            <summary>
            Cancel the <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            <para>
            A canceled task will not be executed.  The associated
            <see cref="T:React.ActivationEvent"/> (if any) is also canceled.
            </para>
            <para>
            Callers should note that once a <see cref="T:React.Task"/> is canceled
            it cannot be un-canceled, and therefore can never be
            re-activated.
            </para>
            </remarks>
        </member>
        <member name="M:React.Task.Interrupt(System.Object)">
            <summary>
            Interrupt a blocked <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            <para>
            When an blocked <see cref="T:React.Task"/> is interrupted, it should be
            activated at <see cref="P:React.Simulation.Now"/>.  When the
            <see cref="T:React.Task"/> resumes running, it can check the 
            <see cref="P:React.Task.Interrupted"/> property to determine how to proceed.
            The <paramref name="interruptor"/> is available to the
            <see cref="T:React.Task"/> as the <em>activator</em> parameter when
            <see cref="M:React.Task.ExecuteTask(System.Object,System.Object)"/> is invoked.
            </para>
            <para>
            The <see cref="T:React.Task"/> must handle the interrupt and clear the
            interrupt flag by calling <see cref="M:React.Task.ClearInterrupt"/> before
            <see cref="M:React.Task.Interrupt(System.Object)"/> or
            <see cref="M:React.Task.Activate(System.Object,System.Int64,System.Object,System.Int32)"/> (or any of the
            other <b>Activate</b> methods) may be called again.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an <see cref="T:React.Task"/> attempts to interrupt itself.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="interruptor"/> is <see langword="null"/>.
            </exception>
            <param name="interruptor">
            The object which caused the interrupt.  This should normally be
            the object that is invoking this method.
            </param>
        </member>
        <member name="M:React.Task.ExecuteTask(System.Object,System.Object)">
            <summary>
            Perform the task actions.
            </summary>
            <remarks>
            This method is invoked by the <see cref="T:React.Task"/>'s associated
            <see cref="T:React.ActivationEvent"/> when the
            <see cref="T:React.ActivationEvent"/> is fired.  Normally this method
            should not be called by client code.
            </remarks>
            <param name="activator">
            The object that activated this <see cref="T:React.Task"/>.
            </param>
            <param name="data">
            Optional data for the <see cref="T:React.Task"/>.
            </param>
        </member>
        <member name="M:React.Task.CancelPending(React.ActivationEvent)">
            <summary>
            Cancel the pending <see cref="T:React.ActivationEvent"/>.
            </summary>
            <param name="evt">
            The <see cref="T:React.ActivationEvent"/> to cancel.
            </param>
        </member>
        <member name="M:React.Task.RunFromActivationEvent(React.ActivationEvent)">
            <summary>
            Invoked by an <see cref="T:React.ActivationEvent"/> to execute the
            <see cref="T:React.Task"/>.
            </summary>
            <param name="evt">
            The <see cref="T:React.ActivationEvent"/> that triggered this
            <see cref="T:React.Task"/> to execute.
            </param>
        </member>
        <member name="P:React.Task.Simulation">
            <summary>
            Gets the simulation context under which the <see cref="T:React.Task"/> is
            running.
            </summary>
            <value>
            The simulation context as a <see cref="P:React.Task.Simulation"/>.
            </value>
        </member>
        <member name="P:React.Task.Now">
            <summary>
            Gets the current simulation time.
            </summary>
            <remarks>
            This is really just a shortcut for <c>task.Simulation.Now</c>.
            </remarks>
            <value>
            The current simulation time as an <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="P:React.Task.IsScheduled">
            <summary>
            Gets whether or not the <see cref="T:React.Task"/> has been scheduled to
            run.
            </summary>
            <remarks>
            A <see cref="T:React.Task"/> that has been activated using one of the
            <b>Activate</b> methods will be scheduled to run.  Therefore after
            calling <b>Activate</b>, <see cref="P:React.Task.IsScheduled"/> should always
            return <b>true</b>.
            </remarks>
            <value>
            <b>true</b> if the <see cref="T:React.Task"/> has been scheduled.
            </value>
        </member>
        <member name="P:React.Task.ScheduledTime">
            <summary>
            Gets the time the <see cref="T:React.Task"/> is scheduled to run.
            </summary>
            <remarks>
            If the <see cref="T:React.Task"/> is not scheduled to run, this
            property will be <see cref="F:React.Task.NotScheduled"/>.
            </remarks>
            <value>
            The simulation time the <see cref="T:React.Task"/> will run as an
            <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="P:React.Task.IsBlocked">
            <summary>
            Gets whether or not the <see cref="T:React.Task"/> is blocked (that is,
            waiting on other <see cref="T:React.Task"/>s)
            </summary>
            <remarks>
            <para>
            Immediately after a call to one of the <b>Activate</b> methods,
            this property will normally be <b>false</b> as <b>Activate</b>
            invokes <see cref="M:React.Task.ClearBlocks"/>.  Subsequent calls to
            <see cref="M:React.Task.WaitOnTask(React.Task)"/> or <see cref="M:React.Task.WaitOnTask(React.Task,System.Int32)"/>
            will cause this property to be <b>true</b>.
            </para>
            <para>
            Remember <see cref="P:React.Task.IsBlocked"/> is used to check if this
            <see cref="T:React.Task"/> is waiting on other <see cref="T:React.Task"/>s
            <b>not</b> to check if this <see cref="T:React.Task"/> is blocking other
            <see cref="T:React.Task"/>s (e.g. other <see cref="T:React.Task"/>s are waiting on
            this <see cref="T:React.Task"/>).
            </para>
            </remarks>
            <value>
            <b>true</b> if this <see cref="T:React.Task"/> is blocking on one or more
            <see cref="T:React.Task"/>s.
            </value>
        </member>
        <member name="P:React.Task.WaitQueue">
            <summary>
            Gets the <see cref="T:React.Queue.IQueue`1"/> that contains all the
            <see cref="T:React.Task"/>s which are blocking on this <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            The wait queue is created on demand when this property is first
            accessed. The <see cref="M:React.Blocking`1.CreateBlockingQueue(System.Int32)"/>
            method is used to create the wait queue.
            </remarks>
            <value>
            The <see cref="T:React.Queue.IQueue`1"/> that contains the
            <see cref="T:React.Task"/>s blocking on this <see cref="T:React.Task"/>.
            </value>
        </member>
        <member name="P:React.Task.Priority">
            <summary>
            Gets the current task priority.
            </summary>
            <remarks>
            <para>
            If the priority was elevated using <see cref="M:React.Task.ElevatePriority(System.Int32)"/>,
            then <see cref="P:React.Task.Priority"/> will return the elevated task priority.
            The only way to get the task's default (non-elevated) priority is
            as follows.
            </para>
            <para>
            <code>
            // Get the current (possibly elevated) priority.
            int currpriority = task.Priority;
            // Restore the default priority which also returns the default priority.
            int defpriority = task.RestorePriority();
            // Return the priority to it's possibly elevated level.
            task.ElevatePriority(currpriority);</code></para>
            </remarks>
            <value>
            The current task priority as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Task.Canceled">
            <summary>
            Gets whether or not the <see cref="T:React.Task"/> was canceled.
            </summary>
            <remarks>
            This property will be <b>true</b> after the <see cref="M:React.Task.Cancel"/>
            method is invoked.
            </remarks>
            <value>
            <b>true</b> if the <see cref="T:React.Task"/> was canceled.
            </value>
        </member>
        <member name="P:React.Task.Interrupted">
            <summary>
            Gets whether or not the <see cref="T:React.Task"/> was interrupted.
            </summary>
            <remarks>
            This value is automatically reset to <b>false</b> after the
            <see cref="T:React.Task"/> executes.
            </remarks>
            <value>
            <b>true</b> if the <see cref="T:React.Task"/> was interrupted.
            </value>
        </member>
        <member name="F:React.Process._stepsfunc">
            <summary>
            The delegate which can create the process step generator.
            </summary>
        </member>
        <member name="F:React.Process._stepsdata">
            <summary>
            Data passed to the <see cref="T:React.Process"/> when using a
            <see cref="T:React.ProcessSteps"/> delegate.
            </summary>
        </member>
        <member name="F:React.Process._steps">
            <summary>
            The active generator which yields each processing step.
            </summary>
        </member>
        <member name="F:React.Process._activator">
            <summary>
            The object that activated this <see cref="T:React.Process"/>.
            </summary>
        </member>
        <member name="F:React.Process._activationData">
            <summary>
            Per-activation event data.
            </summary>
        </member>
        <member name="M:React.Process.#ctor(React.Simulation)">
            <summary>
            Create a new <see cref="T:React.Process"/> instance.
            </summary>
            <remarks>
            This constructor is only available to derived classes.
            </remarks>
            <param name="sim">The simulation context.</param>
        </member>
        <member name="M:React.Process.#ctor(React.Simulation,React.ProcessSteps)">
            <summary>
            Create a new <see cref="T:React.Process"/> that obtains its processing
            steps generator from the given delegate.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="steps">
            The <see cref="T:React.ProcessSteps"/> delegate that can create the
            generator which supplies the processing steps for the
            <see cref="T:React.Process"/>.
            </param>
        </member>
        <member name="M:React.Process.#ctor(React.Simulation,React.ProcessSteps,System.Object)">
            <summary>
            Create a new <see cref="T:React.Process"/> that obtains its processing
            steps generator from the given delegate and which can pass client
            data to the delegate.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="steps">
            The <see cref="T:React.ProcessSteps"/> delegate that can create the
            generator which supplies the processing steps for the
            <see cref="T:React.Process"/>.
            </param>
            <param name="data">
            Client data passed to <paramref name="steps"/> when it is invoked.
            May be <see langword="null"/>.
            </param>
        </member>
        <member name="M:React.Process.GetProcessSteps">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that yields the processing
            steps.
            </summary>
            <remarks>
            This is a generator method that must be overridden by subclasses.  It
            must <c>yield</c> one or more <see cref="T:React.Task"/> instances which will
            perform each processing step.
            </remarks>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> (iterator) capable of
            yielding one or more <see cref="T:React.Task"/> instances that will
            perform actions on behalf of the <see cref="T:React.Process"/>.
            </returns>
        </member>
        <member name="M:React.Process.ExecuteTask(System.Object,System.Object)">
            <summary>
            Executes each process step <see cref="T:React.Task"/> obtained from the
            generator created by <see cref="M:React.Process.GetProcessSteps"/>.
            </summary>
            <remarks>
            Normally, <see cref="T:React.Process"/> implementors will not need to
            override this method; override <see cref="M:React.Process.GetProcessSteps"/>
            instead.
            </remarks>
            <param name="activator">
            The object that activated this <see cref="T:React.Process"/>.
            </param>
            <param name="data">Per-activation event data.</param>
        </member>
        <member name="M:React.Process.Defer">
            <summary>
            Defer processing to allow another <see cref="T:React.Task"/> to run.
            </summary>
            <remarks>
            This method is used to temporarily suspend the current
            <see cref="T:React.Process"/> and allow another <see cref="T:React.Task"/> to
            run.  It performs the same function as <c>Delay(0L)</c>.
            </remarks>
            <returns>
            A reference to the current <see cref="T:React.Process"/>, <c>this</c>.
            </returns>
        </member>
        <member name="M:React.Process.Delay(System.Int64)">
            <summary>
            Delay for a period of time.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="relTime"/> is less than zero (0).
            </exception>
            <param name="relTime">
            The delay time relative to the current simulation time.
            </param>
            <returns>
            A reference to the current <see cref="T:React.Process"/>, <c>this</c>.
            </returns>
        </member>
        <member name="M:React.Process.Suspend">
            <summary>
            Suspends or passivates the <see cref="T:React.Process"/>.
            </summary>
            <remarks>
            Suspending a <see cref="T:React.Process"/> is different from defering a
            <see cref="T:React.Process"/> (see <see cref="M:React.Process.Defer"/>).  When a
            <see cref="T:React.Process"/> is suspended, it requires another
            <see cref="T:React.Task"/> to re-activate it; a deferred
            <see cref="T:React.Process"/> will automatically re-activate.
            </remarks>
            <returns>
            A reference to the current <see cref="T:React.Process"/>, <c>this</c>.
            </returns>
        </member>
        <member name="P:React.Process.Activator">
            <summary>
            Gets the object that activated this <see cref="T:React.Process"/>.
            </summary>
            <remarks>
            <para>
            When the <see cref="T:React.Process"/> is activated by an
            <see cref="T:React.IResource"/>, <see cref="T:React.ICondition"/>, or other
            blocking object, this property should always be non-null.
            </para>
            <para>
            The property is <see langword="null"/> except during the
            execution of the <see cref="M:React.Process.ExecuteTask(System.Object,System.Object)"/> method.
            </para>
            </remarks>
            <value>
            The <see cref="T:System.Object"/> that activated this <see cref="T:React.Process"/>
            or <see langword="null"/> if self-activated or anonymously
            activated.
            </value>
        </member>
        <member name="P:React.Process.ActivationData">
            <summary>
            Gets the per-activation event data specified when this
            <see cref="T:React.Process"/> was activated.
            </summary>
            <remarks>
            The property is <see langword="null"/> except during the
            execution of the <see cref="M:React.Process.ExecuteTask(System.Object,System.Object)"/> method.
            </remarks>
            <value>
            The per-activation event data <see cref="T:System.Object"/> or
            <see langword="null"/> if the <see cref="P:React.Process.Activator"/> did not
            specify any activation data.
            </value>
        </member>
        <member name="T:React.ResourceEntry">
            <summary>
            Internal class used by <see cref="T:React.Resource"/> to help keep track of
            which <see cref="T:React.Task"/>s own resources belonging to the pool.
            </summary>
            <remarks>
            <para>
            <see cref="T:React.ResourceEntry"/> instance keep track of either the
            resource items issued by an <see cref="T:React.AnonymousResource"/> or a
            <see cref="T:React.TrackedResource"/> but <b>not</b> both.  When used with
            an <see cref="T:React.AnonymousResource"/>, the <see cref="T:React.ResourceEntry"/>
            tracks allocated items via a simple <see cref="T:System.Int32"/> counter.
            When used with a <see cref="T:React.TrackedResource"/>, the
            <see cref="T:React.ResourceEntry"/> tracks allocated items by their
            actual references.
            </para>
            <para>
            The type of resource which the <see cref="T:React.ResourceEntry"/> will track
            is determined by which constructor is called.
            </para>
            </remarks>
        </member>
        <member name="F:React.ResourceEntry._count">
            <summary>
            The number of resource items acquired.
            </summary>
        </member>
        <member name="F:React.ResourceEntry._single">
            <summary>
            Reference to a single owned resource item.
            </summary>
        </member>
        <member name="F:React.ResourceEntry._multiple">
            <summary>
            Reference to multiple owned resource items.
            </summary>
        </member>
        <member name="M:React.ResourceEntry.#ctor">
            <overloads>Create and initialize a ResourceEntry.</overloads>
            <summary>
            Create a new <see cref="T:React.ResourceEntry"/> that helps keep track
            resource owners of an <see cref="T:React.AnonymousResource"/>.
            </summary>
        </member>
        <member name="M:React.ResourceEntry.#ctor(System.Object)">
            <summary>
            Create a new <see cref="T:React.ResourceEntry"/> that helps keep track
            of resource owners of a <see cref="T:React.TrackedResource"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="item"/> is <see langword="null"/>.</exception>
            <param name="item">The resource item to track.</param>
        </member>
        <member name="M:React.ResourceEntry.Add">
            <summary>
            Adds one to the ownership count of an
            <see cref="T:React.AnonymousResource"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If this <see cref="T:React.ResourceEntry"/> is tracking resource item
            references rather than simply counting anonymous resource items.
            </exception>
        </member>
        <member name="M:React.ResourceEntry.Add(System.Object)">
            <summary>
            Adds the given resource item to the set of items owned by
            a single <see cref="T:React.Task"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If this <see cref="T:React.ResourceEntry"/> is counting anonymous
            resource items rather than tracking resource item references.
            </exception>
            <param name="item">The resource item to add.</param>
        </member>
        <member name="M:React.ResourceEntry.Remove">
            <summary>
            Removes one from the ownership count of an
            <see cref="T:React.AnonymousResource"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If <see cref="P:React.ResourceEntry.Count"/> is less than one (1) or this
            <see cref="T:React.ResourceEntry"/> is tracking multiple resource item
            references (as opposed to counting anonymous resource items).
            </exception>
        </member>
        <member name="M:React.ResourceEntry.Remove(System.Object)">
            <summary>
            Removes the given resource item from the set of items owned by
            a single <see cref="T:React.Task"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If <see cref="P:React.ResourceEntry.Count"/> is less than one (1).
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="item"/> is not a reference being tracked by
            this <see cref="T:React.ResourceEntry"/>.
            </exception>
            <param name="item">The resource item to remove.</param>
        </member>
        <member name="P:React.ResourceEntry.Count">
            <summary>
            Gets the number of resource items owned by a single
            <see cref="T:React.Task"/>.
            </summary>
            <value>
            The number of resource items owned by a single
            <see cref="T:React.Task"/> as an <see cref="T:System.Int32"/>/
            </value>
        </member>
        <member name="P:React.ResourceEntry.Items">
            <summary>
            Gets an immutable <see cref="T:System.Collections.IList"/> of the resource items
            tracked by this <see cref="T:React.ResourceEntry"/>.
            </summary>
            <value>
            An immutable <see cref="T:System.Collections.IList"/> of tracked resource items or
            <see langword="null"/> if the <see cref="T:React.ResourceEntry"/> is not
            tracking individual resource items.
            </value>
        </member>
        <member name="T:React.Simulation">
            <summary>
            A class for running discrete-event simulations.
            </summary>
            <remarks>
            <para>
            <see cref="T:React.Simulation"/> contains mechanisms for maintaining the
            current simulated time as well as a collection of
            <see cref="T:React.ActivationEvent"/> instances scheduled to occur at some
            time during the simulation run.  This collection is typically
            referred to as the the <em>event queue</em>, <em>event calendar</em>
            or <em>future event set</em>.
            </para>
            <para>
            Fundamentally, the operation of the <see cref="T:React.Simulation"/> is
            quite simple.  It starts with the scheduling of one or more <em>
            generator</em> <see cref="T:React.Task"/> instances.  Internally, the
            generators are scheduled with <see cref="T:React.ActivationEvent"/>s, but since
            it's <see cref="T:React.Task"/>s that perform the actual simulated processing,
            the generators are <see cref="T:React.Task"/>s rather than
            <see cref="T:React.ActivationEvent"/>s.
            </para>
            <para>
            The generator <see cref="T:React.Task"/>s serve to "jumpstart" or "bootstrap"
            the simulation.  They perform some set of initialization actions, which
            probably result in additional <see cref="T:React.Task"/> <em>activations</em>
            and thus additional <see cref="T:React.ActivationEvent"/>s being scheduled.  As
            each <see cref="T:React.ActivationEvent"/> is fired it runs a
            <see cref="T:React.Task"/>, and each <see cref="T:React.Task"/> might activate other
            <see cref="T:React.Task"/>s (or itself).  Each activation places an
            <see cref="T:React.ActivationEvent"/> on the event queue.  This process
            continues until the event queue is emptied or the
            <see cref="T:React.Simulation"/> is ordered to stop. 
            </para>
            </remarks>
        </member>
        <member name="F:React.Simulation._currentTime">
            <summary>The current simulation time.</summary>
        </member>
        <member name="F:React.Simulation._stopTime">
            <summary>The time the simulation will stop.</summary>
        </member>
        <member name="F:React.Simulation._nDiscardableTasks">
            <summary>The number of discardable Tasks scheduled.</summary>
        </member>
        <member name="F:React.Simulation._eventQueue">
            <summary>The event calendar (future event set).</summary>
        </member>
        <member name="F:React.Simulation._state">
            <summary>The current <see cref="T:React.SimulationState"/>.</summary>
        </member>
        <member name="M:React.Simulation.#ctor">
            <summary>
            Create and initialize a new <see cref="T:React.Simulation"/>.
            </summary>
        </member>
        <member name="M:React.Simulation.ScheduleEvent(React.ActivationEvent)">
            <summary>
            Adds the specified <see cref="T:React.ActivationEvent"/> to the event queue
            (future event set).
            </summary>
            <remarks>
            <para>
            Once <paramref name="evt"/> is scheduled, it cannot be removed from
            the event queue, but it may be canceled.  Canceled
            <see cref="T:React.ActivationEvent"/>s remain in the queue, but are simply
            discarded rather than fired when they are removed from the queue.
            </para>
            <para>
            Most client code will not need to call this method, rather one of
            the <b>Activate</b> methods of the <see cref="T:React.Task"/> class should
            be used to schedule <see cref="T:React.Task"/>s to run.
            </para>
            <para>
            <b>Important:</b> If the <see cref="T:React.Simulation"/> is in the
            <see cref="F:React.SimulationState.Stopping"/> state,
            <paramref name="evt"/> is silently ignored, <b>it is not
            scheduled</b>.
            </para>
            </remarks>
            <exception cref="T:React.BackClockingException">
            If <paramref name="evt"/> has an event time earlier than the
            current simulation time, <see cref="P:React.Simulation.Now"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If the simulation <see cref="P:React.Simulation.State"/> is either
            <see cref="F:React.SimulationState.Completed"/> or
            <see cref="F:React.SimulationState.Failed"/>.
            </exception>
            <param name="evt">
            The <see cref="T:React.ActivationEvent"/> to schedule (add to the event queue).
            </param>
        </member>
        <member name="M:React.Simulation.Run">
            <overloads>Run the simulation.</overloads>
            <summary>
            Run the <see cref="T:React.Simulation"/>.
            </summary>
            <remarks>
            When this version of <see cref="M:React.Simulation.Run"/> is used, one or more
            initial <see cref="T:React.Task"/> instance must have already been
            activated or the <see cref="T:React.Simulation"/> will immediately stop.
            </remarks>
            <returns>
            The number of <see cref="T:React.ActivationEvent"/> instances that remained
            in the event queue at the time the <see cref="T:React.Simulation"/>
            stopped.
            </returns>
        </member>
        <member name="M:React.Simulation.Run(React.Task)">
            <summary>
            Run the <see cref="T:React.Simulation"/> using the given generator
            <see cref="T:React.Task"/> instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="generator"/> is <see langword="null"/>.
            </exception>
            <param name="generator">
            The <see cref="T:React.Task"/> which will serve as the sole generator.
            </param>
            <returns>
            The number of <see cref="T:React.ActivationEvent"/> instances that
            remained in the event queue at the time the
            <see cref="T:React.Simulation"/> stopped.
            </returns>
        </member>
        <member name="M:React.Simulation.Run(React.Task[])">
            <summary>
            Run the <see cref="T:React.Simulation"/> using the provided generator
            <see cref="T:React.Task"/> instances.
            </summary>
            <remarks>
            The array of generators must contain zero (0) or more
            <see cref="T:React.Task"/> instances; it cannot be <see langword="null"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="generators"/> is <see langword="null"/>.
            </exception>
            <param name="generators">
            An array of generator <see cref="T:React.Task"/> instances.
            </param>
            <returns>
            The number of <see cref="T:React.ActivationEvent"/> instances that
            remained in the event queue at the time the
            <see cref="T:React.Simulation"/> stopped.
            </returns>
        </member>
        <member name="M:React.Simulation.Stop">
            <summary>
            Stop the <see cref="T:React.Simulation"/> at the current simulation time.
            </summary>
            <remarks>
            This method is the equivalent of <c>sim.Stop(sim.Now)</c>.  If the
            <see cref="T:React.Simulation"/> is not running, invoking this method has
            no effect.
            </remarks>
        </member>
        <member name="M:React.Simulation.Stop(System.Int64)">
            <summary>
            Stop the <see cref="T:React.Simulation"/> at the specified simulation time.
            </summary>
            <remarks>
            If the <see cref="T:React.Simulation"/> is not running, this method has no
            effect.
            </remarks>
            <param name="absTime">
            The absolute simulation time when the <see cref="T:React.Simulation"/>
            should stop running.  If <paramref name="absTime"/> is less than
            <see cref="P:React.Simulation.Now"/>, the simulation will stop at the current time.
            </param>
        </member>
        <member name="M:React.Simulation.OnStateChanged">
            <summary>
            Invoked after the <see cref="T:React.SimulationState"/> has changed.
            </summary>
            <remarks>
            The default implementation raises the <see cref="E:React.Simulation.StateChanged"/>
            event.
            </remarks>
        </member>
        <member name="M:React.Simulation.ActivateGenerators(React.Task[])">
            <summary>
            Activate all the generator <see cref="T:React.Task"/> instances in the
            given array.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="generators"/> is <see langword="null"/>.
            </exception>
            <param name="generators">
            An array containing zero or more <see cref="T:React.Task"/>s that will
            serve as generators for the <see cref="T:React.Simulation"/>.
            </param>
        </member>
        <member name="E:React.Simulation.StateChanged">
            <summary>
            Event raised when the <see cref="T:React.SimulationState"/> has changed.
            </summary>
            <remarks>
            The new <see cref="T:React.SimulationState"/> is not passed to the
            delegate method, rather each handler must query the sender (e.g.
            the <see cref="T:React.Simulation"/>) to obtain its current state.
            </remarks>
        </member>
        <member name="P:React.Simulation.Now">
            <summary>
            Gets the current simulation time.
            </summary>
            <remarks>
            The current time will never be less than zero (0).  The simulation
            time at the beginning of a simulation run is zero.
            </remarks>
            <value>
            The current simulation time as an <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="P:React.Simulation.State">
            <summary>
            Gets or sets the current <see cref="T:React.SimulationState"/>.
            </summary>
            <remarks>
            Setting the current simulation state will raise the
            <see cref="E:React.Simulation.StateChanged"/> event.
            </remarks>
        </member>
        <member name="P:React.Simulation.StopTime">
            <summary>
            Gets the simulation time when the simulation stopped.
            </summary>
            <remarks>
            The <see cref="T:React.Simulation"/> will stop its run loop when
            the current simulation time equals the stop time.  Any events
            scheduled at the stop time will be fired.
            </remarks>
            <value>
            The simulation stop time as an <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="T:React.SimulationState">
            <summary>
            Describes the various run-time states of a <see cref="T:React.Simulation"/>.
            </summary>
            <remarks>
            <para>
            Normally, a <see cref="T:React.Simulation"/> will progress through its
            states in the following order:
            </para>
            <list type="number">
                <item><description>Ready</description></item>
                <item><description>Initializing</description></item>
                <item><description>Running</description></item>
                <item><description>Stopping (optional)</description></item>
                <item><description>Completed</description></item>
            </list>
            <para>
            Note that the <b>Stopping</b> state is often bypassed with the
            <see cref="T:React.Simulation"/> progressing directly from the <b>Running</b>
            to the <b>Completed</b> state.
            </para>
            </remarks>
        </member>
        <member name="F:React.SimulationState.Ready">
            <summary>
            The <see cref="T:React.Simulation"/> is new and ready to be run.
            </summary>
        </member>
        <member name="F:React.SimulationState.Initializing">
            <summary>
            The <see cref="T:React.Simulation"/> is initializing.  This indicates
            that the generator <see cref="T:React.Task"/>s are being
            activated.
            </summary>
        </member>
        <member name="F:React.SimulationState.Running">
            <summary>
            The <see cref="T:React.Simulation"/> is running.  This state indicates
            that <see cref="T:React.ActivationEvent"/>s are being processed.
            </summary>
        </member>
        <member name="F:React.SimulationState.Stopping">
            <summary>
            The <see cref="T:React.Simulation"/> is stopping.  This state indicates
            that one of the <b>Simulation.Stop</b> methods was called.
            </summary>
        </member>
        <member name="F:React.SimulationState.Completed">
            <summary>
            The <see cref="T:React.Simulation"/> has completed successfully.
            </summary>
        </member>
        <member name="F:React.SimulationState.Failed">
            <summary>
            The <see cref="T:React.Simulation"/> terminated with errors.
            </summary>
        </member>
        <member name="T:React.TaskPriority">
            <summary>
            The built-in task priorities.
            </summary>
            <remarks>
            Defines the built-in task priorities used by <see cref="T:React.Task"/>s,
            <see cref="T:React.ActivationEvent"/>s and <see cref="T:React.Simulation"/>.  Because
            other priority values are possible, <see cref="T:React.TaskPriority"/> is not
            an <c>enum</c>, as that would limit the priorities to a well defined
            set.
            </remarks>
        </member>
        <member name="F:React.TaskPriority._immediate">
            <summary>Immediate priority.</summary>
        </member>
        <member name="F:React.TaskPriority._maximum">
            <summary>Maximum priority.</summary>
        </member>
        <member name="F:React.TaskPriority._elevated">
            <summary>Elevated priority.</summary>
        </member>
        <member name="F:React.TaskPriority._normal">
            <summary>Normal (default) priority.</summary>
        </member>
        <member name="F:React.TaskPriority._reduced">
            <summary>Reduced priority.</summary>
        </member>
        <member name="F:React.TaskPriority._discardable">
            <summary>Discardable priority.</summary>
        </member>
        <member name="M:React.TaskPriority.#ctor">
            <summary>Private constructor to prevent instantiation.</summary>
        </member>
        <member name="P:React.TaskPriority.Immediate">
            <summary>
            Gets the immediate task priority.
            </summary>
            <remarks>
            <see cref="T:React.Task"/>s which are activated with this priority are
            guaranteed to be executed before all other pending
            <see cref="T:React.Task"/>s.  To use the <see cref="P:React.TaskPriority.Immediate"/> task
            priority, the <see cref="T:React.Task"/> must be scheduled at the current
            simulation time.  It is an error to schedule an <see cref="T:React.Task"/>
            in the future with <see cref="P:React.TaskPriority.Immediate"/> priority.
            </remarks>
            <value>
            The immediate priority as an <see cref="T:System.Int32"/>.  The immediate
            priority is defined as <see cref="F:System.Int32.MaxValue"/>.
            </value>
        </member>
        <member name="P:React.TaskPriority.Maximum">
            <summary>
            Get the maximum task priority.
            </summary>
            <remarks>
            This is the highest allowable priority that can be used to activate
            an <see cref="T:React.Task"/> beyond the current simulation time (i.e. in
            the future).
            </remarks>
            <value>
            The maximum task priority as an <see cref="T:System.Int32"/>.  The maximum
            priority is defined as <c>TaskPriority.Immediate - 1</c>.
            </value>
        </member>
        <member name="P:React.TaskPriority.Elevated">
            <summary>
            Get the elevated task priority.
            </summary>
            <value>
            The elevated task priority as an <see cref="T:System.Int32"/>.  The elevated
            priority is defined as <c>TaskPriority.Normal + 100</c>.
            </value>
        </member>
        <member name="P:React.TaskPriority.Normal">
            <summary>
            Gets the normal (default) task priority.
            </summary>
            <remarks>
            Unless otherwise activated with a different priority, all
            <see cref="T:React.Task"/> instances should use the <see cref="P:React.TaskPriority.Normal"/>
            task priority.
            </remarks>
            <value>
            The normal (default) task priority as an <see cref="T:System.Int32"/>.  The
            normal priority is defined as zero (0).
            </value>
        </member>
        <member name="P:React.TaskPriority.Reduced">
            <summary>
            Get the reduced task priority.
            </summary>
            <value>
            The reduced task priority as an <see cref="T:System.Int32"/>.  The reduced
            priority is defined as <c>TaskPriority.Normal - 100</c>.
            </value>
        </member>
        <member name="P:React.TaskPriority.Discardable">
            <summary>
            Gets the discardable task priority.
            </summary>
            <remarks>
            <see cref="T:React.Task"/>s that are activated with the
            <see cref="P:React.TaskPriority.Discardable"/> priority can be discarded by the
            <see cref="T:React.Simulation"/> if no higher priority tasks are pending.
            Put simply, if all <see cref="T:React.Task"/>s waiting to run have a
            <see cref="P:React.Task.Priority"/> of <see cref="P:React.TaskPriority.Discardable"/>, then
            they are all thrown away by the <see cref="T:React.Simulation"/>, which
            will cause the <see cref="T:React.Simulation"/> to end.  Discardable
            tasks are useful for interval-based data collection where the
            data collector tasks should stop when there are no more tasks
            of significance pending.
            </remarks>
            <value>
            The discardable task priority as an <see cref="T:System.Int32"/>.  The
            discardable priority is defined as
            <see cref="F:System.Int32.MinValue"/>.
            </value>
        </member>
        <member name="T:React.TrackedResource">
            <summary>
            A <see cref="T:React.Resource"/> that tracks its resource items as
            actual objects.
            <seealso cref="T:React.AnonymousResource"/>
            </summary>
            <remarks>
            <para>
            A <see cref="T:React.TrackedResource"/> can be created directly or via
            the <see cref="M:React.Resource.Create(System.Collections.IEnumerable)"/> factory method.
            </para>
            <para>
            <see cref="T:React.TrackedResource"/>s are used when there is a need to
            track individual resource items using references to actual objects.
            In other words, a <see cref="T:React.TrackedResource"/> represents a pool
            of CLR <see cref="T:System.Object"/>s that are tracked by their references.
            </para>
            <para>
            Items acquired from a <see cref="T:React.TrackedResource"/> will always
            provide a reference through task activation data (the <c>data</c>
            parameter of the <see cref="M:React.Task.ExecuteTask(System.Object,System.Object)"/> mehtod) or the
            <see cref="P:React.Process.ActivationData"/> property.  When a
            <see cref="T:React.TrackedResource"/> is acquired, these will always be
            reference to a live CLR <see cref="T:System.Object"/>.
            </para>
            </remarks>
        </member>
        <member name="F:React.TrackedResource._members">
            <summary>
            The objects (resource items) that are tracked by this resource.
            </summary>
        </member>
        <member name="F:React.TrackedResource._free">
            <summary>
            The resource items available to be allocated.
            </summary>
        </member>
        <member name="F:React.TrackedResource._outOfService">
            <summary>
            The number of resource items that are out of service.
            </summary>
        </member>
        <member name="F:React.TrackedResource._inUse">
            <summary>
            The number of resource items that are in use.
            </summary>
        </member>
        <member name="F:React.TrackedResource._autoSelect">
            <summary>
            Whether or not the resource item to release will be automatically
            selected.
            </summary>
        </member>
        <member name="M:React.TrackedResource.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create a new, unnamed <see cref="T:React.TrackedResource"/> that
            contains the given resource items.
            </summary>
            <param name="items">
            The resource items.  None of the objects in
            <paramref name="items"/> may be <see langword="null"/>.
            </param>
        </member>
        <member name="M:React.TrackedResource.#ctor(System.String,System.Collections.IEnumerable)">
            <summary>
            Create a new <see cref="T:React.TrackedResource"/> having the given
            name and containing the given resource items.
            </summary>
            <param name="name">The resource name.</param>
            <param name="items">
            The resource items.  None of the objects in
            <paramref name="items"/> may be <see langword="null"/>.
            </param>
        </member>
        <member name="M:React.TrackedResource.AllocateResource">
            <summary>
            Allocate a resource item.
            </summary>
            <remarks>
            Calling this method will increment the in-use count by one and
            remove an item from the free list.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If there are no free resources (i.e. <see cref="P:React.TrackedResource.Free"/> is less
            than one).
            </exception>
            <returns>
            Returns a reference to one of the resource items originally
            passed to the constructor.  Will never be <see langword="null"/>.
            </returns>
        </member>
        <member name="M:React.TrackedResource.DeallocateResource(System.Object)">
            <summary>
            Deallocate a resource item.
            </summary>
            <remarks>
            Calling this method will decrement the in-use count by one and
            return <paramref name="item"/> to the free list.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If there are no resources in use (i.e. <see cref="P:React.TrackedResource.InUse"/> is less
            than one).
            </exception>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="item"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="item"/> is not a member of this
            <see cref="T:React.TrackedResource"/>.
            </exception>
            <param name="item">
            Must be a resource item obtained through a call to
            <see cref="M:React.TrackedResource.AllocateResource"/>.
            </param>
        </member>
        <member name="M:React.TrackedResource.SelectItemToRelease(React.Task,System.Collections.IList)">
            <summary>
            Select and return a particular resource item to release.
            </summary>
            <remarks>
            <para>
            This method will return <see langword="null"/> if
            <see cref="P:React.TrackedResource.AutoSelect"/> is set to <b>false</b>.  If
            <see cref="P:React.TrackedResource.AutoSelect"/> is <b>true</b> (the default), this method
            will select an resource item from <paramref name="items"/> to
            release. If only one item is owned by <paramref name="owner"/>,
            that item is selected for release.  If <paramref name="owner"/>
            owns multiple items belonging to this <see cref="T:React.TrackedResource"/>
            then the first item acquired is selected for release.
            </para>
            <para>
            This method must be overridden to change the selection policy.
            </para>
            </remarks>
            <param name="owner">
            The <see cref="T:React.Task"/> that is the actual resource owner.
            </param>
            <param name="items">
            An immutable <see cref="T:System.Collections.IList"/> of resource items owned by
            <paramref name="owner"/>.  This should never be will be <see langword="null"/>
            if the <see cref="T:React.Resource"/> is not tracking individual items.
            </param>
            <returns>A resource item to release.</returns>
        </member>
        <member name="P:React.TrackedResource.AutoSelect">
            <summary>
            Gets or sets whether this <see cref="T:React.TrackedResource"/> will
            automatically select the resource item to release.
            </summary>
            <remarks>
            <para>
            By default this property is <b>true</b>.  It should be set to
            <b>false</b> if the client program needs to exactly control which
            resource items are released and in which order.
            </para>
            <para>
            Setting <see cref="P:React.TrackedResource.AutoSelect"/> to <b>false</b> is normally only
            useful when acquiring multiple resource items from a
            <see cref="T:React.TrackedResource"/>.
            </para>
            </remarks>
            <value>
            <b>true</b> to automatically select the resource item to release;
            or <b>false</b> to require the client program to explicitly specify
            the item to release.
            </value>
        </member>
        <member name="P:React.TrackedResource.Count">
            <summary>
            Gets the total number of resources in the pool.
            </summary>
            <value>
            The total number of resources in the pool as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.TrackedResource.Free">
            <summary>
            Gets the number of resources that are not currently in use.
            </summary>
            <value>
            The number of resources that are not currently in use as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.TrackedResource.InUse">
            <summary>
            Gets the number of resources that are currently in use.
            </summary>
            <value>
            The number of resources that are currently in use as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.TrackedResource.OutOfService">
            <summary>
            Gets or sets the number of resources that are out of service.
            </summary>
            <remarks>
            <para>
            Out-of-service resources may not be acquired from the pool.  If
            <b>OutOfService</b> is set to a value greater or equal to
            <see cref="P:React.TrackedResource.Count"/>, then all resources are out of service and
            all subsequent calls to <see cref="M:React.Resource.Acquire(React.Task)"/> will block.
            </para>
            <para>
            Decreasing the number of out-of-service resources has the potential
            side-effect of resuming one or more waiting <see cref="T:React.Task"/>s.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than
            zero (0).
            </exception>
            <value>
            The number of resources currently out of service as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="T:React.Distribution.Beta">
            <summary>
            Generates random values according to a <em>beta</em>
            distribution.
            </summary>
        </member>
        <member name="T:React.Distribution.NonUniform">
            <summary>
            Base class for all React.NET non-uniform random number generators.
            </summary>
        </member>
        <member name="T:React.Distribution.IRandom">
            <summary>
            A producer of pseudo-random values distributed according to some
            probability function.
            </summary>
        </member>
        <member name="M:React.Distribution.IRandom.NextDouble">
            <summary>
            Generate the next random <see cref="T:System.Double"/> value.
            </summary>
            <returns>
            The next random value as a <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.IRandom.NextSingle">
            <summary>
            Generate the next random <see cref="T:System.Single"/> value.
            </summary>
            <returns>
            The next random value as a <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="T:React.Distribution.IUniformSource">
            <summary>
            An object that can supply an <see cref="T:React.Distribution.IUniform"/> random number
            generator on demand.
            </summary>
            <remarks>
            An <see cref="T:React.Distribution.IUniformSource"/> may be a <em>factory</em> object that
            creates a new <see cref="T:React.Distribution.IUniform"/> each time <see cref="M:React.Distribution.IUniformSource.GetUniform"/>
            is called; or it may return an <see cref="T:React.Distribution.IUniform"/> from a pool of
            one or more <see cref="T:React.Distribution.IUniform"/> instances.
            </remarks>
        </member>
        <member name="M:React.Distribution.IUniformSource.GetUniform">
            <summary>
            Returns an <see cref="T:React.Distribution.IUniform"/> random number generator.
            </summary>
            <returns>
            An <see cref="T:React.Distribution.IUniform"/> random number generator.
            </returns>
        </member>
        <member name="F:React.Distribution.NonUniform._rng">
            <summary>
            The <see cref="T:React.Distribution.IUniform"/> random number generator used to
            generate non-uniformly distributed values.
            </summary>
        </member>
        <member name="M:React.Distribution.NonUniform.#ctor">
            <summary>
            Create a new <see cref="T:React.Distribution.NonUniform"/> that obtains its
            <see cref="T:React.Distribution.IUniform"/> generator from the set of default random
            numbers.
            <seealso cref="P:React.Distribution.UniformStreams.DefaultStreams"/>
            </summary>
        </member>
        <member name="M:React.Distribution.NonUniform.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create a new <see cref="T:React.Distribution.NonUniform"/> that obtains its
            <see cref="T:React.Distribution.IUniform"/> generator from the given
            <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <remarks>
            If <paramref name="source"/> is <see langword="null"/>, this
            constructor behaves exactly like the no-arg constructor and
            obtains an <see cref="T:React.Distribution.IUniform"/> generator from the set of
            default random numbers.
            </remarks>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which to obtain the
            <see cref="T:React.Distribution.IUniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.NonUniform.NextDouble">
            <summary>
            Generate and return the next non-uniformly distributed
            random <see cref="T:System.Double"/> value.
            </summary>
            <returns>
            The next random value as a <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.NonUniform.NextSingle">
            <summary>
            Generate and return the next non-uniformly distributed
            random <see cref="T:System.Single"/> value.
            </summary>
            <remarks>
            The default implementation of this method simply returns
            <see cref="M:React.Distribution.NonUniform.NextDouble"/> cast as a <see cref="T:System.Single"/>.
            </remarks>
            <returns>
            The next random value as a <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.NonUniform.GetUniform">
            <summary>
            Returns the <see cref="T:React.Distribution.IUniform"/> instance used by the
            <see cref="T:React.Distribution.NonUniform"/> as its generator.
            </summary>
            <remarks>
            Multiple calls to this method will <b>always</b> return the
            same <see cref="T:React.Distribution.IUniform"/> instance.
            </remarks>
            <returns>
            The <see cref="T:React.Distribution.NonUniform"/> instance's uniform
            random number generator.
            </returns>
        </member>
        <member name="F:React.Distribution.Beta.DefaultScale">
            <summary>
            The default scale parameter.
            </summary>
            <remarks>
            <para>
            This value is used by the constructors that do not take an explicit
            scale value.
            </para>
            <para>
            The default scale is defined as
            <see cref="F:React.Distribution.Gamma.DefaultScale">Gamma.DefaultScale</see>
            </para>
            </remarks>
        </member>
        <member name="F:React.Distribution.Beta.DefaultShape">
            <summary>
            The default shape parameter.
            </summary>
            <remarks>
            <para>
            This value is used by the constructors that do not take an explicit
            shape value.
            </para>
            <para>
            The default shape is defined as
            <see cref="F:React.Distribution.Gamma.DefaultShape">Gamma.DefaultShape</see>
            </para>
            </remarks>
        </member>
        <member name="F:React.Distribution.Beta._scale">
            <summary>
            The scale parameter.  Also referred to as <em>alpha</em>.
            </summary>
        </member>
        <member name="F:React.Distribution.Beta._shape">
            <summary>
            The shape parameter.  Also referred to as <em>beta</em>.
            </summary>
        </member>
        <member name="M:React.Distribution.Beta.#ctor">
            <overloads>
            Create and initialize a Beta random number generator.
            </overloads>
            <summary>
            Create a <see cref="T:React.Distribution.Beta"/> random number generator.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Beta.Scale"/> and <see cref="P:React.Distribution.Beta.Shape"/> for the
            <see cref="T:React.Distribution.Beta"/> are set to <see cref="F:React.Distribution.Beta.DefaultScale"/> and
            <see cref="F:React.Distribution.Beta.DefaultShape"/> respectively.  The underlying
            <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
        </member>
        <member name="M:React.Distribution.Beta.#ctor(System.Double,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Beta"/> random number generator that
            has the given shape parameter.
            </summary>
            <remarks>
            The underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
            <param name="scale">
            The scale parameter.  This value is often referred to as
            <em>alpha</em>.</param>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>beta</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Beta.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create an <see cref="T:React.Distribution.Beta"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Beta.Scale"/> and <see cref="P:React.Distribution.Beta.Shape"/> for the
            <see cref="T:React.Distribution.Beta"/> are set to <see cref="F:React.Distribution.Beta.DefaultScale"/> and
            <see cref="F:React.Distribution.Beta.DefaultShape"/> respectively.
            </remarks>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Beta"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.Beta.#ctor(React.Distribution.IUniformSource,System.Double,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Beta"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/> and has the given scale and
            shape parameters.
            </summary>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Beta"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
            <param name="scale">
            The scale parameter.  This value is often referred to as
            <em>alpha</em>.</param>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>beta</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Beta.NextDouble">
            <summary>
            Generates the next random value according to a Beta
            distribution.
            </summary>
            <returns>
            The next random value.
            </returns>
        </member>
        <member name="P:React.Distribution.Beta.Scale">
            <summary>
            Gets or sets the scale parameter.
            </summary>
            <remarks>
            The scale parameter is often shown as <em>alpha</em>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The scale parameter as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="P:React.Distribution.Beta.Shape">
            <summary>
            Gets or sets the shape parameter.
            </summary>
            <remarks>
            The shape parameter is often shown as <em>beta</em>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The shape parameter as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Distribution.Exponential">
            <summary>
            Generates random values according to an <em>exponential</em>
            distribution.
            </summary>
        </member>
        <member name="F:React.Distribution.Exponential.DefaultLambda">
            <summary>
            The default lambda value.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            lambda value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Exponential._lambda">
            <summary>
            The lambda value.
            </summary>
        </member>
        <member name="M:React.Distribution.Exponential.#ctor">
            <overloads>
            Create and initialize an Exponential random number generator.
            </overloads>
            <summary>
            Create an <see cref="T:React.Distribution.Exponential"/> random number generator.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Exponential.Lambda"/> for the <see cref="T:React.Distribution.Exponential"/> is
            set to <see cref="F:React.Distribution.Exponential.DefaultLambda"/> and the underlying
            <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
        </member>
        <member name="M:React.Distribution.Exponential.#ctor(System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Exponential"/> random number generator that
            has the given lambda value.
            </summary>
            <remarks>
            The underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
            <param name="lambda">
            The lambda value.  This value is defined as 1/Mean.
            </param>
        </member>
        <member name="M:React.Distribution.Exponential.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create an <see cref="T:React.Distribution.Exponential"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Exponential"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.Exponential.#ctor(React.Distribution.IUniformSource,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Exponential"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/> and has the given lamdba value.
            </summary>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Exponential"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
            <param name="lambda">
            The lambda value.  This value is defined as 1/Mean.
            </param>
        </member>
        <member name="M:React.Distribution.Exponential.NextDouble">
            <summary>
            Generates the next random value according to an exponential
            distribution.
            </summary>
            <returns>
            The next random value.
            </returns>
        </member>
        <member name="P:React.Distribution.Exponential.Lambda">
            <summary>
            Gets or sets the lambda value.
            </summary>
            <remarks>
            The lambda value is defined as 1/<see cref="P:React.Distribution.Exponential.Mean"/>.  It is not
            necessary to set both <see cref="P:React.Distribution.Exponential.Lambda"/> and <see cref="P:React.Distribution.Exponential.Mean"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The lambda of the distribution as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="P:React.Distribution.Exponential.Mean">
            <summary>
            Gets or sets the desired mean value of the distribution.
            </summary>
            <remarks>
            The mean value is defined as 1/<see cref="P:React.Distribution.Exponential.Lambda"/>.  It is not
            necessary to set both <see cref="P:React.Distribution.Exponential.Mean"/> and <see cref="P:React.Distribution.Exponential.Lambda"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The desired mean of the distribution as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Distribution.Gamma">
            <summary>
            Generates random values according to a <em>gamma</em>
            distribution.
            </summary>
        </member>
        <member name="F:React.Distribution.Gamma.DefaultScale">
            <summary>
            The default scale parameter.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            scale value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Gamma.DefaultShape">
            <summary>
            The default shape parameter.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            shape value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Gamma._scale">
            <summary>
            The scale parameter.  Also referred to as <em>alpha</em>.
            </summary>
        </member>
        <member name="F:React.Distribution.Gamma._shape">
            <summary>
            The shape parameter.  Also referred to as <em>beta</em>.
            </summary>
        </member>
        <member name="M:React.Distribution.Gamma.#ctor">
            <overloads>
            Create and initialize a Gamma random number generator.
            </overloads>
            <summary>
            Create a <see cref="T:React.Distribution.Gamma"/> random number generator.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Gamma.Scale"/> and <see cref="P:React.Distribution.Gamma.Shape"/> for the
            <see cref="T:React.Distribution.Gamma"/> are set to <see cref="F:React.Distribution.Gamma.DefaultScale"/> and
            <see cref="F:React.Distribution.Gamma.DefaultShape"/> respectively.  The underlying
            <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
        </member>
        <member name="M:React.Distribution.Gamma.#ctor(System.Double,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Gamma"/> random number generator that
            has the given shape parameter.
            </summary>
            <remarks>
            The underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
            <param name="scale">
            The scale parameter.  This value is often referred to as
            <em>alpha</em>.</param>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>beta</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Gamma.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create an <see cref="T:React.Distribution.Gamma"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Gamma.Scale"/> and <see cref="P:React.Distribution.Gamma.Shape"/> for the
            <see cref="T:React.Distribution.Gamma"/> are set to <see cref="F:React.Distribution.Gamma.DefaultScale"/> and
            <see cref="F:React.Distribution.Gamma.DefaultShape"/> respectively.
            </remarks>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Gamma"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.Gamma.#ctor(React.Distribution.IUniformSource,System.Double,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Gamma"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/> and has the given scale and
            shape parameters.
            </summary>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Gamma"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
            <param name="scale">
            The scale parameter.  This value is often referred to as
            <em>alpha</em>.</param>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>beta</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Gamma.NextDouble">
            <summary>
            Generates the next random value according to a Gamma
            distribution.
            </summary>
            <returns>
            The next random value.
            </returns>
        </member>
        <member name="M:React.Distribution.Gamma.Generate(React.Distribution.IUniform,System.Double,System.Double)">
            <summary>
            Static method used by both <see cref="T:React.Distribution.Gamma"/> and
            <see cref="T:React.Distribution.Beta"/> to generate gamma distributed pseudo
            random values.
            </summary>
            <param name="u">The uniform generator.</param>
            <param name="alpha">The scale parameter.</param>
            <param name="beta">The shape parameter.</param>
            <returns>
            A pseudo random value that is distributed according to a
            gamma distribution.
            </returns>
        </member>
        <member name="P:React.Distribution.Gamma.Scale">
            <summary>
            Gets or sets the scale parameter.
            </summary>
            <remarks>
            The scale parameter is often shown as <em>alpha</em>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The scale parameter as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="P:React.Distribution.Gamma.Shape">
            <summary>
            Gets or sets the shape parameter.
            </summary>
            <remarks>
            The shape parameter is often shown as <em>beta</em>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The shape parameter as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Distribution.IUniform">
            <summary>
            A producer of pseudo-random numbers distributed uniformly.
            </summary>
        </member>
        <member name="M:React.Distribution.IUniform.NextInteger">
            <summary>
            Generate and return the next uniformly distributed
            <see cref="T:System.Int32"/> value.
            </summary>
            <returns>
            The next random value as an <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.IUniform.NextLong">
            <summary>
            Generate and return the next uniformly distributed
            <see cref="T:System.Int64"/> value.
            </summary>
            <returns>
            The next random value as an <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="T:React.Distribution.Logistic">
            <summary>
            Generates random values according to a <em>logistic</em>
            distribution.
            </summary>
        </member>
        <member name="F:React.Distribution.Logistic.DefaultShape">
            <summary>
            The default shape parameter.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            shape value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Logistic._shape">
            <summary>
            The shape parameter.  Also referred to as <em>lambda</em>.
            </summary>
        </member>
        <member name="M:React.Distribution.Logistic.#ctor">
            <overloads>
            Create and initialize a Logistic random number generator.
            </overloads>
            <summary>
            Create a <see cref="T:React.Distribution.Logistic"/> random number generator.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Logistic.Shape"/> for the <see cref="T:React.Distribution.Logistic"/> is set to
            <see cref="F:React.Distribution.Logistic.DefaultShape"/> and the underlying
            <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
        </member>
        <member name="M:React.Distribution.Logistic.#ctor(System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Logistic"/> random number generator that
            has the given shape parameter.
            </summary>
            <remarks>
            The underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>lambda</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Logistic.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create an <see cref="T:React.Distribution.Logistic"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Logistic.Shape"/> for the <see cref="T:React.Distribution.Logistic"/> is set to
            <see cref="F:React.Distribution.Logistic.DefaultShape"/>.
            </remarks>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Exponential"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.Logistic.#ctor(React.Distribution.IUniformSource,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Logistic"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/> and has the given shape
            parameter.
            </summary>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Exponential"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>lambda</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Logistic.NextDouble">
            <summary>
            Generates the next random value according to a logistic
            distribution.
            </summary>
            <returns>
            The next random value.
            </returns>
        </member>
        <member name="P:React.Distribution.Logistic.Shape">
            <summary>
            Gets or sets the shape parameter.
            </summary>
            <remarks>
            The shape parameter is often shown as <em>lambda</em>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The shape parameter as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Distribution.Lognormal">
            <summary>
            Generates random values according to a <em>lognormal</em>
            distribution.
            </summary>
        </member>
        <member name="F:React.Distribution.Lognormal.DefaultMean">
            <summary>
            The default mean value.
            </summary>
        </member>
        <member name="F:React.Distribution.Lognormal.DefaultStandardDeviation">
            <summary>
            The default standard deviation.
            </summary>
        </member>
        <member name="F:React.Distribution.Lognormal._mean">
            <summary>
            The mean.  Also often referred to as <em>mu</em>.
            </summary>
        </member>
        <member name="F:React.Distribution.Lognormal._stdev">
            <summary>
            The standard deviation.  Also often referred to as <em>sigma</em>.
            </summary>
        </member>
        <member name="F:React.Distribution.Lognormal._next">
            <summary>
            The cached next random value.
            </summary>
        </member>
        <member name="M:React.Distribution.Lognormal.#ctor">
            <overloads>
            Create and initialize a Lognormal random number generator.
            </overloads>
            <summary>
            Create a <see cref="T:React.Distribution.Lognormal"/> random number generator.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Lognormal.Mean"/> and <see cref="P:React.Distribution.Lognormal.StandardDeviation"/> for the
            <see cref="T:React.Distribution.Lognormal"/> are set to <see cref="F:React.Distribution.Lognormal.DefaultMean"/> and
            <see cref="F:React.Distribution.Lognormal.DefaultStandardDeviation"/> respectively.  The
            underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
        </member>
        <member name="M:React.Distribution.Lognormal.#ctor(System.Double,System.Double)">
            <summary>
            Create a <see cref="T:React.Distribution.Lognormal"/> random number generator that
            has the given mean and standard deviation.
            </summary>
            <remarks>
            The underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
            <param name="mean">
            The mean.  This value is often referred to as <em>mu</em>.
            </param>
            <param name="stddev">
            The standard deviation.  This value is often referred to as
            <em>sigma</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Lognormal.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create a <see cref="T:React.Distribution.Lognormal"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Lognormal.Mean"/> and <see cref="P:React.Distribution.Lognormal.StandardDeviation"/> for the
            <see cref="T:React.Distribution.Lognormal"/> are set to <see cref="F:React.Distribution.Lognormal.DefaultMean"/> and
            <see cref="F:React.Distribution.Lognormal.DefaultStandardDeviation"/> respectively.
            </remarks>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Exponential"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.Lognormal.#ctor(React.Distribution.IUniformSource,System.Double,System.Double)">
            <summary>
            Create a <see cref="T:React.Distribution.Lognormal"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/> and has the given mean and
            standard deviation.
            </summary>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Exponential"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
            <param name="mean">
            The mean.  This value is often referred to as <em>mu</em>.
            </param>
            <param name="stddev">
            The standard deviation.  This value is often referred to as
            <em>sigma</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Lognormal.NextDouble">
            <summary>
            Generates the next random value according to a lognormal
            distribution.
            </summary>
            <returns>
            The next random value.
            </returns>
        </member>
        <member name="P:React.Distribution.Lognormal.Mean">
            <summary>
            Gets or sets the mean (average) for the <see cref="T:React.Distribution.Lognormal"/>
            distribution.
            </summary>
            <remarks>
            This property is often referred to as <em>mu</em>.
            </remarks>
            <value>
            The mean as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="P:React.Distribution.Lognormal.StandardDeviation">
            <summary>
            Gets or sets the standard deviation for the <see cref="T:React.Distribution.Lognormal"/>
            distribution.
            </summary>
            <remarks>
            This property is often referred to as <em>sigma</em>.
            </remarks>
            <value>
            The standard deviation as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Distribution.Normal">
            <summary>
            Generates random values according to a <em>normal</em>
            distribution.
            </summary>
            <remarks>
            A normal distribution is sometimes called a <em>gaussian</em>
            distribution.
            </remarks>
        </member>
        <member name="F:React.Distribution.Normal.DefaultMean">
            <summary>
            The default mean value.
            </summary>
        </member>
        <member name="F:React.Distribution.Normal.DefaultStandardDeviation">
            <summary>
            The default standard deviation.
            </summary>
        </member>
        <member name="F:React.Distribution.Normal._mean">
            <summary>
            The mean.  Also often referred to as <em>mu</em>.
            </summary>
        </member>
        <member name="F:React.Distribution.Normal._stdev">
            <summary>
            The standard deviation.  Also often referred to as <em>sigma</em>.
            </summary>
        </member>
        <member name="F:React.Distribution.Normal._next">
            <summary>
            The cached next random value.
            </summary>
        </member>
        <member name="M:React.Distribution.Normal.#ctor">
            <overloads>
            Create and initialize a Normal random number generator.
            </overloads>
            <summary>
            Create a <see cref="T:React.Distribution.Normal"/> random number generator.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Normal.Mean"/> and <see cref="P:React.Distribution.Normal.StandardDeviation"/> for the
            <see cref="T:React.Distribution.Normal"/> are set to <see cref="F:React.Distribution.Normal.DefaultMean"/> and
            <see cref="F:React.Distribution.Normal.DefaultStandardDeviation"/> respectively.  The
            underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
        </member>
        <member name="M:React.Distribution.Normal.#ctor(System.Double,System.Double)">
            <summary>
            Create a <see cref="T:React.Distribution.Normal"/> random number generator that
            has the given mean and standard deviation.
            </summary>
            <remarks>
            The underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
            <param name="mean">
            The mean.  This value is often referred to as <em>mu</em>.
            </param>
            <param name="stddev">
            The standard deviation.  This value is often referred to as
            <em>sigma</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Normal.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create a <see cref="T:React.Distribution.Normal"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Normal.Mean"/> and <see cref="P:React.Distribution.Normal.StandardDeviation"/> for the
            <see cref="T:React.Distribution.Normal"/> are set to <see cref="F:React.Distribution.Normal.DefaultMean"/> and
            <see cref="F:React.Distribution.Normal.DefaultStandardDeviation"/> respectively.
            </remarks>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Exponential"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.Normal.#ctor(React.Distribution.IUniformSource,System.Double,System.Double)">
            <summary>
            Create a <see cref="T:React.Distribution.Normal"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/> and has the given mean and
            standard deviation.
            </summary>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Exponential"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
            <param name="mean">
            The mean.  This value is often referred to as <em>mu</em>.
            </param>
            <param name="stddev">
            The standard deviation.  This value is often referred to as
            <em>sigma</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Normal.NextDouble">
            <summary>
            Generates the next random value according to a normal
            distribution.
            </summary>
            <returns>
            The next random value.
            </returns>
        </member>
        <member name="M:React.Distribution.Normal.Generate(React.Distribution.IUniform,System.Double,System.Double,System.Double@)">
            <summary>
            Static method used by both <see cref="T:React.Distribution.Normal"/> and
            <see cref="T:React.Distribution.Lognormal"/> to generate normally distributed pseudo
            random values.
            </summary>
            <param name="u">The uniform generator.</param>
            <param name="mu">The mean.</param>
            <param name="sigma">The standard deviation.</param>
            <param name="next">The cached next value.</param>
            <returns>
            A pseudo random value that is normally distributed.
            </returns>
        </member>
        <member name="P:React.Distribution.Normal.Mean">
            <summary>
            Gets or sets the mean (average) for the <see cref="T:React.Distribution.Normal"/>
            distribution.
            </summary>
            <remarks>
            This property is often referred to as <em>mu</em>.
            </remarks>
            <value>
            The mean as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="P:React.Distribution.Normal.StandardDeviation">
            <summary>
            Gets or sets the standard deviation for the <see cref="T:React.Distribution.Normal"/>
            distribution.
            </summary>
            <remarks>
            This property is often referred to as <em>sigma</em>.
            </remarks>
            <value>
            The standard deviation as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Distribution.Pareto">
            <summary>
            Generates random values according to a <em>Pareto</em>
            distribution.
            </summary>
        </member>
        <member name="F:React.Distribution.Pareto.DefaultShape">
            <summary>
            The default shape parameter.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            shape value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Pareto._shape">
            <summary>
            The shape parameter.  Also referred to as <em>alpha</em>.
            </summary>
        </member>
        <member name="M:React.Distribution.Pareto.#ctor">
            <overloads>
            Create and initialize a Pareto random number generator.
            </overloads>
            <summary>
            Create a <see cref="T:React.Distribution.Pareto"/> random number generator.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Pareto.Shape"/> for the <see cref="T:React.Distribution.Pareto"/> is set to
            <see cref="F:React.Distribution.Pareto.DefaultShape"/> and the underlying
            <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
        </member>
        <member name="M:React.Distribution.Pareto.#ctor(System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Pareto"/> random number generator that
            has the given shape parameter.
            </summary>
            <remarks>
            The underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>alpha</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Pareto.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create an <see cref="T:React.Distribution.Pareto"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Pareto.Shape"/> for the <see cref="T:React.Distribution.Pareto"/> is set to
            <see cref="F:React.Distribution.Pareto.DefaultShape"/>.
            </remarks>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Pareto"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.Pareto.#ctor(React.Distribution.IUniformSource,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Pareto"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/> and has the given shape
            parameter.
            </summary>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Pareto"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>alpha</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Pareto.NextDouble">
            <summary>
            Generates the next random value according to a Pareto
            distribution.
            </summary>
            <returns>
            The next random value.
            </returns>
        </member>
        <member name="P:React.Distribution.Pareto.Shape">
            <summary>
            Gets or sets the shape parameter.
            </summary>
            <remarks>
            The shape parameter is often shown as <em>alpha</em>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The shape parameter as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Distribution.SystemUniform">
            <summary>
            An <see cref="T:React.Distribution.IUniform"/> pseudo-random number generator that uses the
            <see cref="T:System.Random"/> class to generate random values.
            </summary>
        </member>
        <member name="T:React.Distribution.Uniform">
            <summary>
            Base class for all React.NET uniform random number generators.
            </summary>
        </member>
        <member name="M:React.Distribution.Uniform.#ctor">
            <summary>
            Create a new <see cref="T:React.Distribution.Uniform"/> instance.
            </summary>
        </member>
        <member name="M:React.Distribution.Uniform.GetUniform">
            <summary>
            Returns this <see cref="T:React.Distribution.Uniform"/> instance.
            </summary>
            <returns>
            Returns <c>this</c>.
            </returns>
        </member>
        <member name="M:React.Distribution.Uniform.NextDouble">
            <summary>
            Generates and returns the next uniformly distributed
            <see cref="T:System.Double"/> value.
            </summary>
            <returns>
            The next random value as a <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.Uniform.NextSingle">
            <summary>
            Generates and returns the next uniformly distributed
            <see cref="T:System.Single"/> value.
            </summary>
            <returns>
            The next random value as a <see cref="T:System.Single"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.Uniform.NextInteger">
            <summary>
            Generates and returns the next uniformly distributed
            <see cref="T:System.Int32"/> value.
            </summary>
            <returns>
            The next random value as an <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.Uniform.NextLong">
            <summary>
            Generates and returns the next uniformly distributed
            <see cref="T:System.Int64"/> value.
            </summary>
            <returns>
            The next random value as an <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.Uniform.Create">
            <summary>
            Create a new <see cref="T:React.Distribution.Uniform"/> instance having a seed value
            based on the current system time.
            </summary>
            <remarks>
            The returned <see cref="T:React.Distribution.Uniform"/> uses a
            <see cref="T:System.Random"/> instance to do the actual random number
            generation.
            </remarks>
            <returns>
            A new <see cref="T:React.Distribution.Uniform"/> instance having a seed value based on
            the current system time.</returns>
        </member>
        <member name="M:React.Distribution.Uniform.Create(System.Int32)">
            <summary>
            Create a new <see cref="T:React.Distribution.Uniform"/> instance using the given seed
            value.
            </summary>
            <remarks>
            The returned <see cref="T:React.Distribution.Uniform"/> uses a
            <see cref="T:System.Random"/> instance to do the actual random number
            generation.
            </remarks>
            <param name="seed">The seed value.</param>
            <returns>
            A new <see cref="T:React.Distribution.Uniform"/> instance using <paramref name="seed"/>
            for the seed value.
            </returns>
        </member>
        <member name="F:React.Distribution.SystemUniform._gen">
            <summary>
            The <see cref="T:System.Random"/> used to generate random values.
            </summary>
        </member>
        <member name="M:React.Distribution.SystemUniform.#ctor">
            <overloads>
            Create an initialize a SystemUniform instance.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Distribution.SystemUniform"/> having a seed based on
            the current time.
            </summary>
        </member>
        <member name="M:React.Distribution.SystemUniform.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:React.Distribution.SystemUniform"/> having the given seed
            value.
            </summary>
            <param name="seed">
            The seed value.
            </param>
        </member>
        <member name="M:React.Distribution.SystemUniform.NextDouble">
            <summary>
            Generates the next uniformly distributed <see cref="T:System.Double"/>
            value.
            </summary>
            <returns>
            The next random value as a <see cref="T:System.Double"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.SystemUniform.NextInteger">
            <summary>
            Generate and return the next uniformly distributed
            <see cref="T:System.Int32"/> value.
            </summary>
            <returns>
            The next random value as an <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:React.Distribution.SystemUniform.NextLong">
            <summary>
            Generate and return the next uniformly distributed
            <see cref="T:System.Int64"/> value.
            </summary>
            <returns>
            The next random value as an <see cref="T:System.Int64"/>.
            </returns>
        </member>
        <member name="T:React.Distribution.Triangular">
            <summary>
            Generates random values according to a <em>triangular</em>
            distribution.
            </summary>
        </member>
        <member name="F:React.Distribution.Triangular.DefaultMinimum">
            <summary>
            The default minimum value.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            minimum value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Triangular.DefaultMode">
            <summary>
            The default mode value.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            mode value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Triangular.DefaultMaximum">
            <summary>
            The default maximum value.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            maximum value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Triangular._min">
            <summary>The minimum value.</summary>
        </member>
        <member name="F:React.Distribution.Triangular._mode">
            <summary>The mode.</summary>
        </member>
        <member name="F:React.Distribution.Triangular._max">
            <summary>The maximum value.</summary>
        </member>
        <member name="M:React.Distribution.Triangular.#ctor">
            <overloads>
            Create and initialize a Triangular random number generator.
            </overloads>
            <summary>
            Create a <see cref="T:React.Distribution.Triangular"/> random number generator.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Triangular.Minimum"/>, <see cref="P:React.Distribution.Triangular.Mode"/>, and
            <see cref="P:React.Distribution.Triangular.Maximum"/> are set to <see cref="F:React.Distribution.Triangular.DefaultMinimum"/>,
            <see cref="F:React.Distribution.Triangular.DefaultMode"/>, and <see cref="F:React.Distribution.Triangular.DefaultMaximum"/>
            respectively.  The underlying <see cref="T:React.Distribution.Uniform"/> generator is
            obtained from the default set of <see cref="T:React.Distribution.Uniform"/> generators
            (see <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
        </member>
        <member name="M:React.Distribution.Triangular.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a <see cref="T:React.Distribution.Triangular"/> random number generator having
            specified minimum, mode, and maximum.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="min"/> is not less than <paramref name="max"/>;
            or if <paramref name="mode"/> does not lie between
            <paramref name="min"/> and <paramref name="max"/>.
            </exception>
            <param name="min">The minimum value.</param>
            <param name="mode">The mode.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:React.Distribution.Triangular.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create an <see cref="T:React.Distribution.Triangular"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Triangular.Minimum"/>, <see cref="P:React.Distribution.Triangular.Mode"/>, and
            <see cref="P:React.Distribution.Triangular.Maximum"/> are set to <see cref="F:React.Distribution.Triangular.DefaultMinimum"/>,
            <see cref="F:React.Distribution.Triangular.DefaultMode"/>, and <see cref="F:React.Distribution.Triangular.DefaultMaximum"/>
            respectively.
            </remarks>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Triangular"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.Triangular.#ctor(React.Distribution.IUniformSource,System.Double,System.Double,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Triangular"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/> and has the given minimum,
            mode, and maximum.
            parameter.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="min"/> is not less than <paramref name="max"/>;
            or if <paramref name="mode"/> does not lie between
            <paramref name="min"/> and <paramref name="max"/>.
            </exception>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Triangular"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
            <param name="min">The minimum value.</param>
            <param name="mode">The mode.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:React.Distribution.Triangular.Reset(System.Double,System.Double,System.Double)">
            <summary>
            Resets the <see cref="T:React.Distribution.Triangular"/> to have the specified minimum,
            mode, and maximum.
            </summary>
            <remarks>
            Because <see cref="P:React.Distribution.Triangular.Minimum"/>, <see cref="P:React.Distribution.Triangular.Mode"/>, and
            <see cref="P:React.Distribution.Triangular.Maximum"/> are interdependent, this method is used to
            set all three values simultaneously with appropriate error
            checking.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="min"/> is not less than <paramref name="max"/>;
            or if <paramref name="mode"/> does not lie between
            <paramref name="min"/> and <paramref name="max"/>.
            </exception>
            <param name="min">The minimum value.</param>
            <param name="mode">The mode.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:React.Distribution.Triangular.NextDouble">
            <summary>
            Generates the next random value according to a triangular
            distribution.
            </summary>
            <returns>
            The next random value.
            </returns>
        </member>
        <member name="P:React.Distribution.Triangular.Minimum">
            <summary>
            Gets the minimum value the <see cref="T:React.Distribution.Triangular"/> will generate.
            </summary>
            <remarks>
            Because <see cref="P:React.Distribution.Triangular.Minimum"/>, <see cref="P:React.Distribution.Triangular.Mode"/>, and
            <see cref="P:React.Distribution.Triangular.Maximum"/> are interdependent, this property can only
            be set in the constructor or by the <see cref="M:React.Distribution.Triangular.Reset(System.Double,System.Double,System.Double)"/> method.
            </remarks>
            <value>
            The minimum value as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="P:React.Distribution.Triangular.Mode">
            <summary>
            Gets the mode for the <see cref="T:React.Distribution.Triangular"/> distribution.
            </summary>
            <remarks>
            Approximately half of all generated values will be less than
            <see cref="P:React.Distribution.Triangular.Mode"/>, and half will be greater.
            <para>
            Because <see cref="P:React.Distribution.Triangular.Minimum"/>, <see cref="P:React.Distribution.Triangular.Mode"/>, and
            <see cref="P:React.Distribution.Triangular.Maximum"/> are interdependent, this property can only
            be set in the constructor or by the <see cref="M:React.Distribution.Triangular.Reset(System.Double,System.Double,System.Double)"/> method.
            </para>
            </remarks>
            <value>
            The mode as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="P:React.Distribution.Triangular.Maximum">
            <summary>
            Gets the maximum value the <see cref="T:React.Distribution.Triangular"/> will generate.
            </summary>
            <remarks>
            Because <see cref="P:React.Distribution.Triangular.Minimum"/>, <see cref="P:React.Distribution.Triangular.Mode"/>, and
            <see cref="P:React.Distribution.Triangular.Maximum"/> are interdependent, this property can only
            be set in the constructor or by the <see cref="M:React.Distribution.Triangular.Reset(System.Double,System.Double,System.Double)"/> method.
            </remarks>
            <value>
            The maximum value as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="P:React.Distribution.Triangular.Width">
            <summary>
            Gets the width of the <see cref="T:React.Distribution.Triangular"/> random number
            generator.
            </summary>
            <remarks>
            The width is the <see cref="P:React.Distribution.Triangular.Maximum"/> less the
            <see cref="P:React.Distribution.Triangular.Minimum"/>.
            </remarks>
            <value>
            The width as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Distribution.UniformStreams">
            <summary>
            A set of <see cref="T:React.Distribution.IUniform"/> random number generators.
            </summary>
            <remarks>
            <para>
            This class is used to provide different <see cref="T:React.Distribution.IUniform"/>
            generators to non-uniform random variates.  Essentially, calls
            to <see cref="M:React.Distribution.UniformStreams.GetUniform"/> operate as if the set was a ring
            buffer.  Each call to <see cref="M:React.Distribution.UniformStreams.GetUniform"/> returns the next
            <see cref="T:React.Distribution.IUniform"/> in the ring buffer, starting over at the
            first <see cref="T:React.Distribution.IUniform"/> when the last <see cref="T:React.Distribution.IUniform"/>
            is returned.
            </para>
            <para>
            The above behavior allows the various non-uniform random number
            generators used in a <see cref="T:React.Simulation"/> to draw from several
            <see cref="T:React.Distribution.IUniform"/> generators in a well-defined manner.
            </para>
            <para>
            Unless explicitly set, the default (system-wide)
            <see cref="T:React.Distribution.UniformStreams"/> will contain
            <see cref="F:React.Distribution.UniformStreams.DefaultStreamCount"/> <see cref="T:React.Distribution.IUniform"/> random
            number generators.
            </para>
            </remarks>
        </member>
        <member name="F:React.Distribution.UniformStreams.DefaultStreamCount">
            <summary>
            Default quantity of random number generators.
            </summary>
        </member>
        <member name="F:React.Distribution.UniformStreams._defaultStreams">
            <summary>
            The default <see cref="T:React.Distribution.UniformStreams"/> instance.
            </summary>
        </member>
        <member name="F:React.Distribution.UniformStreams._index">
            <summary>
            Index of the next <see cref="T:React.Distribution.IUniform"/> that
            <see cref="M:React.Distribution.UniformStreams.GetUniform"/> will return.
            </summary>
        </member>
        <member name="F:React.Distribution.UniformStreams._prngs">
            <summary>
            Array containing all <see cref="T:React.Distribution.IUniform"/> instances.
            </summary>
        </member>
        <member name="M:React.Distribution.UniformStreams.#ctor">
            <overloads>
            Create and initialize a UniformStreams instance.
            </overloads>
            <summary>
            <remarks>
            The <see cref="T:React.Distribution.IUniform"/> instances are seeded based on the
            current system time.
            </remarks>
            Create a <see cref="T:React.Distribution.UniformStreams"/> containing
            <see cref="F:React.Distribution.UniformStreams.DefaultStreamCount"/> <see cref="T:React.Distribution.IUniform"/> instances.
            </summary>
        </member>
        <member name="M:React.Distribution.UniformStreams.#ctor(System.Int32)">
            <summary>
            Create a <see cref="T:React.Distribution.UniformStreams"/> containing the specified
            number of <see cref="T:React.Distribution.IUniform"/> instances.
            </summary>
            <remarks>
            The <see cref="T:React.Distribution.IUniform"/> instances are seeded based on the
            current system time.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="count"/> is less than one (1).
            </exception>
            <param name="count">
            The number of <see cref="T:React.Distribution.IUniform"/> instances the newly created
            <see cref="T:React.Distribution.UniformStreams"/> will contain.
            </param>
        </member>
        <member name="M:React.Distribution.UniformStreams.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a <see cref="T:React.Distribution.UniformStreams"/> containing the specified
            number of <see cref="T:React.Distribution.IUniform"/> instances and having the given
            starting seed value.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="count"/> is less than one (1).
            </exception>
            <param name="count">
            The number of <see cref="T:React.Distribution.IUniform"/> instances the newly created
            <see cref="T:React.Distribution.UniformStreams"/> will contain.
            </param>
            <param name="seed">
            The starting seed value.  The first <see cref="T:React.Distribution.IUniform"/> is
            seeded with this value.  Subsequent <see cref="T:React.Distribution.IUniform"/>
            instances are seeded based on the <see cref="M:React.Distribution.IUniform.NextInteger"/>
            random value obtained from their predecessor.
            </param>
        </member>
        <member name="M:React.Distribution.UniformStreams.#ctor(System.Collections.IEnumerable)">
            <summary>
            Create a <see cref="T:React.Distribution.UniformStreams"/> that contains the given
            <see cref="T:React.Distribution.IUniform"/> instances.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="rngs"/> contains less than one
            <see cref="T:React.Distribution.IUniform"/>.
            </exception>
            <param name="rngs">
            An <see cref="T:System.Collections.IEnumerable"/> that can be iterated over to obtain
            one or more <see cref="T:React.Distribution.IUniform"/> instances.
            </param>
        </member>
        <member name="M:React.Distribution.UniformStreams.GetUniform">
            <summary>
            Returns the next <see cref="T:React.Distribution.IUniform"/> random number generator.
            </summary>
            <remarks>
            <para>
            Each time this method is called a different <see cref="T:React.Distribution.IUniform"/>
            is returned until the last <see cref="T:React.Distribution.IUniform"/> in the set is
            returned.  At that point, the cycle begins again with the first
            <see cref="T:React.Distribution.IUniform"/> in the set.
            </para>
            <para>
            If <see cref="P:React.Distribution.UniformStreams.Length"/> is one (1), then this method will always
            return the same <see cref="T:React.Distribution.IUniform"/>.
            </para>
            </remarks>
            <returns>
            The next <see cref="T:React.Distribution.IUniform"/> random number generator.
            </returns>
        </member>
        <member name="P:React.Distribution.UniformStreams.Length">
            <summary>
            Gets the number of <see cref="T:React.Distribution.IUniform"/> instances contained by
            this <see cref="T:React.Distribution.UniformStreams"/>.
            </summary>
            <value>
            The the number of <see cref="T:React.Distribution.IUniform"/> instances contained by
            this <see cref="T:React.Distribution.UniformStreams"/> as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Distribution.UniformStreams.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:React.Distribution.IUniform"/> at the specified index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">
            If <paramref name="index"/> is not greater or equal to zero and
            less than <see cref="P:React.Distribution.UniformStreams.Length"/>.
            </exception>
            <param name="index">
            The index.  Must be greater or equal to zero and less than
            <see cref="P:React.Distribution.UniformStreams.Length"/>.
            </param>
            <value>
            The <see cref="T:React.Distribution.IUniform"/> at the specified index.
            </value>
        </member>
        <member name="P:React.Distribution.UniformStreams.DefaultStreams">
            <summary>
            Gets or sets the default, system-wide <see cref="T:React.Distribution.UniformStreams"/>
            instance.
            </summary>
            <remarks>
            If this property is set to <see langword="null"/>, a new default
            <see cref="T:React.Distribution.UniformStreams"/> instance will automatically created
            the next time this property is queried.
            </remarks>
            <value>
            The default, system-wide <see cref="T:React.Distribution.UniformStreams"/> instance.
            </value>
        </member>
        <member name="T:React.Distribution.Weibull">
            <summary>
            Generates random values according to a <em>Weibull</em>
            distribution.
            </summary>
        </member>
        <member name="F:React.Distribution.Weibull.DefaultScale">
            <summary>
            The default scale parameter.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            scale value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Weibull.DefaultShape">
            <summary>
            The default shape parameter.
            </summary>
            <remarks>
            This value is used by the constructors that do not take an explicit
            shape value.
            </remarks>
        </member>
        <member name="F:React.Distribution.Weibull._scale">
            <summary>
            The scale parameter.  Also referred to as <em>alpha</em>.
            </summary>
        </member>
        <member name="F:React.Distribution.Weibull._shape">
            <summary>
            The shape parameter.  Also referred to as <em>beta</em>.
            </summary>
        </member>
        <member name="M:React.Distribution.Weibull.#ctor">
            <overloads>
            Create and initialize a Weibull random number generator.
            </overloads>
            <summary>
            Create a <see cref="T:React.Distribution.Weibull"/> random number generator.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Weibull.Scale"/> and <see cref="P:React.Distribution.Weibull.Shape"/> for the <see cref="T:React.Distribution.Weibull"/> are set to
            <see cref="F:React.Distribution.Weibull.DefaultScale"/> and <see cref="F:React.Distribution.Weibull.DefaultShape"/> respectively.  The underlying
            <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
        </member>
        <member name="M:React.Distribution.Weibull.#ctor(System.Double,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Weibull"/> random number generator that
            has the given shape parameter.
            </summary>
            <remarks>
            The underlying <see cref="T:React.Distribution.Uniform"/> generator is obtained from the
            default set of <see cref="T:React.Distribution.Uniform"/> generators (see
            <see cref="P:React.Distribution.UniformStreams.DefaultStreams"/>).
            </remarks>
            <param name="scale">
            The scale parameter.  This value is often referred to as
            <em>alpha</em>.</param>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>beta</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Weibull.#ctor(React.Distribution.IUniformSource)">
            <summary>
            Create an <see cref="T:React.Distribution.Weibull"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/>.
            </summary>
            <remarks>
            The <see cref="P:React.Distribution.Weibull.Scale"/> and <see cref="P:React.Distribution.Weibull.Shape"/> for the
            <see cref="T:React.Distribution.Weibull"/> are set to <see cref="F:React.Distribution.Weibull.DefaultScale"/> and
            <see cref="F:React.Distribution.Weibull.DefaultShape"/> respectively.
            </remarks>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Weibull"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
        </member>
        <member name="M:React.Distribution.Weibull.#ctor(React.Distribution.IUniformSource,System.Double,System.Double)">
            <summary>
            Create an <see cref="T:React.Distribution.Weibull"/> random number generator that
            obtains its underlying <see cref="T:React.Distribution.Uniform"/> generator from the
            given <see cref="T:React.Distribution.IUniformSource"/> and has the given scale and
            shape parameters.
            </summary>
            <param name="source">
            The <see cref="T:React.Distribution.IUniformSource"/> from which this
            <see cref="T:React.Distribution.Weibull"/> can obtain its underlying
            <see cref="T:React.Distribution.Uniform"/> generator.
            </param>
            <param name="scale">
            The scale parameter.  This value is often referred to as
            <em>alpha</em>.</param>
            <param name="shape">
            The shape parameter.  This value is often referred to as
            <em>beta</em>.
            </param>
        </member>
        <member name="M:React.Distribution.Weibull.NextDouble">
            <summary>
            Generates the next random value according to a Weibull
            distribution.
            </summary>
            <returns>
            The next random value.
            </returns>
        </member>
        <member name="P:React.Distribution.Weibull.Scale">
            <summary>
            Gets or sets the scale parameter.
            </summary>
            <remarks>
            The scale parameter is often shown as <em>alpha</em>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The scale parameter as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="P:React.Distribution.Weibull.Shape">
            <summary>
            Gets or sets the shape parameter.
            </summary>
            <remarks>
            The shape parameter is often shown as <em>beta</em>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set this property to a value less than or
            equal to zero (0.0).
            </exception>
            <value>
            The shape parameter as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.Count">
            <summary>
            A <see cref="T:React.Monitoring.Statistic"/> that keeps a running count of a series of
            observations.
            </summary>
        </member>
        <member name="T:React.Monitoring.Statistic">
            <summary>
            A <see cref="T:React.Monitoring.Monitor"/> that computes a simple, non-weighted summary
            statistical value.
            </summary>
            <remarks>
            <para>
            All of the simple, non-weighted and non-time-dependent summary
            statistics classes in React.NET are derived from
            <see cref="T:React.Monitoring.Statistic"/>.
            </para>
            <para>
            <see cref="T:React.Monitoring.Statistic"/> instances are designed to be used to monitor
            value changes on properties or to be used to compute summary
            statistical values on arbitrary sets of observations.
            </para>
            </remarks>
        </member>
        <member name="T:React.Monitoring.Monitor">
            <summary>
            An object that monitors property value changes that occur on another
            object.
            </summary>
            <remarks>
            A monitoring object is an object that wants to be informed that some
            property on another object has changed.
            </remarks>
        </member>
        <member name="M:React.Monitoring.Monitor.#ctor">
            <summary>
            Create a new <see cref="T:React.Monitoring.Monitor"/> instance.
            </summary>
        </member>
        <member name="M:React.Monitoring.Monitor.Attach(System.Object,System.String)">
            <summary>
            Attach the <see cref="T:React.Monitoring.Monitor"/> to an object's property by name.
            </summary>
            <remarks>
            <para>
            Attaching a <see cref="T:React.Monitoring.Monitor"/> to a property starts the
            <see cref="T:React.Monitoring.Monitor"/> receiving value change notifications.
            </para>
            <para>
            Subclasses should implement this method to create an
            <b>EventHandler&lt;</b>
            <see cref="T:React.Monitoring.ValueChangedEventArgs"/><b>&gt;</b> delegate and then call the
            protected
            <see cref="M:React.Monitoring.Monitor.Attach(System.Object,System.String,System.EventHandler{React.Monitoring.ValueChangedEventArgs})"/>
            method.  A typical implementation might look like the following:
            </para>
            <code><![CDATA[
            public override void Attach(object target, string propertyName)
            {
                // Create the delegate.
                EventHandler<ValueChangedEventArgs> handler =
                    new EventHandler<ValueChangedEventArgs>(HandlerMethod);
            
                // Attach the delegate, 'handler', to the monitorable property.
                object value = Attach(target, propertyName, handler);
            
                // do something with 'value' if required
            }
            
            private void HandlerMethod(object sender, ValueChangedEventArgs args)
            {
                // handle the notification here...
            }]]></code>
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will be monitored.
            </param>
            <param name="propertyName">
            The name of a property on <paramref name="target"/> to monitor.
            </param>
        </member>
        <member name="M:React.Monitoring.Monitor.Attach(System.Object,System.String,System.EventHandler{React.Monitoring.ValueChangedEventArgs})">
            <summary>
            Attach the given value changed event handler delegate to monitor
            a property on the given target object.
            </summary>
            <remarks>
            This method is normally invoked by
            <see cref="M:React.Monitoring.Monitor.Attach(System.Object,System.String)"/> to start the given
            <paramref name="valueChangedHandler"/> receiving property
            notifications from <paramref name="target"/>.
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will be monitored.
            </param>
            <param name="propertyName">
            The name of a property on <paramref name="target"/> to monitor.
            </param>
            <param name="valueChangeHandler">
            The delegate that will handle property change notifications sent by
            <paramref name="target"/>.
            </param>
            <returns>
            The current value of <paramref name="target"/>'s property named
            <paramref name="propertyName"/>
            </returns>
        </member>
        <member name="M:React.Monitoring.Monitor.Detach(System.Object,System.String)">
            <summary>
            Detach the <see cref="T:React.Monitoring.Monitor"/> from an object's property by name.
            </summary>
            <remarks>
            <para>
            Detaching a <see cref="T:React.Monitoring.Monitor"/> from a property stops the
            <see cref="T:React.Monitoring.Monitor"/> receiving value change notifications.
            </para>
            <para>
            Subclasses should implement this method to create a
            <b>EventHandler&lt;</b>
            <see cref="T:React.Monitoring.ValueChangedEventArgs"/><b>&gt;</b> delegate and then
            call the protected
            <see cref="M:React.Monitoring.Monitor.Detach(System.Object,System.String,System.EventHandler{React.Monitoring.ValueChangedEventArgs})"/>
            method.  A typical implementation might look like the following:
            </para>
            <code><![CDATA[
            public override void Detach(object target, string propertyName)
            {
                EventHandler<ValueChangedEventArgs> handler =
                    new EventHandler<ValueChangedEventArgs>(HandlerMethod);
                object value = Detach(target, propertyName, handler);
                // do something with 'value' if required
            }
            
            private void HandlerMethod(object sender, ValueChangedEventArgs args)
            {
                // handle the notification here...
            }]]></code>
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/> is
            to stop being monitored.
            </param>
            <param name="propertyName">
            The name of a property on <paramref name="obj"/> to stop
            monitoring.
            </param>
        </member>
        <member name="M:React.Monitoring.Monitor.Detach(System.Object,System.String,System.EventHandler{React.Monitoring.ValueChangedEventArgs})">
            <summary>
            Detach the given value changed event handler delegate from a
            property on the given target object.
            </summary>
            <remarks>
            This method is normally invoked by
            <see cref="M:React.Monitoring.Monitor.Detach(System.Object,System.String)"/> to stop the given
            <paramref name="valueChangedHandler"/> from receiving property
            notifications from <paramref name="target"/>.
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will be monitored.
            </param>
            <param name="propertyName">
            The name of a property on <paramref name="target"/> to monitor.
            </param>
            <param name="valueChangedHandler">
            The delegate that will handle property change notifications sent by
            <paramref name="target"/>.
            </param>
            <returns>
            The current value of <paramref name="target"/>'s property named
            <paramref name="propertyName"/>
            </returns>
        </member>
        <member name="M:React.Monitoring.Monitor.ConnectHandler(System.Object,System.String,System.EventHandler{React.Monitoring.ValueChangedEventArgs},System.Boolean)">
            <summary>
            Connect or disconnect a value changed event handler (delegate)
            to/from an object.
            </summary>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            which will have <paramref name="valueChangedHandler"/> added to or
            removed from receiving property change notifications.
            </param>
            <param name="propertyName">
            The name of a monitorable property on <paramref name="target"/>
            that <paramref name="valueChangedHandler"/> will start or stop
            monitoring.
            </param>
            <param name="valueChangedHandler">
            The delegate to add or remove.
            </param>
            <param name="connect">
            <b>true</b> to start monitoring; or <b>false</b> to stop monitoring.
            </param>
            <returns></returns>
        </member>
        <member name="M:React.Monitoring.Monitor.FindProperty(System.Type,System.String)">
            <summary>
            Finds and returns the <see cref="T:System.Reflection.PropertyInfo"/> for a named
            property on the given <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to search for the <see cref="T:System.Reflection.PropertyInfo"/>
            for a property named <paramref name="propertyName"/>.
            </param>
            <param name="propertyName">
            The name of a property on <paramref name="type"/>.
            </param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> for the requested property.
            </returns>
        </member>
        <member name="M:React.Monitoring.Monitor.FindMonitoringEvent(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Find and return the <see cref="T:System.Reflection.EventInfo"/> for the value changed
            event associated with the specified <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
            <param name="type">
            The <see cref="T:System.Type"/> to search for the value changed event
            associated with <paramref name="propinfo"/>.
            </param>
            <param name="propinfo">
            The <see cref="T:System.Reflection.PropertyInfo"/> for the monitored property.
            </param>
            <returns>
            The <see cref="T:System.Reflection.EventInfo"/> for the value changed
            event associated with <paramref name="propinfo"/>.
            </returns>
        </member>
        <member name="F:React.Monitoring.Statistic._nObservations">
            <summary>The number of observations.</summary>
        </member>
        <member name="M:React.Monitoring.Statistic.#ctor">
            <summary>
            Create a new <see cref="T:React.Monitoring.Statistic"/> instance.
            </summary>
        </member>
        <member name="M:React.Monitoring.Statistic.Observe(System.Double)">
            <summary>
            Make an observation of a single <see cref="T:System.Double"/> value.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is a <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/>, or
            <see cref="F:System.Double.NegativeInfinity"/>.
            </exception>
            <param name="value">
            The value to observe.
            </param>
        </member>
        <member name="M:React.Monitoring.Statistic.Observe(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Iterate through each <see cref="T:System.Double"/> value in the given
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> observing each one.
            </summary>
            <remarks>
            This method will invoke <see cref="M:React.Monitoring.Statistic.Observe(System.Double)"/> for each
            <see cref="T:System.Double"/> in <paramref name="values"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If any of the values in <paramref name="values"/> is a
            <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, or
            <see cref="F:System.Double.NegativeInfinity"/>.
            </exception>
            <param name="values">
            The values to iterate over and observe.
            </param>
            <returns>
            The value of the <see cref="T:React.Monitoring.Statistic"/> after observing each
            <see cref="T:System.Double"/> in <paramref name="values"/>.
            </returns>
        </member>
        <member name="M:React.Monitoring.Statistic.Observe(System.Collections.IEnumerable)">
            <summary>
            Iterate through each <see cref="T:System.Double"/> value in the given
            <see cref="T:System.Collections.IEnumerable"/> observing each one.
            </summary>
            <remarks>
            This method will invoke <see cref="M:React.Monitoring.Statistic.Observe(System.Double)"/> for each
            object in <paramref name="values"/>.  Each object must be
            convertable to a <see cref="T:System.Double"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="values"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If any of the values in <paramref name="values"/> is a
            <see cref="F:System.Double.NaN"/>, <see cref="F:System.Double.PositiveInfinity"/>, or
            <see cref="F:System.Double.NegativeInfinity"/>.
            </exception>
            <param name="values">
            The values to iterate over and observe.
            </param>
            <returns>
            The value of the <see cref="T:React.Monitoring.Statistic"/> after observing each
            <see cref="T:System.Double"/> in <paramref name="values"/>.
            </returns>
        </member>
        <member name="M:React.Monitoring.Statistic.Attach(System.Object,System.String)">
            <summary>
            Begin monitoring a property on the given object.
            </summary>
            <remarks>
            <para>
            This method simply invokes
            </para>
            <code>Attach(target, propertyName, OnValueChanged);</code>
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will be monitored.
            </param>
            <param name="propertyName">
            The name of a property of <paramref name="target"/> to monitor.
            </param>
        </member>
        <member name="M:React.Monitoring.Statistic.Detach(System.Object,System.String)">
            <summary>
            End monitoring a property on the given object.
            </summary>
            <remarks>
            <para>
            This method simply invokes
            </para>
            <code>Detach(target, propertyName, OnValueChanged);</code>
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will stop being monitored.</param>
            <param name="propertyName">
            The name of a property of <paramref name="target"/> to stop
            monitoring.
            </param>
        </member>
        <member name="M:React.Monitoring.Statistic.OnValueChanged(System.Object,React.Monitoring.ValueChangedEventArgs)">
            <summary>
            Event handler for property change notifications.
            </summary>
            <remarks>
            This method simply attempts to convert <c>args.NewValue</c> to
            a <see cref="T:System.Double"/> and then call <see cref="M:React.Monitoring.Statistic.Observe(System.Double)"/>.
            </remarks>
            <param name="sender">
            The object whose property has changed.
            </param>
            <param name="args">
            The <see cref="T:React.Monitoring.ValueChangedEventArgs"/> providing additional
            information about the property change.  Only <c>args.NewValue</c>
            is used.
            </param>
        </member>
        <member name="P:React.Monitoring.Statistic.Observations">
            <summary>
            Gets or sets the number of observations.
            </summary>
            <value>
            The number of observations as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.Statistic.Value">
            <summary>
            Gets the current value of the <see cref="T:React.Monitoring.Statistic"/>.
            </summary>
            <value>
            The current value as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="F:React.Monitoring.Count._count">
            <summary>
            The current count.
            </summary>
        </member>
        <member name="F:React.Monitoring.Count._increment">
            <summary>
            The value to increment <see cref="F:React.Monitoring.Count._count"/> by on each observation.
            </summary>
        </member>
        <member name="M:React.Monitoring.Count.#ctor">
            <overloads>
            Create and initialize a Count summary statistic instance.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Monitoring.Count"/> statistic that begins counting at
            zero (0) and increments by one (1).
            </summary>
        </member>
        <member name="M:React.Monitoring.Count.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:React.Monitoring.Count"/> statistic that begins counting at
            the specified value and increments by one (1).
            </summary>
            <param name="initialValue">
            The starting value for the <see cref="T:React.Monitoring.Count"/>.
            </param>
        </member>
        <member name="M:React.Monitoring.Count.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new <see cref="T:React.Monitoring.Count"/> statistic that counts using the
            specified starting value and increment.
            </summary>
            <param name="initialValue">
            The starting value for the <see cref="T:React.Monitoring.Count"/>.
            </param>
            <param name="increment">
            The value to increment by.</param>
        </member>
        <member name="M:React.Monitoring.Count.Observe(System.Double)">
            <summary>
            Record an observation.
            </summary>
            <remarks>
            This method increments the current count <see cref="P:React.Monitoring.Count.Value"/> by
            <see cref="P:React.Monitoring.Count.IncrementBy"/>.
            </remarks>
            <param name="value">Not used.</param>
        </member>
        <member name="M:React.Monitoring.Count.OnEvent(System.Object,System.EventArgs)">
            <summary>
            Method that allows counting of arbitrary events raised providing
            the event takes a <see cref="T:System.EventHandler"/>.
            </summary>
            <remarks>
            <para>
            This method allows the <see cref="T:React.Monitoring.Count"/> instance to count
            pretty much any event raised during a program run.  All that is
            required is that the event have the signature
            </para>
            <code>public event MyEvent(object sender, EventArgs args);</code>
            <para>
            which should be true for most .NET events.
            </para>
            </remarks>
            <param name="sender">Not used.</param>
            <param name="args">Not used.</param>
        </member>
        <member name="P:React.Monitoring.Count.IncrementBy">
            <summary>
            Gets or sets the value to increment the count by on each
            observation.
            </summary>
            <value>
            The value to increment the count by on each observation as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.Count.IntegerValue">
            <summary>
            Gets the <see cref="T:React.Monitoring.Count"/> value as an <see cref="T:System.Int32"/>.
            </summary>
            <value>
            The count as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.Count.Value">
            <summary>
            Gets the <see cref="T:React.Monitoring.Count"/> value as a <see cref="T:System.Double"/>.
            </summary>
            <value>
            The count as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.Maximum">
            <summary>
            A <see cref="T:React.Monitoring.Statistic"/> that computes the running maximum value of a
            series of observations.
            <seealso cref="T:React.Monitoring.Minimum"/>
            </summary>
        </member>
        <member name="F:React.Monitoring.Maximum._max">
            <summary>The current maximum value.</summary>
        </member>
        <member name="M:React.Monitoring.Maximum.#ctor">
            <overloads>
            Create and initialize a Maximum statictic.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Monitoring.Maximum"/> statistic.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.Maximum.Value"/> is invoked immediately after instantiating a
            <see cref="T:React.Monitoring.Maximum"/> instance using this constructor, the returned
            value is <see cref="F:System.Double.NaN"/>.
            </remarks>
        </member>
        <member name="M:React.Monitoring.Maximum.#ctor(System.Double)">
            <summary>
            Create a new <see cref="T:React.Monitoring.Maximum"/> statistic specifying the initial
            observation.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.Maximum.Value"/> is invoked immediately after instantiating a
            <see cref="T:React.Monitoring.Maximum"/> instance using this constructor, the returned
            value is <paramref name="initialObservation"/>.
            </remarks>
            <param name="initialObservation">
            The value of the initial observation.
            </param>
        </member>
        <member name="M:React.Monitoring.Maximum.Observe(System.Double)">
            <summary>
            Record an observation of the specified value.
            </summary>
            <remarks>
            Observed values are not stored by the <see cref="T:React.Monitoring.Maximum"/>
            instance, they are only used to compute the running maximum.
            </remarks>
            <param name="value">
            The value to observe.
            </param>
        </member>
        <member name="P:React.Monitoring.Maximum.Value">
            <summary>
            Gets the current value of the <see cref="T:React.Monitoring.Maximum"/> statistic.
            </summary>
            <remarks>
            If there have been no observations, <see cref="P:React.Monitoring.Maximum.Value"/> will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The current maximum observed value as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.Mean">
            <summary>
            A <see cref="T:React.Monitoring.Statistic"/> that computes the running mean (average)
            value of a series of observations.
            </summary>
        </member>
        <member name="F:React.Monitoring.Mean._accum">
            <summary>Sum of observations.</summary>
        </member>
        <member name="M:React.Monitoring.Mean.#ctor">
            <overloads>
            Create and initialize a Mean statictic.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Monitoring.Mean"/> statistic.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.Mean.Value"/> is invoked immediately after instantiating
            a <see cref="T:React.Monitoring.Mean"/> instance using this constructor, the returned
            value is <see cref="F:System.Double.NaN"/>.
            </remarks>
        </member>
        <member name="M:React.Monitoring.Mean.#ctor(System.Double)">
            <summary>
            Create a new <see cref="T:React.Monitoring.Mean"/> statistic specifying the initial
            observation.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.Mean.Value"/> is invoked immediately after instantiating
            a <see cref="T:React.Monitoring.Mean"/> instance using this constructor, the returned
            value is <paramref name="initialObservation"/>.
            </remarks>
            <param name="initialObservation">
            The value of the initial observation.
            </param>
        </member>
        <member name="M:React.Monitoring.Mean.Observe(System.Double)">
            <summary>
            Record an observation of the specified value.
            </summary>
            <remarks>
            Observed values are not stored by the <see cref="T:React.Monitoring.Mean"/> instance,
            they are only used to compute the running mean.
            </remarks>
            <param name="value">
            The value to observe.
            </param>
        </member>
        <member name="P:React.Monitoring.Mean.Value">
            <summary>
            Gets the current value of the <see cref="T:React.Monitoring.Mean"/> statistic.
            </summary>
            <remarks>
            If there have been no observations, <see cref="P:React.Monitoring.Mean.Value"/> will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The current mean (average) of the observations as a
            <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.Minimum">
            <summary>
            A <see cref="T:React.Monitoring.Statistic"/> that computes the running minimum value of a
            series of observations.
            <seealso cref="T:React.Monitoring.Maximum"/>
            </summary>
        </member>
        <member name="F:React.Monitoring.Minimum._min">
            <summary>The current minimum value.</summary>
        </member>
        <member name="M:React.Monitoring.Minimum.#ctor">
            <overloads>
            Create and initialize a Minimum statictic.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Monitoring.Minimum"/> statistic.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.Minimum.Value"/> is invoked immediately after instantiating a
            <see cref="T:React.Monitoring.Minimum"/> instance using this constructor, the returned
            value is <see cref="F:System.Double.NaN"/>.
            </remarks>
        </member>
        <member name="M:React.Monitoring.Minimum.#ctor(System.Double)">
            <summary>
            Create a new <see cref="T:React.Monitoring.Minimum"/> statistic specifying the initial
            observation.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.Minimum.Value"/> is invoked immediately after instantiating a
            <see cref="T:React.Monitoring.Minimum"/> instance using this constructor, the returned
            value is <paramref name="initialObservation"/>.
            </remarks>
            <param name="initialObservation">
            The value of the initial observation.
            </param>
        </member>
        <member name="M:React.Monitoring.Minimum.Observe(System.Double)">
            <summary>
            Record an observation of the specified value.
            </summary>
            <remarks>
            Observed values are not stored by the <see cref="T:React.Monitoring.Minimum"/>
            instance, they are only used to compute the running minimum.
            </remarks>
            <param name="value">
            The value to observe.
            </param>
        </member>
        <member name="P:React.Monitoring.Minimum.Value">
            <summary>
            Gets the current value of the <see cref="T:React.Monitoring.Minimum"/> statistic.
            </summary>
            <remarks>
            If there have been no observations, <see cref="P:React.Monitoring.Minimum.Value"/> will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The current minimum observed value as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.MonitorUsingAttribute">
            <summary>
            Marks a property as <em>monitorable</em> using the specified value
            change event.
            </summary>
            <remarks>
            <para>
            A monitorable property has an associated value changed event, an
            event whose handler delegate is of the type <b>EventHandler&lt;</b>
            <see cref="T:React.Monitoring.ValueChangedEventArgs"/>&gt;.  The value change event gets
            raised every time the associated property's value is updated.
            A <see cref="T:React.Monitoring.Monitor"/> can be added to the event as a handler and is
            thereby be able to respond to changes in the monitored property.
            </para>
            <para>
            <see cref="T:React.Monitoring.MonitorUsingAttribute"/> can only be placed on a property.
            </para>
            </remarks>
        </member>
        <member name="F:React.Monitoring.MonitorUsingAttribute._eventName">
            <summary>
            The name of the event associated with the monitorable property.
            </summary>
        </member>
        <member name="M:React.Monitoring.MonitorUsingAttribute.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:React.Monitoring.MonitorUsingAttribute"/> attribute
            instance.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="eventName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            If <paramref name="eventName"/> is empty (zero length).
            </exception>
            <param name="eventName">
            The name of the value change event that is associated with the
            monitorable property.
            </param>
        </member>
        <member name="P:React.Monitoring.MonitorUsingAttribute.EventName">
            <summary>
            Gets the name of the value change event that is associated with
            the monitorable property.
            </summary>
            <value>
            The event name as a <see cref="T:System.String"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.Recorder">
            <summary>
            A <see cref="T:React.Monitoring.Monitor"/> implementation that records (stores) all
            changes to the monitored property.
            </summary>
            <remarks>
            <para>
            The <see cref="T:React.Monitoring.Recorder"/> stores each property change as a
            <see cref="T:React.Monitoring.TimeValue"/>, which provides the simulation time that
            the property changed as well as the associated value.
            </para>
            <para>
            Data is stored in the <see cref="T:React.Monitoring.Recorder"/> in the order it was
            received.  Normally, this means data is ordered by simulation
            time.
            </para>
            </remarks>
        </member>
        <member name="F:React.Monitoring.Recorder._data">
            <summary>The backing data store.</summary>
        </member>
        <member name="M:React.Monitoring.Recorder.#ctor">
            <summary>
            Create an empty <see cref="T:React.Monitoring.Recorder"/> instance.
            </summary>
            <remarks>
            The <see cref="T:React.Monitoring.Recorder"/> will use an <see cref="T:System.Collections.Generic.List`1"/>
            to store <see cref="T:React.Monitoring.TimeValue"/> instances.
            </remarks>
        </member>
        <member name="M:React.Monitoring.Recorder.#ctor(System.Collections.Generic.ICollection{React.Monitoring.TimeValue})">
            <summary>
            Create a new <see cref="T:React.Monitoring.Recorder"/> that stores observations in the
            given <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="dataStore"/> is <see langword="null"/>.
            </exception>
            <param name="dataStore">
            The collection used to store observations.
            </param>
        </member>
        <member name="M:React.Monitoring.Recorder.Attach(System.Object,System.String)">
            <summary>
            Attach the <see cref="T:React.Monitoring.Recorder"/> to an object's property by name.
            </summary>
            <remarks>
            Attaching a <see cref="T:React.Monitoring.Recorder"/> to a property starts the
            <see cref="T:React.Monitoring.Recorder"/> receiving <see cref="M:React.Monitoring.Recorder.ValueChanged(System.Object,React.Monitoring.ValueChangedEventArgs)"/>
            notifications.
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will be monitored.
            </param>
            <param name="propertyName">
            The name of a property on <paramref name="target"/> to monitor.
            </param>
        </member>
        <member name="M:React.Monitoring.Recorder.Detach(System.Object,System.String)">
            <summary>
            Detach the <see cref="T:React.Monitoring.Recorder"/> from an object's property by name.
            </summary>
            <remarks>
            Detaching a <see cref="T:React.Monitoring.Recorder"/> from a property stops the
            <see cref="T:React.Monitoring.Recorder"/> receiving <see cref="M:React.Monitoring.Recorder.ValueChanged(System.Object,React.Monitoring.ValueChangedEventArgs)"/>
            notifications.
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/> is
            to stop being monitored.
            </param>
            <param name="propertyName">
            The name of a property on <paramref name="obj"/> to stop
            monitoring.
            </param>
        </member>
        <member name="M:React.Monitoring.Recorder.GetEnumerator">
            <summary>
            Returns the enumerator that allows iteration over the recorded
            <see cref="T:React.Monitoring.TimeValue"/> instances.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that allows iteration over the
            recorded <see cref="T:React.Monitoring.TimeValue"/> instances.
            </returns>
        </member>
        <member name="M:React.Monitoring.Recorder.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator that allows iteration over the recorded
            <see cref="T:React.Monitoring.TimeValue"/> instances.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that allows
            iteration over the recorded <see cref="T:React.Monitoring.TimeValue"/> instances.
            </returns>
        </member>
        <member name="M:React.Monitoring.Recorder.Clear">
            <summary>
            Clears all recorded items from the <see cref="T:React.Monitoring.Recorder"/>.
            </summary>
        </member>
        <member name="M:React.Monitoring.Recorder.ValueChanged(System.Object,React.Monitoring.ValueChangedEventArgs)">
            <summary>
            Delegate method that handles <see cref="M:React.Monitoring.Recorder.ValueChanged(System.Object,React.Monitoring.ValueChangedEventArgs)"/>
            notifications.
            </summary>
            <remarks>
            This method creates a new <see cref="T:React.Monitoring.TimeValue"/> and adds it
            to the collection.  The <see cref="T:React.Monitoring.TimeValue"/> records the
            observation time and value.
            </remarks>
            <param name="sender">The message sender.</param>
            <param name="args">
            Information about the <see cref="M:React.Monitoring.Recorder.ValueChanged(System.Object,React.Monitoring.ValueChangedEventArgs)"/> notification.
            </param>
        </member>
        <member name="P:React.Monitoring.Recorder.Data">
            <summary>
            Gets or sets the <see cref="T:System.Collections.Generic.ICollection`1"/> used to store
            observations.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If an attempt is made to set this property to
            <see langword="null"/>.
            </exception>
            <value>
            The data store as an <b>ICollection&lt;</b>
            <see cref="T:React.Monitoring.TimeValue"/><b>&gt;</b>
            </value>
        </member>
        <member name="P:React.Monitoring.Recorder.Count">
            <summary>
            Gets the number of recorded <see cref="T:React.Monitoring.TimeValue"/> instances.
            </summary>
            <value>
            The number of recorded items as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.StandardDeviation">
            <summary>
            A <see cref="T:React.Monitoring.Statistic"/> that computes the running standard
            deviation of a series of observations.
            </summary>
            <remarks>
            <para>
            <see cref="T:React.Monitoring.StandardDeviation"/> simply makes use of an internal
            <see cref="P:React.Monitoring.StandardDeviation.Variance"/> instance to perform all calculations.
            </para>
            <para>
            The <see cref="T:React.Monitoring.StandardDeviation"/> can compute both the
            <em>population</em> and <em>sample</em> standard deviation.  By default
            it computes the population standard deviation.  Use the
            <see cref="P:React.Monitoring.StandardDeviation.IsSample"/> property to switch to computing the sample
            standard deviation.
            </para>
            </remarks>
        </member>
        <member name="F:React.Monitoring.StandardDeviation._variance">
            <summary>
            <see cref="P:React.Monitoring.StandardDeviation.Variance"/> instance used to do all the computing.
            </summary>
        </member>
        <member name="M:React.Monitoring.StandardDeviation.#ctor">
            <overloads>
            Create and initialize a StandardDeviation statistic.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Monitoring.StandardDeviation"/> statistic.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.StandardDeviation.Value"/> is invoked immediately after instantiating a
            <see cref="T:React.Monitoring.StandardDeviation"/> instance using this constructor,
            the returned value is <see cref="F:System.Double.NaN"/>.
            </remarks>
        </member>
        <member name="M:React.Monitoring.StandardDeviation.#ctor(System.Double)">
            <summary>
            Create a new <see cref="T:React.Monitoring.StandardDeviation"/> statistic specifying
            the initial observation.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.StandardDeviation.Value"/> is invoked immediately after instantiating a
            <see cref="T:React.Monitoring.StandardDeviation"/> instance using this constructor, the
            returned value is zero (0.0).
            </remarks>
            <param name="initialObservation">
            The value of the initial observation.
            </param>
        </member>
        <member name="M:React.Monitoring.StandardDeviation.Observe(System.Double)">
            <summary>
            Record an observation of the specified value.
            </summary>
            <remarks>
            Observed values are not stored by the
            <see cref="T:React.Monitoring.StandardDeviation"/> instance, they are only used to
            compute the running standard deviation.
            </remarks>
            <param name="value">
            The value to observe.
            </param>
        </member>
        <member name="P:React.Monitoring.StandardDeviation.IsSample">
            <summary>
            Gets or sets whether the <see cref="T:React.Monitoring.StandardDeviation"/> is
            computing a sample standard deviation.
            </summary>
            <value>
            <b>true</b> when computing the sample standard deviation; or
            <b>false</b> when computing the population standard deviation.
            </value>
        </member>
        <member name="P:React.Monitoring.StandardDeviation.Variance">
            <summary>
            Gets the variance based on the current value of the internal
            <see cref="T:React.Monitoring.Variance"/> instance used to perform
            all the computation for the <see cref="T:React.Monitoring.StandardDeviation"/>.
            <seealso cref="P:React.Monitoring.Variance.Value"/>
            </summary>
            <remarks>
            If there have been no observations, this property will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The variance of observed values.
            </value>
        </member>
        <member name="P:React.Monitoring.StandardDeviation.Value">
            <summary>
            Gets the current value of the <see cref="T:React.Monitoring.StandardDeviation"/>
            statistic.
            </summary>
            <remarks>
            If there have been no observations, <see cref="P:React.Monitoring.StandardDeviation.Value"/> will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The current standard deviation observed value as a
            <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.StatisticsSet">
            <summary>
            A set of <see cref="T:React.Monitoring.Statistic"/>s collected and computed from the
            same monitorable property.
            </summary>
        </member>
        <member name="F:React.Monitoring.StatisticsSet._statistics">
            <summary>
            The set of <see cref="T:React.Monitoring.Statistic"/> instances keyed by their
            <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.#ctor">
            <overloads>
            Create and initialize a StatisticsSet instance.
            </overloads>
            <summary>
            Create a new, empty <see cref="T:React.Monitoring.StatisticsSet"/> instance.
            </summary>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.#ctor(System.Collections.Generic.IEnumerable{React.Monitoring.Statistic})">
            <summary>
            Create a new <see cref="T:React.Monitoring.StatisticsSet"/> that contains the
            given <see cref="T:React.Monitoring.Statistic"/> instances.
            </summary>
            <remarks>
            Any <see langword="null"/> references in <paramref name="statistics"/>
            are silently ignored.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="statistics"/> is <see langword="null"/>.
            </exception>
            <param name="statistics">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance that
            contains one or more <see cref="T:React.Monitoring.Statistic"/> objects.
            </param>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Create a new <see cref="T:React.Monitoring.StatisticsSet"/> that contains
            <see cref="T:React.Monitoring.Statistic"/> instances of the given <see cref="T:System.Type"/>s.
            </summary>
            <remarks>
            <para>
            This constructor is most useful for creating a new
            <see cref="T:React.Monitoring.StatisticsSet"/> instance that will contain the same
            type of <see cref="T:React.Monitoring.Statistic"/> in another
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </para>
            <para>
            All of the <see cref="T:System.Type"/>s in <paramref name="statisticTypes"/>
            must have a public, no-arg constructor for the
            <see cref="T:React.Monitoring.StatisticsSet"/> to be able to instantiate the actual
            <see cref="T:React.Monitoring.Statistic"/> instances.
            </para>
            <para>
            Any <see langword="null"/> references in
            <paramref name="statisticTypes"/> are silently ignored.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="statisticTypes"/> is <see langword="null"/>.
            </exception>
            <param name="statisticTypes">
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> instances that contains the
            <see cref="T:System.Type"/> of <see cref="T:React.Monitoring.Statistic"/>s to include in the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </param>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.Attach(System.Object,System.String)">
            <summary>
            Begin monitoring a property on the given object.
            </summary>
            <remarks>
            This method invokes the <see cref="M:React.Monitoring.Statistic.Attach(System.Object,System.String)"/> method
            for each of the contained <see cref="T:React.Monitoring.Statistic"/> instances.
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will be monitored.
            </param>
            <param name="propertyName">
            The name of a property of <paramref name="target"/> to monitor.
            </param>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.Detach(System.Object,System.String)">
            <summary>
            End monitoring a property on the given object.
            </summary>
            <remarks>
            This method invokes the <see cref="M:React.Monitoring.Statistic.Detach(System.Object,System.String)"/> method
            for each of the contained <see cref="T:React.Monitoring.Statistic"/> instances.
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will stop being monitored.</param>
            <param name="propertyName">
            The name of a property of <paramref name="target"/> to stop
            monitoring.
            </param>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.Add(System.Type,React.Monitoring.Statistic)">
            <summary>
            Adds a <see cref="T:React.Monitoring.Statistic"/> to the <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
            <param name="key">
            The <see cref="T:System.Type"/> of the <see cref="T:React.Monitoring.Statistic"/> to add.
            </param>
            <param name="value">
            The <see cref="T:React.Monitoring.Statistic"/> to add to the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </param>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.ContainsKey(System.Type)">
            <summary>
            Checks of a <see cref="T:React.Monitoring.Statistic"/> of the given <see cref="T:System.Type"/>
            is present in the <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
            <param name="key">
            The <see cref="T:System.Type"/> to look for in the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </param>
            <returns>
            <b>true</b> if the <see cref="T:React.Monitoring.StatisticsSet"/> contains a
            <see cref="T:React.Monitoring.Statistic"/> of the given <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.Remove(System.Type)">
            <summary>
            Remove the <see cref="T:React.Monitoring.Statistic"/> of the given <see cref="T:System.Type"/>
            from the <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
            <param name="key">
            The <see cref="T:System.Type"/> of <see cref="T:React.Monitoring.Statistic"/> to remove.
            </param>
            <returns>
            <b>true</b> if the <see cref="T:React.Monitoring.Statistic"/> was removed.
            </returns>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.TryGetValue(System.Type,React.Monitoring.Statistic@)">
            <summary>
            Attempts to get the <see cref="T:React.Monitoring.Statistic"/> of the specified
            <see cref="T:System.Type"/>.
            </summary>
            <param name="key">
            The <see cref="T:System.Type"/> of <see cref="T:React.Monitoring.Statistic"/> to retrieve.
            </param>
            <param name="value">
            When this method returns, the value associated with
            <paramref name="key"/>, if the key is found; otherwise,
            <see langword="null"/>.  This parameter is passed uninitialized.
            </param>
            <returns>
            <b>true</b> if the <see cref="T:React.Monitoring.StatisticsSet"/> contains a
            <see cref="T:React.Monitoring.Statistic"/> with the specified key; otherwise,
            <b>false</b>.
            </returns>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.Add(System.Collections.Generic.KeyValuePair{System.Type,React.Monitoring.Statistic})">
            <summary>
            Adds the given <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
            <remarks>
            This method is not normally called from client code.
            </remarks>
            <param name="item">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to add.
            </param>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.Clear">
            <summary>
            Removes all <see cref="T:React.Monitoring.Statistic"/> instances from the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.Contains(System.Collections.Generic.KeyValuePair{System.Type,React.Monitoring.Statistic})">
            <summary>
            Check if the given <see cref="T:System.Collections.Generic.KeyValuePair`2"/> is
            contained in the <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
            <remarks>
            This method is not normally called from client code.
            </remarks>
            <param name="item">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to search for in the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </param>
            <returns>
            <b>true</b> if <paramref name="item"/> is in the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </returns>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.CopyTo(System.Collections.Generic.KeyValuePair{System.Type,React.Monitoring.Statistic}[],System.Int32)">
            <summary>
            Copies all the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> in the
            <see cref="T:React.Monitoring.StatisticsSet"/> to the given <see cref="T:System.Array"/>.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from <see cref="T:React.Monitoring.StatisticsSet"/>. The
            <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying
            begins.
            </param>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.Remove(System.Collections.Generic.KeyValuePair{System.Type,React.Monitoring.Statistic})">
            <summary>
            Removes a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> from the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
            <remarks>
            This method is not normally called from client code.
            </remarks>
            <param name="item">
            The <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to remove.
            </param>
            <returns>
            <b>true</b> if <paramref name="item"/> was removed.
            </returns>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.GetEnumerator">
            <summary>
            Returns the enumerator that allows iteration over the
            <see cref="T:React.Monitoring.Statistic"/> instances.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that allows iteration over the
            <see cref="T:React.Monitoring.Statistic"/> instances.
            </returns>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator that allows iteration over the
            <see cref="T:React.Monitoring.Statistic"/> instances.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that allows
            iteration over the <see cref="T:React.Monitoring.Statistic"/> instances.
            </returns>
        </member>
        <member name="M:React.Monitoring.StatisticsSet.EnsureCreated">
            <summary>
            Ensure that all the <see cref="T:React.Monitoring.Statistic"/> instances are
            instantiated.
            </summary>
        </member>
        <member name="P:React.Monitoring.StatisticsSet.Keys">
            <summary>
            Gets the <see cref="T:System.Type"/>s of the <see cref="T:React.Monitoring.Statistic"/>s
            contained in the <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the
            <see cref="T:System.Type"/>s of <see cref="T:React.Monitoring.Statistic"/> instances in the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.StatisticsSet.Values">
            <summary>
            Gets the <see cref="T:React.Monitoring.Statistic"/>s contained in the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
            <value>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing all the
            <see cref="T:React.Monitoring.Statistic"/> instances in the
            <see cref="T:React.Monitoring.StatisticsSet"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.StatisticsSet.Item(System.Type)">
            <summary>
            Gets or sets the <see cref="T:React.Monitoring.Statistic"/> having the
            specified <see cref="T:System.Type"/>.
            </summary>
            <param name="key">
            The <see cref="T:System.Type"/> <see cref="T:React.Monitoring.Statistic"/> to get or set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If an attempt is made to set a value to <see langword="null"/>.
            </exception>
            <returns>
            The <see cref="T:React.Monitoring.Statistic"/> having the <see cref="T:System.Type"/> specified
            by <paramref name="key"/>.
            </returns>
        </member>
        <member name="P:React.Monitoring.StatisticsSet.Count">
            <summary>
            Gets the number of <see cref="T:React.Monitoring.Statistic"/> instances that are
            members of the <see cref="T:React.Monitoring.StatisticsSet"/>.
            </summary>
            <value>
            The number of <see cref="T:React.Monitoring.Statistic"/> instances in the
            <see cref="T:React.Monitoring.StatisticsSet"/> as an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.StatisticsSet.IsReadOnly">
            <summary>
            Gets whether or not the <see cref="T:React.Monitoring.StatisticsSet"/> is read-only.
            </summary>
            <value>
            <b>true</b> if the <see cref="T:React.Monitoring.StatisticsSet"/> is read-only;
            otherwise <b>false</b>.
            </value>
        </member>
        <member name="T:React.Monitoring.TimeValue">
            <summary>
            An immutable object that represents a <see cref="T:System.Double"/> value
            observed at a particular simulation time.
            </summary>
        </member>
        <member name="F:React.Monitoring.TimeValue.SortByTime">
            <summary>
            An <see cref="T:System.Collections.IComparer"/> that can be used to sort
            <see cref="T:React.Monitoring.TimeValue"/> instances by time.
            </summary>
            <remarks>
            <para>
            This <see cref="T:System.Collections.IComparer"/> compares <see cref="T:React.Monitoring.TimeValue"/>s
            using their <see cref="P:React.Monitoring.TimeValue.Time"/> property.
            </para>
            <para>
            This object can safely be cast to an
            <see cref="T:System.Collections.Generic.IComparer`1"/> instance.
            </para>
            </remarks>
        </member>
        <member name="F:React.Monitoring.TimeValue.SortByValue">
            <summary>
            An <see cref="T:System.Collections.IComparer"/> that can be used to sort
            <see cref="T:React.Monitoring.TimeValue"/> instances by value.
            </summary>
            <remarks>
            <para>
            This <see cref="T:System.Collections.IComparer"/> compares <see cref="T:React.Monitoring.TimeValue"/>s
            using their <see cref="P:React.Monitoring.TimeValue.Value"/> property.
            </para>
            <para>
            This object can safely be cast to an
            <see cref="T:System.Collections.Generic.IComparer`1"/> instance.
            </para>
            </remarks>
        </member>
        <member name="F:React.Monitoring.TimeValue.Invalid">
            <summary>
            An invalid <see cref="T:React.Monitoring.TimeValue"/>.
            </summary>
            <remarks>
            This <see cref="T:React.Monitoring.TimeValue"/> has a <see cref="P:React.Monitoring.TimeValue.Value"/> of
            <see cref="F:System.Double.NaN"/> and a <see cref="P:React.Monitoring.TimeValue.Time"/> of -1L.
            Its <see cref="P:React.Monitoring.TimeValue.IsValid"/> property is always <b>false</b>.
            </remarks>
        </member>
        <member name="F:React.Monitoring.TimeValue._time">
            <summary>
            The simulation time <see cref="F:React.Monitoring.TimeValue._value"/> was observed.
            </summary>
        </member>
        <member name="F:React.Monitoring.TimeValue._value">
            <summary>
            The value observed at <see cref="F:React.Monitoring.TimeValue._time"/>.
            </summary>
        </member>
        <member name="M:React.Monitoring.TimeValue.#ctor(System.Int64,System.Double)">
            <summary>
            Create a new <see cref="T:React.Monitoring.TimeValue"/> for the given time and
            value pair.
            </summary>
            <param name="time">
            The simulation time at which <paramref name="value"/> was observed.
            </param>
            <param name="value">
            The value observed at <paramref name="time"/>.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeValue.Equals(System.Object)">
            <summary>
            Test if this <see cref="T:React.Monitoring.TimeValue"/> is equal to the given object.
            </summary>
            <remarks>
            If <paramref name="obj"/> is a <see cref="T:React.Monitoring.TimeValue"/> instance,
            this method simply delegates the test for equality to
            <see cref="M:System.Object.Equals(System.Object)"/>.  If
            <paramref name="obj"/> is not a <see cref="T:React.Monitoring.TimeValue"/>, this
            method always returns <b>false</b>.
            </remarks>
            <param name="obj">
            The object to test for equality against.
            </param>
            <returns>
            <b>true</b> if <paramref name="obj"/> is a <see cref="T:React.Monitoring.TimeValue"/>
            and is equal to this <see cref="T:React.Monitoring.TimeValue"/>; otherwise
            <b>false</b>.
            </returns>
        </member>
        <member name="M:React.Monitoring.TimeValue.GetHashCode">
            <summary>
            Returns the <see cref="T:System.Int32"/> hash code for the
            <see cref="T:React.Monitoring.TimeValue"/>.
            </summary>
            <remarks>
            <para>
            The hash code is computed as
            </para>
            <code>Time.GetHashCode() ^ Value.GetHashCode()</code>
            </remarks>
            <returns>
            The hash code as an <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:React.Monitoring.TimeValue.op_Equality(React.Monitoring.TimeValue,React.Monitoring.TimeValue)">
            <summary>
            Test if two <see cref="T:React.Monitoring.TimeValue"/> instances are equal.
            </summary>
            <remarks>
            Two <see cref="T:React.Monitoring.TimeValue"/> instances are considered to be equal if
            their <see cref="P:React.Monitoring.TimeValue.Time"/> and <see cref="P:React.Monitoring.TimeValue.Value"/> properties are
            equal.
            </remarks>
            <param name="t1">
            The <see cref="T:React.Monitoring.TimeValue"/> to test for equality against
            <paramref name="t2"/>.
            </param>
            <param name="t2">
            The <see cref="T:React.Monitoring.TimeValue"/> to test for equality against
            <paramref name="t1"/>.
            </param>
            <returns>
            <b>true</b> if <paramref name="t1"/> equals <paramref name="t2"/>
            or <b>false</b> if <paramref name="t1"/> does not equal
            <paramref name="t2"/>.
            </returns>
        </member>
        <member name="M:React.Monitoring.TimeValue.op_Inequality(React.Monitoring.TimeValue,React.Monitoring.TimeValue)">
            <summary>
            Test if two <see cref="T:React.Monitoring.TimeValue"/> instances are not equal.
            </summary>
            <remarks>
            Two <see cref="T:React.Monitoring.TimeValue"/> instances are considered to be inequal
            if either their <see cref="P:React.Monitoring.TimeValue.Time"/> or <see cref="P:React.Monitoring.TimeValue.Value"/>
            properties are inequal.
            </remarks>
            <param name="t1">
            The <see cref="T:React.Monitoring.TimeValue"/> to test for inequality against
            <paramref name="t2"/>.
            </param>
            <param name="t2">
            The <see cref="T:React.Monitoring.TimeValue"/> to test for inequality against
            <paramref name="t1"/>.
            </param>
            <returns>
            <b>true</b> if <paramref name="t1"/> does not equal
            <paramref name="t2"/> or <b>false</b> if <paramref name="t1"/>
            equals <paramref name="t2"/>.
            </returns>
        </member>
        <member name="M:React.Monitoring.TimeValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> representation of the
            <see cref="T:React.Monitoring.TimeValue"/>.
            </summary>
            <remarks>
            The returned <see cref="T:System.String"/> is formatted as
            <b>[time=<em>time</em>, value=<em>value</em>]</b>.
            </remarks>
            <returns>
            A <see cref="T:System.String"/> representation of the
            <see cref="T:React.Monitoring.TimeValue"/>.
            </returns>
        </member>
        <member name="P:React.Monitoring.TimeValue.IsValid">
            <summary>
            Gets whether this <see cref="T:React.Monitoring.TimeValue"/> represents a valid
            observation.
            </summary>
            <remarks>
            A <see cref="T:React.Monitoring.TimeValue"/> is valid if its <see cref="P:React.Monitoring.TimeValue.Value"/> is
            not a <see cref="F:System.Double.NaN"/> and its <see cref="P:React.Monitoring.TimeValue.Time"/> is
            non-negative.
            </remarks>
            <value>
            <b>true</b> if valid; otherwise <b>false</b>.
            </value>
        </member>
        <member name="P:React.Monitoring.TimeValue.Time">
            <summary>
            Gets the simulation time that <see cref="P:React.Monitoring.TimeValue.Value"/> was observed.
            </summary>
            <value>
            The simulation time that <see cref="P:React.Monitoring.TimeValue.Value"/> was observed as an
            <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.TimeValue.Value">
            <summary>
            Gets the value observed at <see cref="P:React.Monitoring.TimeValue.Time"/>.
            </summary>
            <value>
            The value observed at <see cref="P:React.Monitoring.TimeValue.Time"/> as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.TimeValue.ByTimeComparer">
            <summary>
            <see cref="T:System.Collections.IComparer"/> implementation that compares two
            <see cref="T:React.Monitoring.TimeValue"/>s by <see cref="P:React.Monitoring.TimeValue.Time"/>.
            </summary>
        </member>
        <member name="T:React.Monitoring.TimeValue.ByValueComparer">
            <summary>
            <see cref="T:System.Collections.IComparer"/> implementation that compares two
            <see cref="T:React.Monitoring.TimeValue"/>s by <see cref="P:React.Monitoring.TimeValue.Value"/>.
            </summary>
        </member>
        <member name="T:React.Monitoring.TimeWeightedMean">
            <summary>
            A <see cref="T:React.Monitoring.TimeWeightedStatistic"/> that computes the running
            time-weighted mean (average) value of a series of observations.
            </summary>
        </member>
        <member name="T:React.Monitoring.TimeWeightedStatistic">
            <summary>
            A <see cref="T:React.Monitoring.Monitor"/> that computes a time-weighted summary
            statistical value.
            </summary>
            <remarks>
            <para>
            All of the time-weighted summary statistics classes in React.NET are
            derived from <see cref="T:React.Monitoring.TimeWeightedStatistic"/>.
            </para>
            <para>
            <see cref="T:React.Monitoring.TimeWeightedStatistic"/> instance are designed to be used
            to monitor value changes on properties over time or to be used to
            compute summary statistical values on arbitrary sets of observations.
            </para>
            <para>
            Note that <see cref="T:React.Monitoring.TimeWeightedStatistic"/> is an extension of
            <see cref="T:React.Monitoring.Statistic"/>.  Care must be used when calling certain of
            the <see cref="T:React.Monitoring.Statistic"/> methods that do not account for time. An
            example is <see cref="M:React.Monitoring.Statistic.Observe(System.Collections.IEnumerable)"/>,
            which, when called on a <see cref="T:React.Monitoring.TimeWeightedStatistic"/>, will
            make all observations <em>at the same time</em>.  This behavior may
            not be what is desired.  Keep this fact in mind when calling methods
            that do not take a time parameter.
            </para>
            </remarks>
        </member>
        <member name="F:React.Monitoring.TimeWeightedStatistic._sim">
            <summary>
            The simulation context used to obtain the current time.
            </summary>
        </member>
        <member name="F:React.Monitoring.TimeWeightedStatistic._obsOnAttach">
            <summary>
            Whether or not an observation is made when attached to a
            monitorable property.
            </summary>
        </member>
        <member name="F:React.Monitoring.TimeWeightedStatistic._obsOnDetach">
            <summary>
            Whether or not an observation is made when detached from a
            monitorable property.
            </summary>
        </member>
        <member name="F:React.Monitoring.TimeWeightedStatistic._lastObservation">
            <summary>
            The time and value of the last observation that was made.
            </summary>
        </member>
        <member name="M:React.Monitoring.TimeWeightedStatistic.#ctor(React.Simulation)">
            <summary>
            Create a new <see cref="T:React.Monitoring.TimeWeightedStatistic"/> that will obtain
            the current time from the specified <see cref="P:React.Monitoring.TimeWeightedStatistic.Simulation"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="sim"/> is <see langword="null"/>.
            </exception>
            <param name="sim">
            The <see cref="P:React.Monitoring.TimeWeightedStatistic.Simulation"/> from which the current simulation
            time can be obtained.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeWeightedStatistic.Observe(System.Double)">
            <summary>
            Make an observation of a single <see cref="T:System.Double"/> value at the
            current simulation time.
            </summary>
            <remarks>
            This method simply invokes <see cref="M:React.Monitoring.TimeWeightedStatistic.Observe(System.Double,System.Int64)"/>,
            obtaining the current simulation time <see cref="P:React.Monitoring.TimeWeightedStatistic.Simulation"/>.
            </remarks>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is a <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/>, or
            <see cref="F:System.Double.NegativeInfinity"/>.
            </exception>
            <param name="value">
            The value to observe at <see cref="P:React.Simulation.Now"/>.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeWeightedStatistic.Observe(System.Double,System.Int64)">
            <summary>
            Make an observation of a single <see cref="T:System.Double"/> value at the
            specified simulation time.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is a <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/>, or
            <see cref="F:System.Double.NegativeInfinity"/>.
            </exception>
            <param name="value">
            The value observed at <paramref name="time"/>.
            </param>
            <param name="time">
            The simulation time at which <paramref name="value"/> was observed.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeWeightedStatistic.OnValueChanged(System.Object,React.Monitoring.ValueChangedEventArgs)">
            <summary>
            Event handler for property change notifications.
            </summary>
            <remarks>
            This method simply attempts to convert <c>args.NewValue</c> to
            a <see cref="T:System.Double"/> and then call
            <see cref="M:React.Monitoring.TimeWeightedStatistic.Observe(System.Double,System.Int64)"/>.  The time is obtained from
            <paramref name="args"/> and failing that (e.g. <c>args.Time</c> is
            less than zero), the time is obtained from <see cref="P:React.Monitoring.TimeWeightedStatistic.Simulation"/>.
            </remarks>
            <param name="sender">
            The object whose property has changed.
            </param>
            <param name="args">
            The <see cref="T:React.Monitoring.ValueChangedEventArgs"/> providing additional
            information about the property change.  Only <c>args.NewValue</c>
            and <c>args.Time</c> are used.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeWeightedStatistic.Attach(System.Object,System.String)">
            <summary>
            Begin monitoring a property on the given object.
            </summary>
            <remarks>
            <para>
            This method simply invokes
            </para>
            <code>Attach(target, propertyName, OnValueChanged);</code>
            <para>
            and then, if <see cref="P:React.Monitoring.TimeWeightedStatistic.ObserveOnAttach"/> is <b>true</b> makes an
            initial observation of the monitored property's value.
            </para>
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will be monitored.
            </param>
            <param name="propertyName">
            The name of a property of <paramref name="target"/> to monitor.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeWeightedStatistic.Detach(System.Object,System.String)">
            <summary>
            End monitoring a property on the given object.
            </summary>
            <remarks>
            <para>
            This method simply invokes
            </para>
            <code>Detach(target, propertyName, OnValueChanged);</code>
            <para>
            and then, if <see cref="P:React.Monitoring.TimeWeightedStatistic.ObserveOnDetach"/> is <b>true</b> makes a
            final observation of the monitored property's value.
            </para>
            </remarks>
            <param name="target">
            The object whose property named <paramref name="propertyName"/>
            will stop being monitored.</param>
            <param name="propertyName">
            The name of a property of <paramref name="target"/> to stop
            monitoring.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeWeightedStatistic.ObserveObject(System.Object,System.Int64)">
            <summary>
            Make an observation of the supplied <see cref="T:System.Object"/>.
            </summary>
            <param name="value">
            The <see cref="T:System.Object"/> to observe.  Must be convertible to a
            <see cref="T:System.Double"/>.
            </param>
            <param name="time">
            The time at which the observation is made.  If less than zero,
            the time is obtained from the <see cref="P:React.Monitoring.TimeWeightedStatistic.Simulation"/> supplied
            when the <see cref="T:React.Monitoring.TimeWeightedStatistic"/> was created.
            </param>
        </member>
        <member name="P:React.Monitoring.TimeWeightedStatistic.Simulation">
            <summary>
            Gets the simulation context under which the
            <see cref="T:React.Monitoring.TimeWeightedStatistic"/> is observing value changes.
            </summary>
            <value>
            The simulation context as a <see cref="P:React.Monitoring.TimeWeightedStatistic.Simulation"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.TimeWeightedStatistic.ObserveOnAttach">
            <summary>
            Gets or sets whether an observation is automatically made when
            attached to a monitorable property.
            </summary>
            <remarks>
            By default, this property is <b>true</b>.
            </remarks>
            <value>
            <b>true</b> if an observation is automatically made when attached
            to a monitorable property.
            </value>
        </member>
        <member name="P:React.Monitoring.TimeWeightedStatistic.ObserveOnDetach">
            <summary>
            Gets or sets whether an observation is automatically made when
            detached from a monitorable property.
            </summary>
            <remarks>
            By default, this property is <b>true</b>.
            </remarks>
            <value>
            <b>true</b> if an observation is automatically made when detached
            from a monitorable property.
            </value>
        </member>
        <member name="P:React.Monitoring.TimeWeightedStatistic.LastObservation">
            <summary>
            Gets a <see cref="T:React.Monitoring.TimeValue"/> describing the last observation.
            </summary>
            <remarks>
            If no observations have yet been made, the returned
            <see cref="T:React.Monitoring.TimeValue"/> is <see cref="F:React.Monitoring.TimeValue.Invalid"/>.
            </remarks>
            <value>
            The last observation as a <see cref="T:React.Monitoring.TimeValue"/>.
            </value>
        </member>
        <member name="F:React.Monitoring.TimeWeightedMean._weightedObs">
            <summary>Sum of weighted observations.</summary>
        </member>
        <member name="F:React.Monitoring.TimeWeightedMean._sumOfWeights">
            <summary>Sum of weights.</summary>
        </member>
        <member name="M:React.Monitoring.TimeWeightedMean.#ctor(React.Simulation)">
            <summary>
            Create a new <see cref="T:React.Monitoring.TimeWeightedMean"/> that will obtain
            the current time from the specified <see cref="T:React.Simulation"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="sim"/> is <see langword="null"/>.
            </exception>
            <param name="sim">
            The <see cref="T:React.Simulation"/> from which the current simulation
            time can be obtained.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeWeightedMean.Observe(System.Double,System.Int64)">
            <summary>
            Make an observation of a single <see cref="T:System.Double"/> value at the
            specified simulation time.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is a <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/>, or
            <see cref="F:System.Double.NegativeInfinity"/>.
            </exception>
            <param name="value">
            The value observed at <paramref name="time"/>.
            </param>
            <param name="time">
            The simulation time at which <paramref name="value"/> was observed.
            </param>
        </member>
        <member name="P:React.Monitoring.TimeWeightedMean.Value">
            <summary>
            Gets the current value of the <see cref="T:React.Monitoring.TimeWeightedMean"/>
            statistic.
            </summary>
            <remarks>
            If there have been no observations, <see cref="P:React.Monitoring.TimeWeightedMean.Value"/> will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The current time-weighted mean (average) of the observations as a
            <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.TimeWeightedStandardDeviation">
            <summary>
            A <see cref="T:React.Monitoring.TimeWeightedStatistic"/> that computes the running
            time-weighted standard deviation of a series of observations.
            </summary>
        </member>
        <member name="F:React.Monitoring.TimeWeightedStandardDeviation._variance">
            <summary>
            The <see cref="T:React.Monitoring.TimeWeightedVariance"/> used to compute the
            time-weighted standard deviation.
            </summary>
        </member>
        <member name="M:React.Monitoring.TimeWeightedStandardDeviation.#ctor(React.Simulation)">
            <summary>
            Create a new <see cref="T:React.Monitoring.TimeWeightedStandardDeviation"/> that will
            obtain the current time from the specified <see cref="T:React.Simulation"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="sim"/> is <see langword="null"/>.
            </exception>
            <param name="sim">
            The <see cref="T:React.Simulation"/> from which the current simulation
            time can be obtained.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeWeightedStandardDeviation.Observe(System.Double,System.Int64)">
            <summary>
            Make an observation of a single <see cref="T:System.Double"/> value at the
            specified simulation time.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is a <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/>, or
            <see cref="F:System.Double.NegativeInfinity"/>.
            </exception>
            <param name="value">
            The value observed at <paramref name="time"/>.
            </param>
            <param name="time">
            The simulation time at which <paramref name="value"/> was observed.
            </param>
        </member>
        <member name="P:React.Monitoring.TimeWeightedStandardDeviation.IsSample">
            <summary>
            Gets or sets whether the <see cref="T:React.Monitoring.TimeWeightedStandardDeviation"/> is
            computing a sample standard deviation.
            </summary>
            <value>
            <b>true</b> when computing the sample standard deviation; or
            <b>false</b> when computing the population standard deviation.
            </value>
        </member>
        <member name="P:React.Monitoring.TimeWeightedStandardDeviation.Variance">
            <summary>
            Gets the time-weighted variance based on the current value of the internal
            <see cref="T:React.Monitoring.TimeWeightedVariance"/> instance used to perform
            all the computation for the <see cref="T:React.Monitoring.TimeWeightedStandardDeviation"/>.
            <seealso cref="P:React.Monitoring.Variance.Value"/>
            </summary>
            <remarks>
            If there have been no observations, this property will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The time-weighted variance of observed values.
            </value>
        </member>
        <member name="P:React.Monitoring.TimeWeightedStandardDeviation.Value">
            <summary>
            Gets the current value of the
            <see cref="T:React.Monitoring.TimeWeightedStandardDeviation"/> statistic.
            </summary>
            <remarks>
            If there have been no observations, <see cref="P:React.Monitoring.TimeWeightedStandardDeviation.Value"/> will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The current time-weighted standard deviation of the observations
            as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.TimeWeightedVariance">
            <summary>
            A <see cref="T:React.Monitoring.TimeWeightedStatistic"/> monitor that computes the running
            time-weighted variance of a series of observations.
            <seealso cref="T:React.Monitoring.TimeWeightedStandardDeviation"/>
            </summary>
        </member>
        <member name="F:React.Monitoring.TimeWeightedVariance._weightedObs">
            <summary>Sum of weighted observations.</summary>
        </member>
        <member name="F:React.Monitoring.TimeWeightedVariance._sumOfWeightedSquares">
            <summary>Sum of the weight times the square of the observation.</summary>
        </member>
        <member name="F:React.Monitoring.TimeWeightedVariance._sumOfWeights">
            <summary>Sum of the weights.</summary>
        </member>
        <member name="F:React.Monitoring.TimeWeightedVariance._sampleBias">
            <summary>Bias if computing variance of a sample.</summary>
            <remarks>This value must be either 0.0 or 1.0.</remarks>
        </member>
        <member name="M:React.Monitoring.TimeWeightedVariance.#ctor(React.Simulation)">
            <summary>
            Create a new <see cref="T:React.Monitoring.TimeWeightedVariance"/> that will obtain
            the current time from the specified <see cref="T:React.Simulation"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="sim"/> is <see langword="null"/>.
            </exception>
            <param name="sim">
            The <see cref="T:React.Simulation"/> from which the current simulation
            time can be obtained.
            </param>
        </member>
        <member name="M:React.Monitoring.TimeWeightedVariance.Observe(System.Double,System.Int64)">
            <summary>
            Make an observation of a single <see cref="T:System.Double"/> value at the
            specified simulation time.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="value"/> is a <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/>, or
            <see cref="F:System.Double.NegativeInfinity"/>.
            </exception>
            <param name="value">
            The value observed at <paramref name="time"/>.
            </param>
            <param name="time">
            The simulation time at which <paramref name="value"/> was observed.
            </param>
        </member>
        <member name="P:React.Monitoring.TimeWeightedVariance.IsSample">
            <summary>
            Gets or sets whether the <see cref="T:React.Monitoring.TimeWeightedVariance"/> is computing a
            sample variance.
            </summary>
            <value>
            <b>true</b> when computing the sample variance; or <b>false</b>
            when computing the population variance.
            </value>
        </member>
        <member name="P:React.Monitoring.TimeWeightedVariance.StandardDeviation">
            <summary>
            Gets the time-weighted standard deviation based on the current
            value of the <see cref="T:React.Monitoring.TimeWeightedVariance"/>.
            <seealso cref="T:React.Monitoring.StandardDeviation"/>
            </summary>
            <remarks>
            If there have been no observations, this property will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The time-weighted standard deviation of observed values computed
            using the current <see cref="P:React.Monitoring.TimeWeightedVariance.Value"/> of the
            <see cref="T:React.Monitoring.TimeWeightedVariance"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.TimeWeightedVariance.Value">
            <summary>
            Gets the current value of the <see cref="T:React.Monitoring.TimeWeightedVariance"/>
            statistic.
            </summary>
            <remarks>
            If there have been no observations, <see cref="P:React.Monitoring.TimeWeightedVariance.Value"/> will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The current time-weighted variance of the observations as a
            <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Monitoring.ValueChangedEventArgs">
            <summary>
            Event data passed to a value changed handler.
            </summary>
            <remarks>
            The value changed handler method is invoked each time the value of a
            monitorable property changes.  The value change handler method must
            have the signature <c>void HandlerFunction(object,
            EventHandler&lt;ValueChangedEventArgs&gt;)</c>.  The
            <see cref="T:React.Monitoring.ValueChangedEventArgs"/> provides the handler method the
            old and new values of the property that changed and possibly the
            <see cref="T:React.Simulation"/> time when the change occurred.
            </remarks>
        </member>
        <member name="F:React.Monitoring.ValueChangedEventArgs.TimeNotSpecified">
            <summary>
            Indicates that the time the monitored property changed was not
            specified.
            </summary>
            <remarks>
            This value is defined as -1L.
            </remarks>
        </member>
        <member name="F:React.Monitoring.ValueChangedEventArgs._oldValue">
            <summary>The old value.</summary>
        </member>
        <member name="F:React.Monitoring.ValueChangedEventArgs._newValue">
            <summary>The new value.</summary>
        </member>
        <member name="F:React.Monitoring.ValueChangedEventArgs._time">
            <summary>The simulation time the value changed.</summary>
        </member>
        <member name="M:React.Monitoring.ValueChangedEventArgs.#ctor(System.Object,System.Object)">
            <overloads>
            Create and initialize a ValueChangedEventArgs instance.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Monitoring.ValueChangedEventArgs"/> instance that
            describes a change from one value to another.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:React.Monitoring.ValueChangedEventArgs.#ctor(System.Object,System.Object,System.Int64)">
            <summary>
            Create a new <see cref="T:React.Monitoring.ValueChangedEventArgs"/> instance that
            describes a change from one value to another at a specific time
            during a <see cref="T:React.Simulation"/> run.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <param name="time">
            The simulation time the value changed.  If this value is less than
            zero (0), the <see cref="P:React.Monitoring.ValueChangedEventArgs.Time"/> property will be set to
            <see cref="F:React.Monitoring.ValueChangedEventArgs.TimeNotSpecified"/>.
            </param>
        </member>
        <member name="P:React.Monitoring.ValueChangedEventArgs.OldValue">
            <summary>
            The old (previous) value of the monitored property.
            </summary>
            <value>
            The old value as an <see cref="T:System.Object"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.ValueChangedEventArgs.NewValue">
            <summary>
            The new (current) value of the monitored property.
            </summary>
            <value>
            The new value as an <see cref="T:System.Object"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.ValueChangedEventArgs.Time">
            <summary>
            The time during a <see cref="T:React.Simulation"/> run when the monitored
            property changed.
            </summary>
            <remarks>
            If no time was specified in the constructor, this property will
            be -1.
            </remarks>
            <value>
            The simulation time when the value of the monitored property
            changed.
            </value>
        </member>
        <member name="T:React.Monitoring.Variance">
            <summary>
            A <see cref="T:React.Monitoring.Statistic"/> that computes the running variance
            of a series of observations.
            <seealso cref="P:React.Monitoring.Variance.StandardDeviation"/>
            </summary>
            <remarks>
            <para>
            The variance is computed using the sum of squares method.
            </para>
            <para>
            The <see cref="T:React.Monitoring.Variance"/> can compute both <em>population</em> and
            <em>sample</em> variances.  By default it computes the population
            variance.  Use the <see cref="P:React.Monitoring.Variance.IsSample"/> property to switch to
            computing the sample variance.
            </para>
            </remarks>
        </member>
        <member name="F:React.Monitoring.Variance._accum">
            <summary>Sum of observations.</summary>
        </member>
        <member name="F:React.Monitoring.Variance._sumOfSquares">
            <summary>The sum of squared observations.</summary>
        </member>
        <member name="F:React.Monitoring.Variance._sampleBias">
            <summary>Bias if computing variance of a sample.</summary>
            <remarks>This value must be either 0.0 or 1.0.</remarks>
        </member>
        <member name="M:React.Monitoring.Variance.#ctor">
            <overloads>
            Create and initialize a Variance statistic.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Monitoring.Variance"/> statistic.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.Variance.Value"/> is invoked immediately after instantiating a
            <see cref="T:React.Monitoring.Variance"/> instance using this constructor, the returned
            value is <see cref="F:System.Double.NaN"/>.
            </remarks>
        </member>
        <member name="M:React.Monitoring.Variance.#ctor(System.Double)">
            <summary>
            Create a new <see cref="T:React.Monitoring.Variance"/> statistic specifying the initial
            observation.
            </summary>
            <remarks>
            If <see cref="P:React.Monitoring.Variance.Value"/> is invoked immediately after instantiating a
            <see cref="T:React.Monitoring.Variance"/> instance using this constructor, the returned
            value is zero (0.0).
            </remarks>
            <param name="initialObservation">
            The value of the initial observation.
            </param>
        </member>
        <member name="M:React.Monitoring.Variance.Observe(System.Double)">
            <summary>
            Record an observation of the specified value.
            </summary>
            <remarks>
            Observed values are not stored by the <see cref="T:React.Monitoring.Variance"/>
            instance, they are only used to compute the running variance.
            </remarks>
            <param name="value">
            The value to observe.
            </param>
        </member>
        <member name="M:React.Monitoring.Variance.UpdateVariance(System.Double)">
            <summary>
            Update the internal sum and sum-of-squares values based on the
            given observed value.
            </summary>
            <param name="value">The observed value.</param>
        </member>
        <member name="P:React.Monitoring.Variance.IsSample">
            <summary>
            Gets or sets whether the <see cref="T:React.Monitoring.Variance"/> is computing a
            sample variance.
            </summary>
            <value>
            <b>true</b> when computing the sample variance; or <b>false</b>
            when computing the population variance.
            </value>
        </member>
        <member name="P:React.Monitoring.Variance.StandardDeviation">
            <summary>
            Gets the standard deviation based on the current value of the
            <see cref="T:React.Monitoring.Variance"/>.
            <seealso cref="T:React.Monitoring.StandardDeviation"/>
            </summary>
            <remarks>
            If there have been no observations, this property will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The standard deviation of observed values computed using the
            current <see cref="P:React.Monitoring.Variance.Value"/> of the <see cref="T:React.Monitoring.Variance"/>.
            </value>
        </member>
        <member name="P:React.Monitoring.Variance.Value">
            <summary>
            Gets the current value of the <see cref="T:React.Monitoring.Variance"/> statistic.
            </summary>
            <remarks>
            If there have been no observations, <see cref="P:React.Monitoring.Variance.Value"/> will be
            <see cref="F:System.Double.NaN"/>.
            </remarks>
            <value>
            The current variance of observed values as a <see cref="T:System.Double"/>.
            </value>
        </member>
        <member name="T:React.Queue.FifoQueue`1">
            <summary>
            A first-in, first-out <see cref="T:React.Queue.IQueue`1"/> implementation.
            </summary>
            <remarks>
            In a first-in, first-out queue, the first item added to the queue is
            the first item removed from the queue.  These queues are typically
            referred to as FIFO queues.
            </remarks>
            <typeparam name="T">
            The type of object to store in the <see cref="T:React.Queue.FifoQueue`1"/>.
            </typeparam>
        </member>
        <member name="T:React.Queue.IQueue`1">
            <summary>
            A generic collection that supports queuing semantics.
            </summary>
            <remarks>
            React.NET contains this interface because the .NET Framework
            <see cref="T:System.Collections.Generic.Queue`1"/> class is strictly first-in, first-out
            or FIFO.  The classes in the <b>React.Queue</b> namespace, which
            implement this interface, support FIFO as well as LIFO (last-in,
            first-out) and priority queues.
            </remarks>
            <typeparam name="T">
            The type of object to store in the <see cref="T:React.Queue.IQueue`1"/>.
            </typeparam>
        </member>
        <member name="M:React.Queue.IQueue`1.Enqueue(`0)">
            <summary>
            Adds the specified item to the <see cref="T:React.Queue.IQueue`1"/>.
            </summary>
            <param name="item">The item to add to the queue.</param>
        </member>
        <member name="M:React.Queue.IQueue`1.Dequeue">
            <summary>
            Removes the next available item from the <see cref="T:React.Queue.IQueue`1"/>.
            </summary>
            <returns>
            The item removed from the <see cref="T:React.Queue.IQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.IQueue`1.Peek">
            <summary>
            Returns a reference to the next item on the <see cref="T:React.Queue.IQueue`1"/>
            without removing it.
            </summary>
            <returns>
            The next item on the <see cref="T:React.Queue.IQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.FifoQueue`1.#ctor">
            <summary>
            Create a new, empty <see cref="T:React.Queue.FifoQueue`1"/> instance.
            </summary>
        </member>
        <member name="M:React.Queue.FifoQueue`1.Enqueue(`0)">
            <summary>
            Add the specified item to the end of the
            <see cref="T:React.Queue.FifoQueue`1"/>.
            </summary>
            <param name="item">
            The item to add to the end (tail) of the
            <see cref="T:React.Queue.FifoQueue`1"/>.
            </param>
        </member>
        <member name="M:React.Queue.FifoQueue`1.Dequeue">
            <summary>
            Removes and returns the item at the front of the
            <see cref="T:React.Queue.FifoQueue`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:React.Queue.FifoQueue`1"/> is empty.
            </exception>
            <returns>
            The item at the front of the <see cref="T:React.Queue.FifoQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.FifoQueue`1.Peek">
            <summary>
            Gets the item at the front of the <see cref="T:React.Queue.FifoQueue`1"/>.
            </summary>
            <remarks>
            The item at the front of the queue is returned, but is not removed
            from the <see cref="T:React.Queue.FifoQueue`1"/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:React.Queue.FifoQueue`1"/> is empty.
            </exception>
            <returns>
            The item at the front of the <see cref="T:React.Queue.FifoQueue`1"/>.
            </returns>
        </member>
        <member name="T:React.Queue.LifoQueue`1">
            <summary>
            A last-in, first-out <see cref="T:React.Queue.IQueue`1"/> implementation.
            </summary>
            <remarks>
            In a last-in, first-out queue, the last item added to the queue is
            the first item removed from the queue.  These queues are typically
            referred to as LIFO queues or stacks.
            </remarks>
            <typeparam name="T">
            The type of object to store in the <see cref="T:React.Queue.LifoQueue`1"/>.
            </typeparam>
        </member>
        <member name="M:React.Queue.LifoQueue`1.#ctor">
            <summary>
            Create a new, empty <see cref="T:React.Queue.LifoQueue`1"/> instance.
            </summary>
        </member>
        <member name="M:React.Queue.LifoQueue`1.Enqueue(`0)">
            <summary>
            Add the specified item to the front of the
            <see cref="T:React.Queue.LifoQueue`1"/>.
            </summary>
            <param name="item">
            The item to add to the front of the
            <see cref="T:React.Queue.LifoQueue`1"/>.
            </param>
        </member>
        <member name="M:React.Queue.LifoQueue`1.Dequeue">
            <summary>
            Removes and returns the item at the front of the
            <see cref="T:React.Queue.LifoQueue`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:React.Queue.LifoQueue`1"/> is empty.
            </exception>
            <returns>
            The item at the front of the <see cref="T:React.Queue.LifoQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.LifoQueue`1.Peek">
            <summary>
            Gets the item at the front of the <see cref="T:React.Queue.LifoQueue`1"/>.
            </summary>
            <remarks>
            The item at the front of the queue is returned, but is not removed
            from the <see cref="T:React.Queue.LifoQueue`1"/>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:React.Queue.LifoQueue`1"/> is empty.
            </exception>
            <returns>
            The item at the front of the <see cref="T:React.Queue.LifoQueue`1"/>.
            </returns>
        </member>
        <member name="T:React.Queue.PriorityQueue`1">
            <summary>
            An <see cref="T:React.Queue.IQueue`1"/> implementation whose ordering is
            priority based.
            </summary>
            <remarks>
            <para>
            In a priority queue, items that have higher priorities are removed
            before items with lower priorities.
            </para>
            <para>
            It's important to note that <see cref="T:React.Queue.PriorityQueue`1"/> is
            built on a heap; therefore it is <b>not</b> stable (i.e. items of
            equal priority may not be dequeued in the order they were enqueued).
            </para>
            </remarks>
            <typeparam name="T">
            The type of object to store in the
            <see cref="T:React.Queue.PriorityQueue`1"/>.
            </typeparam>
        </member>
        <member name="F:React.Queue.PriorityQueue`1.DefaultPrioritizer">
            <summary>
            The default <see cref="T:System.Comparison`1"/> used to prioritize
            items added to the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
        </member>
        <member name="F:React.Queue.PriorityQueue`1._backingStore">
            <summary>
            The container for storing queue data.
            </summary>
        </member>
        <member name="F:React.Queue.PriorityQueue`1._prioritizer">
            <summary>
            The <see cref="T:System.Comparison`1"/> used to prioritize
            items added to the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.#ctor">
            <summary>
            Create a new, empty <see cref="T:React.Queue.PriorityQueue`1"/> instance.
            </summary>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
            <remarks>
            This method simply invokes <c>Enqueue(item)</c>.
            </remarks>
            <param name="item">
            The object to add to the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </param>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.Clear">
            <summary>
            Removes all items from the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:React.Queue.PriorityQueue`1"/>
            contains the specified value.
            </summary>
            <param name="item">
            The object to located in the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </param>
            <returns>
            <b>true</b> if <paramref name="item"/> is found in the
            <see cref="T:React.Queue.PriorityQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:React.Queue.PriorityQueue`1"/> to
            an <see cref="T:System.Array"/>, starting at a particular index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of
            the elements copied from <see cref="T:React.Queue.PriorityQueue`1"/>.
            <paramref name="array"/> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array"/> at which copying
            begins.
            </param>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the
            <see cref="T:React.Queue.PriorityQueue`1"/>. 
            </summary>
            <remarks>
            Removing arbitrary objects from the
            <see cref="T:React.Queue.PriorityQueue`1"/> will cause the heap to be
            re-built with each removal.  This can be a potentially expensive
            operation and should normally be avoided.
            </remarks>
            <param name="item">
            The object to remove from the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </param>
            <returns>
            <b>true</b> if <paramref name="item"/> was removed from the
            <see cref="T:React.Queue.PriorityQueue`1"/>; otherwise <b>false</b>.  This
            method will also return <b>false</b> if <paramref name="item"/> was
            not found in the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to
            iterate through the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate
            through the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that can be
            used to iterate through the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used
            to iterate through the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.Enqueue(`0)">
            <summary>
            Adds the specified item to the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
            <param name="item">
            The item to add to the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </param>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.Dequeue">
            <summary>
            Removes the next available item from the
            <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:React.Queue.PriorityQueue`1"/> is empty.
            </exception>
            <returns>
            The item removed from the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.Peek">
            <summary>
            Returns a reference to the next item on the
            <see cref="T:React.Queue.PriorityQueue`1"/>
            without removing it.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If the <see cref="T:React.Queue.PriorityQueue`1"/> is empty.
            </exception>
            <returns>
            The next item on the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </returns>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.ParentIndex(System.Int32)">
            <summary>
            Returns the parent node index of the specified heap node.
            </summary>
            <param name="ndx">
            The heap node index whose parent node index is to be found.
            </param>
            <returns>
            The parent node index of the node at <paramref name="ndx"/>.
            </returns>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.LeftIndex(System.Int32)">
            <summary>
            Returns the left child index of the specified heap node.
            </summary>
            <param name="ndx">
            The parent node index whose left child index is to be found.
            </param>
            <returns>
            The left child index of the node at <paramref name="ndx"/>.
            </returns>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.RightIndex(System.Int32)">
            <summary>
            Returns the right child index of the specified heap node.
            </summary>
            <param name="ndx">
            The parent node index whose right child index is to be found.
            </param>
            <returns>
            The right child index of the node at <paramref name="ndx"/>.
            </returns>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.Heapify(System.Int32)">
            <summary>
            Recursively restore the heap starting at the given node index.
            </summary>
            <remarks>
            This method does nothing if there are not at least two (2) items
            in the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </remarks>
            <param name="ndx">
            The node index to heapify.
            </param>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.RebuildHeap">
            <summary>
            Force a complete rebuild of the heap.
            </summary>
        </member>
        <member name="M:React.Queue.PriorityQueue`1.CompareComparables(`0,`0)">
            <summary>
            Method used to implement the <see cref="F:React.Queue.PriorityQueue`1.DefaultPrioritizer"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If either <paramref name="a"/> or <paramref name="b"/> are
            <see langword="null"/>.
            </exception>
            <param name="a">
            The item to compare with <paramref name="b"/>.
            </param>
            <param name="b">
            The item to compare with <paramref name="a"/>.
            </param>
            <returns></returns>
        </member>
        <member name="P:React.Queue.PriorityQueue`1.Prioritizer">
            <summary>
            Gets or sets the <see cref="T:System.Comparison`1"/> used to prioritize
            items added to the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If an attempt is made to set this property to <see langword="null"/>.
            </exception>
            <value>
            The <see cref="T:System.Comparison`1"/> used to prioritize items
            added to the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </value>
        </member>
        <member name="P:React.Queue.PriorityQueue`1.Count">
            <summary>
            Gets the number of items in the <see cref="T:React.Queue.PriorityQueue`1"/>.
            </summary>
            <value>
            The number of items in the <see cref="T:React.Queue.PriorityQueue`1"/> as
            an <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="P:React.Queue.PriorityQueue`1.IsReadOnly">
            <summary>
            Gets a value indicating whether or not the
            <see cref="T:React.Queue.PriorityQueue`1"/> is read-only.
            </summary>
            <value>
            <b>true</b> if the <see cref="T:React.Queue.PriorityQueue`1"/> is
            read-only.
            </value>
        </member>
        <member name="T:React.Queue.PriorityQueue`1.Inverter">
            <summary>
            Class used to invert the results of a
            <see cref="T:System.Comparison`1"/>.
            </summary>
        </member>
        <member name="T:React.Tasking.AcquireConsumable">
            <summary>
            A <see cref="T:React.Task"/> used to acquire one or more consumable items
            from a from a <see cref="T:React.Consumable"/>.
            </summary>
            <remarks>
            <para>
            Normally client code should not have to instantiate objects of this
            class.  Rather, they should use one of the <b>IConsumable.Acquire</b>
            methods which will return the appropriate <see cref="T:React.Task"/> for
            acquiring consumable items on behalf of a client <see cref="T:React.Task"/>.
            </para>
            <para>
            This class is declared public to allow third parties to create
            their own derivatives of <see cref="T:React.Consumable"/>.
            </para>
            </remarks>
        </member>
        <member name="T:React.Tasking.ProxyTask`1">
            <summary>
            A <see cref="T:React.Task"/> that acts on behalf of another <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            <para>
            A <see cref="T:React.Tasking.ProxyTask`1"/> acts as a "middle-man" between a
            <see cref="P:React.Tasking.ProxyTask`1.Client"/> and another object, the <see cref="P:React.Tasking.ProxyTask`1.Blocker"/>.
            Normally the <see cref="P:React.Tasking.ProxyTask`1.Client"/> blocks on the
            <see cref="T:React.Tasking.ProxyTask`1"/> and the
            <see cref="T:React.Tasking.ProxyTask`1"/> will request some service, which may
            block, from the <see cref="P:React.Tasking.ProxyTask`1.Blocker"/>.
            </para>
            <para>
            It's important to note that a <see cref="T:React.Tasking.ProxyTask`1"/> can have
            only one client at a time.  This means that only one <see cref="T:React.Task"/>
            may block on the <see cref="T:React.Tasking.ProxyTask`1"/> at any time.
            </para>
            <para>
            If, when the <see cref="T:React.Tasking.ProxyTask`1"/> is executed, it has no
            client, it does nothing.
            </para>
            </remarks>
            <typeparam name="T">
            The class type upon which the <see cref="T:React.Tasking.ProxyTask`1"/>
            will block.  This will be the <see cref="P:React.Tasking.ProxyTask`1.Blocker"/> property's type.
            </typeparam>
        </member>
        <member name="F:React.Tasking.ProxyTask`1._blocker">
            <summary>
            The blocking object that is providing some service.
            </summary>
        </member>
        <member name="F:React.Tasking.ProxyTask`1._autoActivateClient">
            <summary>
            Auto-activate <see cref="P:React.Tasking.ProxyTask`1.Client"/> when activated by
            <see cref="P:React.Tasking.ProxyTask`1.Blocker"/>.
            </summary>
        </member>
        <member name="M:React.Tasking.ProxyTask`1.#ctor(React.Simulation,`0)">
            <summary>
            Create a new <see cref="T:React.Tasking.ProxyTask`1"/> that will obtain
            service from the specified object.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="blocker">
            The blocking object that will provide some service required by
            <see cref="P:React.Tasking.ProxyTask`1.Client"/>.
            </param>
        </member>
        <member name="M:React.Tasking.ProxyTask`1.Activate(System.Object,System.Int64,System.Object,System.Int32)">
            <summary>
            Activates the <see cref="T:React.Tasking.ProxyTask`1"/>.
            </summary>
            <remarks>
            If <paramref name="activator"/> equals <see cref="P:React.Tasking.ProxyTask`1.Blocker"/> and
            <see cref="P:React.Tasking.ProxyTask`1.AutoActivateClient"/> is <b>true</b>, this method will
            activate <see cref="P:React.Tasking.ProxyTask`1.Client"/> rather than this
            <see cref="T:React.Tasking.ProxyTask`1"/>.
            </remarks>
            <param name="activator">
            The object that is activating the <see cref="T:React.Tasking.ProxyTask`1"/>.
            May be <see langword="null"/>
            </param>
            <param name="relTime">
            The time relative to the current time when the
            <see cref="T:React.Tasking.ProxyTask`1"/> should be scheduled to run.
            </param>
            <param name="data">
            An object containing client-specific data for the
            <see cref="T:React.Tasking.ProxyTask`1"/>.
            </param>
            <param name="priority">
            The task priority.  Higher values indicate higher priorities.
            </param>
        </member>
        <member name="P:React.Tasking.ProxyTask`1.Blocker">
            <summary>
            Gets the object that is providing some service to the
            <see cref="P:React.Tasking.ProxyTask`1.Client"/> task through this
            <see cref="T:React.Tasking.ProxyTask`1"/>.
            </summary>
            <value>
            The object providing service to <see cref="P:React.Tasking.ProxyTask`1.Client"/>.
            </value>
        </member>
        <member name="P:React.Tasking.ProxyTask`1.Client">
            <summary>
            Gets the client <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            The client task is set by having a <see cref="T:React.Task"/> block on this
            <see cref="T:React.Tasking.ProxyTask`1"/>.  If no <see cref="T:React.Task"/> blocks
            on this task, then <see cref="P:React.Tasking.ProxyTask`1.Client"/> will be
            <see langword="null"/>.
            </remarks>
            <value>
            The client <see cref="T:React.Task"/> or <see langword="null"/> if there
            is no client.
            </value>
        </member>
        <member name="P:React.Tasking.ProxyTask`1.AutoActivateClient">
            <summary>
            Gets or sets whether the <see cref="P:React.Tasking.ProxyTask`1.Client"/> is activated instead
            of this <see cref="T:React.Tasking.ProxyTask`1"/> when this
            <see cref="T:React.Tasking.ProxyTask`1"/> is activated by
            <see cref="P:React.Tasking.ProxyTask`1.Blocker"/>.
            </summary>
            <value>
            <b>true</b> if the <see cref="P:React.Tasking.ProxyTask`1.Client"/> is activated when this
            <see cref="T:React.Tasking.ProxyTask`1"/> is activated by
            <see cref="P:React.Tasking.ProxyTask`1.Blocker"/>.
            </value>
        </member>
        <member name="F:React.Tasking.AcquireConsumable._quantity">
            <summary>
            The number of consumable units to request.
            </summary>
        </member>
        <member name="F:React.Tasking.AcquireConsumable._requestMade">
            <summary>
            Set to <b>true</b> if the <see cref="T:React.Tasking.AcquireConsumable"/> task
            has made the request from a <see cref="T:React.Consumable"/>.
            </summary>
        </member>
        <member name="F:React.Tasking.AcquireConsumable._maxwait">
            <summary>
            The maximum wait time before giving up waiting on the
            <see cref="T:React.Consumable"/>.
            </summary>
        </member>
        <member name="M:React.Tasking.AcquireConsumable.#ctor(React.Simulation,React.Consumable,System.Int32)">
            <overloads>
            Create and initialize an AcquireConsumable task.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Tasking.AcquireConsumable"/> task that will acquire
            from the specified <see cref="T:React.Consumable"/>.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="consumable">
            The <see cref="T:React.Consumable"/> from which to acquire an item.
            </param>
            <param name="quantity">
            The number of consumable units to request.
            </param>
        </member>
        <member name="M:React.Tasking.AcquireConsumable.#ctor(React.Simulation,React.Consumable,System.Int32,System.Int64)">
            <summary>
            Create a new <see cref="T:React.Tasking.AcquireConsumable"/> task that will acquire
            from the specfied <see cref="T:React.Consumable"/> with a timeout.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="consumable">
            The <see cref="T:React.Consumable"/> from which to acquire an item.
            </param>
            <param name="quantity">
            The number of consumable units to request.
            </param>
            <param name="maxWait">
            The maximum time to wait for <paramref name="consumable"/>.
            </param>
        </member>
        <member name="M:React.Tasking.AcquireConsumable.ExecuteTask(System.Object,System.Object)">
            <summary>
            Attempt to acquire one or more consumable items from a
            <see cref="T:React.Consumable"/> on behalf of a client <see cref="T:React.Task"/>.
            </summary>
            <param name="activator">
            The object that activated this <see cref="T:React.Tasking.AcquireConsumable"/> task.
            </param>
            <param name="data">
            Not used.  The <paramref name="activator"/> should normally pass
            <see langword="null"/> for this parameter.
            </param>
        </member>
        <member name="M:React.Tasking.AcquireConsumable.ReturnUnits(React.ActivationEvent)">
            <summary>
            Return allocated consumable units back to the
            <see cref="T:React.Consumable"/> in the event the
            <see cref="P:React.Tasking.ProxyTask`1.Client"/> is canceled or the event
            that runs the <see cref="P:React.Tasking.ProxyTask`1.Client"/> is canceled.
            </summary>
            <remarks>
            This method is used as a <see cref="T:React.DeferredDataCallback"/>
            delegate.  The delegate is allocated by the
            <see cref="M:React.Consumable.RemoveUnits(React.Tasking.AcquireConsumable)"/> method.
            </remarks>
            <param name="evt">
            The <see cref="T:React.ActivationEvent"/> making the data request.
            </param>
            <returns>Always returns <see langword="null"/>.</returns>
        </member>
        <member name="P:React.Tasking.AcquireConsumable.MaxWait">
            <summary>
            Gets the maximum wait time.
            </summary>
            <remarks>
            The maximum wait time is relative to the current simulation time.
            If <see cref="P:React.Tasking.AcquireConsumable.MaxWait"/> is zero (0L), the
            <see cref="T:React.Tasking.AcquireConsumable"/> task will wait for a resource
            indefinitely.
            </remarks>
            <value>
            The maximum wait time as an <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="P:React.Tasking.AcquireConsumable.Quantity">
            <summary>
            Gets the number of consumable units to request from a
            <see cref="T:React.Consumable"/>.
            </summary>
            <value>
            The number of consumable units to request as an
            <see cref="T:System.Int32"/>.
            </value>
        </member>
        <member name="T:React.Tasking.AcquireResource">
            <summary>
            A <see cref="T:React.Task"/> used to acquire a resource item from a
            <see cref="T:React.Resource"/>.
            </summary>
            <remarks>
            <para>
            Normally client code should not have to instantiate objects of this
            class.  Rather, they should use the <see cref="M:React.IResource.Acquire(React.Task)"/>
            method which will return the appropriate <see cref="T:React.Task"/> for
            acquiring a resource item on behalf of a client <see cref="T:React.Task"/>.
            </para>
            <para>
            This class is declared public to allow third parties to create
            their own derivatives of <see cref="T:React.Resource"/>.
            </para>
            </remarks>
        </member>
        <member name="F:React.Tasking.AcquireResource._requestMade">
            <summary>
            Set to <b>true</b> if the <see cref="T:React.Tasking.AcquireResource"/> task
            has made the request from a <see cref="T:React.Resource"/>.
            </summary>
        </member>
        <member name="F:React.Tasking.AcquireResource._maxwait">
            <summary>
            The maximum wait time before giving up waiting on the
            <see cref="T:React.Resource"/>.
            </summary>
        </member>
        <member name="M:React.Tasking.AcquireResource.#ctor(React.Simulation,React.Resource)">
            <summary>
            Create a new <see cref="T:React.Tasking.AcquireResource"/> task that will acquire
            from the specified <see cref="T:React.Resource"/>.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="resource">
            The <see cref="T:React.Resource"/> from which to acquire an item.
            </param>
        </member>
        <member name="M:React.Tasking.AcquireResource.#ctor(React.Simulation,React.Resource,System.Int64)">
            <overloads>
            Create and initialize an AcquireResource task.
            </overloads>
            <summary>
            Create a new <see cref="T:React.Tasking.AcquireResource"/> task that will acquire
            from the specfied <see cref="T:React.Resource"/> with a timeout.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="resource">
            The <see cref="T:React.Resource"/> from which to acquire an item.
            </param>
            <param name="maxWait">
            The maximum time to wait for <paramref name="resource"/>.
            </param>
        </member>
        <member name="M:React.Tasking.AcquireResource.ExecuteTask(System.Object,System.Object)">
            <summary>
            Attempt to acquire an item from a <see cref="T:React.Resource"/> on behalf
            of some client <see cref="T:React.Task"/>.
            </summary>
            <param name="activator">
            The object that activated this <see cref="T:React.Tasking.AcquireResource"/> task.
            </param>
            <param name="data">
            Optional data for the <see cref="T:React.Tasking.AcquireResource"/> task.  This will
            normally be <see langword="null"/> or the resource item.
            </param>
        </member>
        <member name="P:React.Tasking.AcquireResource.MaxWait">
            <summary>
            Gets the maximum wait time.
            </summary>
            <remarks>
            The maximum wait time is relative to the current simulation time.
            If <see cref="P:React.Tasking.AcquireResource.MaxWait"/> is zero (0L), the
            <see cref="T:React.Tasking.AcquireResource"/> task will wait for a resource
            indefinitely.
            </remarks>
            <value>
            The maximum wait time as an <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="T:React.Tasking.BufferGet">
            <summary>
            A <see cref="T:React.Task"/> used to remove an item from a
            <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <remarks>
            <para>
            Normally client code should not have to instantiate objects of this
            class.  Rather, they should use the <see cref="M:React.IBoundedBuffer.Get(React.Task)"/>
            method which will return the appropriate <see cref="T:React.Task"/> for
            removing items from the buffer on behalf of a client
            <see cref="T:React.Task"/>.
            </para>
            <para>
            This class is declared public to allow third parties to create
            their own derivatives of <see cref="T:React.BoundedBuffer"/>.
            </para>
            </remarks>
        </member>
        <member name="M:React.Tasking.BufferGet.#ctor(React.Simulation,React.BoundedBuffer)">
            <summary>
            Create a <see cref="T:React.Tasking.BufferGet"/> task that will remove an item
            from the specified <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <param name="sim">The simulation contex.</param>
            <param name="buffer">
            The <see cref="T:React.BoundedBuffer"/> from which to remove an item.
            </param>
        </member>
        <member name="M:React.Tasking.BufferGet.ExecuteTask(System.Object,System.Object)">
            <summary>
            Attempt to remove an item from a <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <param name="activator">
            The object that activated this <see cref="T:React.Tasking.BufferGet"/> task.
            </param>
            <param name="data">
            Optional data for the <see cref="T:React.Tasking.BufferGet"/> task.  This will
            normally be <see langword="null"/> or the item removed from the
            <see cref="T:React.BoundedBuffer"/>.
            </param>
        </member>
        <member name="T:React.Tasking.BufferPut">
            <summary>
            A <see cref="T:React.Task"/> used to add an item to a
            <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <remarks>
            <para>
            Normally client code should not have to instantiate objects of this
            class.  Rather, they should use the <see cref="M:React.IBoundedBuffer.Put(React.Task,System.Object)"/>
            method which will return the appropriate <see cref="T:React.Task"/> for adding
            items to the buffer on behalf of a client
            <see cref="T:React.Task"/>.
            </para>
            <para>
            This class is declared public to allow third parties to create
            their own derivatives of <see cref="T:React.BoundedBuffer"/>.
            </para>
            </remarks>
        </member>
        <member name="F:React.Tasking.BufferPut._item">
            <summary>
            The object to add to the <see cref="T:React.BoundedBuffer"/>.
            </summary>
        </member>
        <member name="M:React.Tasking.BufferPut.#ctor(React.Simulation,React.BoundedBuffer)">
            <overloads>Create and initialize a BufferPut task.</overloads>
            <summary>
            Create a <see cref="T:React.Tasking.BufferPut"/> task that will add an item to
            the specified <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <param name="sim">The simulation contex.</param>
            <param name="buffer">
            The <see cref="T:React.BoundedBuffer"/> to which to add an item.
            </param>
        </member>
        <member name="M:React.Tasking.BufferPut.#ctor(React.Simulation,React.BoundedBuffer,System.Object)">
            <summary>
            Create a <see cref="T:React.Tasking.BufferPut"/> task that will add the given
            <see cref="T:System.Object"/> to the specified <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="buffer">
            The <see cref="T:React.BoundedBuffer"/> to which to add
            <paramref name="item"/>.
            </param>
            <param name="item">
            The item to add to <paramref name="buffer"/>.
            </param>
        </member>
        <member name="M:React.Tasking.BufferPut.ExecuteTask(System.Object,System.Object)">
            <summary>
            Attempt to add an item to a <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <param name="activator">
            The object that activated this <see cref="T:React.Tasking.BufferPut"/> task.
            </param>
            <param name="data">
            Optional data for the <see cref="T:React.Tasking.BufferPut"/> task.  This will
            normally be <see langword="null"/> or the item to add to the
            <see cref="T:React.BoundedBuffer"/>.
            </param>
        </member>
        <member name="P:React.Tasking.BufferPut.Item">
            <summary>
            Gets or sets the item that will be added to the
            <see cref="T:React.BoundedBuffer"/>.
            </summary>
            <value>
            The item to add to the <see cref="T:React.BoundedBuffer"/> or
            <see langword="null"/>.
            </value>
        </member>
        <member name="T:React.Tasking.Delay">
            <summary>
            An <see cref="T:React.Task"/> that implements a delay.
            </summary>
            <remarks>
            This <see cref="T:React.Task"/> is used to simulate a delay for a period of
            time.  The delay can represent a wait time or a processing time.
            </remarks>
        </member>
        <member name="F:React.Tasking.Delay._delay">
            <summary>The delay time period.</summary>
        </member>
        <member name="F:React.Tasking.Delay._complete">
            <summary>
            Flag indicating whether or not the delay is complete.
            </summary>
        </member>
        <member name="M:React.Tasking.Delay.#ctor(React.Simulation)">
            <overloads>Create and initialize a new Delay task.</overloads>
            <summary>
            Create and initialize a new, zero-length <see cref="T:React.Tasking.Delay"/>
            task.
            </summary>
            <param name="sim">
            The <see cref="T:React.Simulation"/> under which the task will run.
            </param>
        </member>
        <member name="M:React.Tasking.Delay.#ctor(React.Simulation,System.Int64)">
            <summary>
            Create and initialize a new <see cref="T:React.Tasking.Delay"/> which will delay
            for the specified time.
            </summary>
            <param name="sim">
            The <see cref="T:React.Simulation"/> under which the task will run.
            </param>
            <param name="relTime">
            The delay time relative to the current simulation time.
            </param>
        </member>
        <member name="M:React.Tasking.Delay.ExecuteTask(System.Object,System.Object)">
            <summary>
            Perform a simulation delay.
            </summary>
            <remarks>
            This method will be invoked twice.  The first invocation, schedules
            the <see cref="T:React.Tasking.Delay"/> task to run again after the delay time.
            The second invocation marks the <see cref="T:React.Tasking.Delay"/> as complete and
            reactivates any <see cref="T:React.Task"/> instances blocking on this
            task.
            </remarks>
            <param name="activator">
            The object that activated this <see cref="T:React.Tasking.Delay"/>.
            </param>
            <param name="data">
            Optional data for the <see cref="T:React.Tasking.Delay"/>.
            </param>
        </member>
        <member name="P:React.Tasking.Delay.Time">
            <summary>
            Gets or sets the delay time.
            </summary>
            <exception cref="T:System.ArgumentException">
            If an attempt is made to set <see cref="P:React.Tasking.Delay.Time"/> to a value less
            than zero (0).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            If an attempt is made to change the delay time after the
            task has been activated.
            </exception>
            <value>
            The delay time relative to the current simulation time as an
            <see cref="T:System.Int64"/>.
            </value>
        </member>
        <member name="T:React.Tasking.DelegatingTaskHandler">
            <summary>
            Delegate that handles task processing on behalf of a
            <see cref="T:React.Tasking.Delegating"/> task.
            </summary>
            <remarks>
            If the <see cref="T:React.Tasking.DelegatingTaskHandler"/> completes its processing
            entirely, then it must return <b>true</b>; if it re-schedules
            <paramref name="task"/>, then it must return <b>false</b>.
            Returning <b>true</b> will unblock any <see cref="T:React.Task"/> instances
            waiting on the completion of <paramref name="task"/>.
            </remarks>
            <param name="task">
            The invoking <see cref="T:React.Tasking.Delegating"/> task.
            </param>
            <param name="activator">
            The object that activated <paramref name="task"/>.
            </param>
            <param name="data">
            Data passed to <paramref name="task"/> when it was activated.
            </param>
        </member>
        <member name="T:React.Tasking.Delegating">
            <summary>
            A <see cref="T:React.Task"/> that delegates processing to an
            <see cref="T:React.Tasking.DelegatingTaskHandler"/>.
            </summary>
        </member>
        <member name="F:React.Tasking.Delegating._handler">
            <summary>
            The callback that does the actual task processing.
            </summary>
        </member>
        <member name="M:React.Tasking.Delegating.#ctor(React.Simulation)">
            <summary>
            Create a new <see cref="T:React.Tasking.Delegating"/> task that has no
            <see cref="P:React.Tasking.Delegating.Handler"/>.
            </summary>
            <remarks>
            A handler must be set or this task will do nothing.
            </remarks>
            <param name="sim">
            The <see cref="T:React.Simulation"/> under which the task will run.
            </param>
        </member>
        <member name="M:React.Tasking.Delegating.#ctor(React.Simulation,React.Tasking.DelegatingTaskHandler)">
            <summary>
            Create a new <see cref="T:React.Tasking.Delegating"/> task that delegates task
            processing to the given <see cref="T:React.Tasking.DelegatingTaskHandler"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="handler"/> is <see langword="null"/>.
            </exception>
            <param name="sim">
            The <see cref="T:React.Simulation"/> under which the task will run.
            </param>
            <param name="handler">
            The <see cref="T:React.Tasking.DelegatingTaskHandler"/> that performs the actual
            task processing functionality.
            </param>
        </member>
        <member name="M:React.Tasking.Delegating.ExecuteTask(System.Object,System.Object)">
            <summary>
            Performs task processing by invoking the associated
            <see cref="T:React.Tasking.DelegatingTaskHandler"/>.
            </summary>
            <remarks>
            If <see cref="P:React.Tasking.Delegating.Handler"/> was never set, then this method does
            nothing and simply returns <b>true</b>.
            </remarks>
            <param name="activator">
            The object that activated this <see cref="T:React.Tasking.Delegating"/> task.
            </param>
            <param name="data">
            Optional data for the <see cref="T:React.Tasking.Delegating"/> task.
            </param>
        </member>
        <member name="P:React.Tasking.Delegating.Handler">
            <summary>
            Gets or sets the tasks <see cref="T:React.Tasking.DelegatingTaskHandler"/> callback
            that handles the actual task processing functionality.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            If an attempt is made to set the value to <see langword="null"/>.
            </exception>
            <value>
            The <see cref="T:React.Tasking.Delegating"/> task's callback that handles the
            actual task processing functionality.
            </value>
        </member>
        <member name="T:React.Tasking.InterruptTask">
            <summary>
            A <see cref="T:React.Task"/> implementation that can be used to interrupt other
            <see cref="T:React.Task"/>s.
            </summary>
        </member>
        <member name="F:React.Tasking.InterruptTask._interruptor">
            <summary>
            The object given as the <see cref="T:React.Task"/> interruptor.
            </summary>
        </member>
        <member name="M:React.Tasking.InterruptTask.#ctor(React.Simulation)">
            <overloads>Create and initialize an IterruptTask.</overloads>
            <summary>
            Create a new <see cref="T:React.Tasking.InterruptTask"/>.
            </summary>
            <param name="sim">The simulation context.</param>
        </member>
        <member name="M:React.Tasking.InterruptTask.#ctor(React.Simulation,System.Object)">
            <summary>
            Create a new <see cref="T:React.Tasking.InterruptTask"/> specifiying the
            interruptor object.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="interruptor">The interruptor object.</param>
        </member>
        <member name="M:React.Tasking.InterruptTask.ExecuteTask(System.Object,System.Object)">
            <summary>
            Interrupt all blocked <see cref="T:React.Task"/> instances.
            </summary>
            <param name="activator">Not used.</param>
            <param name="data">Not used.</param>
        </member>
        <member name="M:React.Tasking.InterruptTask.ResumeTask(React.Task,System.Object,System.Object)">
            <summary>
            Resume the given <see cref="T:React.Task"/> using an interrupt.
            </summary>
            <param name="task">The <see cref="T:React.Task"/> to interrupt.</param>
            <param name="activator">The interruptor object.</param>
            <param name="data">Not used.</param>
        </member>
        <member name="P:React.Tasking.InterruptTask.Interruptor">
            <summary>
            Gets or sets the interruptor object.
            </summary>
            <remarks>
            The interruptor object is passed to each blocked <see cref="T:React.Task"/>'s
            <see cref="M:React.Task.Interrupt(System.Object)"/> method when this <see cref="T:React.Task"/> is
            executed.  By default it is set to <c>this</c>.
            </remarks>
            <value>
            The interruptor as an <see cref="T:System.Object"/>.  Setting this property
            to <see langword="null"/> will result in the property getter
            returning <c>this</c>.
            </value>
        </member>
        <member name="T:React.Tasking.NoOperation">
            <summary>
            A <see cref="T:React.Task"/> that does nothing.
            </summary>
            <remarks>
            A <see cref="T:React.Tasking.NoOperation"/> task can be set to either: 1) resume
            all blocked <see cref="T:React.Task"/>s; or 2) end and resume nothing.  In
            the second case, the caller must have an alternate means of
            resuming blocked tasks if they want those tasks activated again during
            the simulation run.
            </remarks>
        </member>
        <member name="F:React.Tasking.NoOperation._resumeBlocked">
            <summary>
            Flag to control whether blocked <see cref="T:React.Task"/>s are resumed
            when this task executes.
            </summary>
        </member>
        <member name="M:React.Tasking.NoOperation.#ctor(React.Simulation)">
            <summary>
            Create a new <see cref="T:React.Tasking.NoOperation"/> task.
            </summary>
            <param name="sim">The simulation context.</param>
        </member>
        <member name="M:React.Tasking.NoOperation.#ctor(React.Simulation,System.Boolean)">
            <summary>
            Create a new <see cref="T:React.Tasking.NoOperation"/> task specifying whether or
            not to resume blocked <see cref="T:React.Task"/>s.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="resumeBlocked">
            <b>true</b> to resume all <see cref="T:React.Task"/>s blocked on this task;
            or <b>false</b> to simply do nothing.
            </param>
        </member>
        <member name="M:React.Tasking.NoOperation.ExecuteTask(System.Object,System.Object)">
            <summary>
            Perform a no-operation.
            </summary>
            <remarks>
            Depending upon the value of <see cref="P:React.Tasking.NoOperation.ResumeBlocked"/>, execution
            of this task may or may not resume any <see cref="T:React.Task"/>s which
            are blocking upon it.
            </remarks>
            <param name="activator">Not used.</param>
            <param name="data">Not used.</param>
        </member>
        <member name="P:React.Tasking.NoOperation.ResumeBlocked">
            <summary>
            Gets or sets whether or not the <see cref="T:React.Tasking.NoOperation"/> task
            will resume all tasks which may be blocking upon it.
            </summary>
            <value>
            <b>true</b> to resume all <see cref="T:React.Task"/>s blocked on this task;
            or <b>false</b> to simply do nothing.
            </value>
        </member>
        <member name="T:React.Tasking.ReleaseResource">
            <summary>
            A <see cref="T:React.Task"/> used to return a resource item back to its
            <see cref="T:React.Resource"/>.
            </summary>
            <remarks>
            <para>
            Normally client code should not have to instantiate objects of this
            class.  Rather, they should use the <see cref="M:React.IResource.Release(React.Task)"/>
            method which will return the appropriate <see cref="T:React.Task"/> for
            releasing a resource item on behalf of a client <see cref="T:React.Task"/>.
            </para>
            <para>
            This class is declared public to allow third parties to create
            their own derivatives of <see cref="T:React.Resource"/>.
            </para>
            </remarks>
        </member>
        <member name="F:React.Tasking.ReleaseResource._itemToRelease">
            <summary>
            The item to return to the <see cref="T:React.Resource"/>.
            </summary>
            <remarks>
            This will be <see langword="null"/> for un-tracked (anonymous)
            resources.
            </remarks>
        </member>
        <member name="M:React.Tasking.ReleaseResource.#ctor(React.Simulation,React.Resource)">
            <summary>
            Create a new <see cref="T:React.Tasking.ReleaseResource"/> instance that will
            release to the specified <see cref="T:React.Resource"/>.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="resource">
            The <see cref="T:React.Resource"/> to release.
            </param>
        </member>
        <member name="M:React.Tasking.ReleaseResource.#ctor(React.Simulation,React.Resource,System.Object)">
            <summary>
            Create a new <see cref="T:React.Tasking.ReleaseResource"/> instance that will
            release a specified item to the specified <see cref="T:React.Resource"/>.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="resource">
            The <see cref="T:React.Resource"/> to which <paramref name="item"/> is
            returned.
            </param>
            <param name="item">
            The resource item originally obtained from
            <paramref name="resource"/>.
            </param>
        </member>
        <member name="M:React.Tasking.ReleaseResource.ExecuteTask(System.Object,System.Object)">
            <summary>
            Attempt to release an item to a <see cref="T:React.Resource"/> on behalf
            of some client <see cref="T:React.Task"/>.
            </summary>
            <exception cref="T:System.ArgumentException">
            If <paramref name="activator"/> is not a <see cref="T:React.Task"/>
            instance.
            </exception>
            <param name="activator">
            The object that activated this <see cref="T:React.Tasking.ReleaseResource"/> task.
            </param>
            <param name="data">Not used.</param>
        </member>
        <member name="T:React.Tasking.ResupplyConsumable">
            <summary>
            A <see cref="T:React.Task"/> used to add consumable items to a 
            <see cref="T:React.Consumable"/>.
            </summary>
            <remarks>
            <para>
            Normally client code should not have to instantiate objects of this
            class.  Rather, they should use the <see cref="M:React.IConsumable.Resupply(React.Task,System.Int32)"/>
            method which will return the appropriate <see cref="T:React.Task"/> for
            adding consumable items to a <see cref="T:React.Consumable"/> on behalf of
            a client <see cref="T:React.Task"/>.
            </para>
            <para>
            This class is declared public to allow third parties to create
            their own derivatives of <see cref="T:React.Consumable"/>.
            </para>
            </remarks>
        </member>
        <member name="F:React.Tasking.ResupplyConsumable._quantity">
            <summary>
            The number of consumable items to add to a
            <see cref="T:React.Consumable"/>.
            </summary>
        </member>
        <member name="M:React.Tasking.ResupplyConsumable.#ctor(React.Simulation,React.Consumable)">
            <summary>
            Create a <see cref="T:React.Tasking.ResupplyConsumable"/> that will add one (1)
            consumable item to the specified <see cref="T:React.Consumable"/>.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="consumable">
            The <see cref="T:React.Consumable"/> to re-supply.
            </param>
        </member>
        <member name="M:React.Tasking.ResupplyConsumable.#ctor(React.Simulation,React.Consumable,System.Int32)">
            <summary>
            Create a <see cref="T:React.Tasking.ResupplyConsumable"/> that will add the
            specified number of consumable items to a <see cref="T:React.Consumable"/>.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="consumable">
            The <see cref="T:React.Consumable"/> to re-supply.
            </param>
            <param name="quantity">
            The number of consumable items to add to
            <paramref name="consumable"/>.
            </param>
        </member>
        <member name="M:React.Tasking.ResupplyConsumable.ExecuteTask(System.Object,System.Object)">
            <summary>
            Resupply a <see cref="T:React.Consumable"/> on behalf of some client
            <see cref="T:React.Task"/>.
            </summary>
            <param name="activator">Not used.</param>
            <param name="data">Not used.</param>
        </member>
        <member name="P:React.Tasking.ResupplyConsumable.Quantity">
            <summary>
            Gets or sets the number of consumable items that will be added to
            the <see cref="T:React.Consumable"/>.
            </summary>
            <value>
            The number of consumable items to add as an <see cref="T:System.Int32"/>.
            </value>
            <exception cref="T:System.ArgumentException">
            If an attempt is made set this property to a negative value.
            </exception>
        </member>
        <member name="T:React.Tasking.StopSimulation">
            <summary>
            A <see cref="T:React.Task"/> that stops a running <see cref="T:React.Simulation"/>.
            </summary>
            <remarks>
            A <see cref="T:React.Tasking.StopSimulation"/> task can be used to schedule a
            <see cref="T:React.Simulation"/>'s stop time <b>before</b> it has been
            started.  Per the documentation for <see cref="M:React.Simulation.Stop"/>,
            those methods do nothing if the <see cref="T:React.Simulation"/> is not
            running.  Therefore, to "pre-schedule" the stop time, this task may be
            used — simply create a new <see cref="T:React.Tasking.StopSimulation"/> and activate
            (schedule) it to occur at the time you wish the
            <see cref="T:React.Simulation"/> to end.
            </remarks>
        </member>
        <member name="M:React.Tasking.StopSimulation.#ctor(React.Simulation)">
            <summary>
            Create and initialize a new <see cref="T:React.Tasking.StopSimulation"/> task.
            </summary>
            <param name="sim">
            The <see cref="T:React.Simulation"/> under which this task will run.
            </param>
        </member>
        <member name="M:React.Tasking.StopSimulation.Stop(React.Simulation,System.Int64)">
            <summary>
            Schedules a <see cref="T:React.Tasking.StopSimulation"/> task at some time
            in the future.
            </summary>
            <remarks>
            <para>
            This is a convenience method for stopping a running
            <see cref="T:React.Simulation"/>.  All it does is the following
            </para>
            <para><code>
            Task task = new StopSimulation(sim);
            task.Activate(null, relTime);</code></para>
            </remarks>
            <param name="sim">
            The <see cref="T:React.Simulation"/> under which the task will run.
            </param>
            <param name="relTime">
            The time, relative to the current simulation time, when the
            task should run.
            </param>
        </member>
        <member name="M:React.Tasking.StopSimulation.ExecuteTask(System.Object,System.Object)">
            <summary>
            Stops the associated <see cref="T:React.Simulation"/> by invoking its
            <see cref="M:React.Simulation.Stop"/> method.
            </summary>
            <param name="activator">Not used.</param>
            <param name="data">Not used.</param>
        </member>
        <member name="T:React.Tasking.TransferResource">
            <summary>
            A <see cref="T:React.Task"/> used to tranfer a resource item from its current
            owning <see cref="T:React.Task"/> to another <see cref="T:React.Task"/>.
            </summary>
            <remarks>
            <para>
            Normally client code should not have to instantiate objects of this
            class.  Rather, they should use the <see cref="M:React.IResource.Transfer(React.Task,React.Task)"/>
            method which will return the appropriate <see cref="T:React.Task"/> for
            transfering a resource item on behalf of a client <see cref="T:React.Task"/>.
            </para>
            <para>
            This class is declared public to allow third parties to create
            their own derivatives of <see cref="T:React.Resource"/>.
            </para>
            </remarks>
        </member>
        <member name="F:React.Tasking.TransferResource._receiver">
            <summary>
            The <see cref="T:React.Task"/> which will become the new resource item
            owner.
            </summary>
        </member>
        <member name="F:React.Tasking.TransferResource._itemToTransfer">
            <summary>
            The item to transfer to <see cref="F:React.Tasking.TransferResource._receiver"/>.
            </summary>
            <remarks>
            This will be <see langword="null"/> for un-tracked (anonymous)
            resources.
            </remarks>
        </member>
        <member name="M:React.Tasking.TransferResource.#ctor(React.Simulation,React.Resource,React.Task)">
            <summary>
            Create a new <see cref="T:React.Tasking.TransferResource"/> task that will transfer
            a resource item to the specified receiver.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="resource">
            The <see cref="T:React.Resource"/> containing the item to transfer to
            <paramref name="receiver"/>.
            </param>
            <param name="receiver">
            The <see cref="T:React.Task"/> which will become the new owner of an item
            contained in <paramref name="resource"/>.
            </param>
        </member>
        <member name="M:React.Tasking.TransferResource.#ctor(React.Simulation,React.Resource,React.Task,System.Object)">
            <summary>
            Create a new <see cref="T:React.Tasking.TransferResource"/> task that will transfer
            a specific resource item to the given receiver.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="resource">
            The <see cref="T:React.Resource"/> containing the item to transfer to
            <paramref name="receiver"/>.
            </param>
            <param name="receiver">
            The <see cref="T:React.Task"/> which will become the new owner of an item
            contained in <paramref name="resource"/>.
            </param>
            <param name="item">
            The resource item to transfer.  This should be <see langword="null"/>
            for anonymous resources.
            </param>
        </member>
        <member name="M:React.Tasking.TransferResource.ExecuteTask(System.Object,System.Object)">
            <summary>
            Transfers ownership of a resource item to another <see cref="T:React.Task"/>.
            </summary>
            <param name="activator">
            The current owner of the resource item.
            </param>
            <param name="data">Not used.</param>
        </member>
        <member name="T:React.Tasking.WaitForCondition">
            <summary>
            A <see cref="T:React.Task"/> used to wait for a <see cref="T:React.Condition"/> to
            become signalled (true).
            </summary>
            <remarks>
            <para>
            Normally client code should not have to instantiate objects of this
            class.  Rather, they should use the <see cref="M:React.ICondition.Block(React.Task)"/>
            method which will return the appropriate <see cref="T:React.Task"/> for
            acquiring consumable items on behalf of a client <see cref="T:React.Task"/>.
            </para>
            <para>
            This class is declared public to allow third parties to create
            their own derivatives of <see cref="T:React.Condition"/>.
            </para>
            </remarks>
        </member>
        <member name="M:React.Tasking.WaitForCondition.#ctor(React.Simulation,React.Condition)">
            <summary>
            Create a new <see cref="T:React.Tasking.WaitForCondition"/> task that will wait on
            the specified <see cref="T:React.Condition"/>.
            </summary>
            <param name="sim">The simulation context.</param>
            <param name="condition">
            The <see cref="T:React.Condition"/> to wait upon.
            </param>
        </member>
        <member name="M:React.Tasking.WaitForCondition.ExecuteTask(System.Object,System.Object)">
            <summary>
            Begins waiting on the associated <see cref="T:React.Condition"/>.
            </summary>
            <param name="activator">
            The object that activated this <see cref="T:React.Tasking.WaitForCondition"/> task.
            </param>
            <param name="data">Not used.</param>
        </member>
    </members>
</doc>
